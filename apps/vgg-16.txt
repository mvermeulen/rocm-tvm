One or more operators have not been tuned. Please tune your model for better performance. Use DEBUG logging level to see more details.
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((2,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 4096, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 4096 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 4096, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 4096 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4096,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 4096), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax1_outer in range(256):
            cse_var_1: T.int32 = ax1_outer * 16
            T_expand_dims_3 = T.Buffer((4096,), data=T_expand_dims_1)
            T_expand_dims_3[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((2,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 4096, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 4096 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 4096, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 4096 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4096,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 4096), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax1_outer in range(256):
            cse_var_1: T.int32 = ax1_outer * 16
            T_expand_dims_3 = T.Buffer((4096,), data=T_expand_dims_1)
            T_expand_dims_3[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:09:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((2,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 1000, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1000, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1000,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 1000), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax1_outer, ax1_inner_s in T.grid(63, 16):
            if ax1_outer * 2 + T.shift_right(ax1_inner_s, 3) < 125:
                T_expand_dims_3 = T.Buffer((1000,), data=T_expand_dims_1)
                cse_var_1: T.int32 = ax1_outer * 16 + ax1_inner_s
                T_expand_dims_3[cse_var_1] = p0_2[cse_var_1]
    T.ret(0)
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_batch_flatten_kernel(p0: T.handle("float32"), tensor: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((25088,), data=p0)
    tensor_1 = T.decl_buffer((25088,), data=tensor)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    tensor_1[blockIdx_x * 256 + threadIdx_x] = p0_1[T.Div(blockIdx_x * 256 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 11 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 4 + threadIdx_x, 7)]
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_1_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((3211264,), data=T_relu)
    p1_1 = T.decl_buffer((36864,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((96,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((3211264,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((68,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((64,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([16], "float32", "local")
    pad_temp_shared = T.allocate([68], "float32", "shared")
    p1_shared = T.allocate([96], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 112)
    blockIdx_x = T.launch_thread("blockIdx.x", 7)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 8)
    for ff_init, xx_init in T.grid(2, 4):
        conv2d_nchw_1[ff_init * 4 + xx_init] = T.float32(0)
        conv2d_nchw_1[ff_init * 4 + xx_init + 8] = T.float32(0)
    for rc_outer, ry_outer in T.grid(64, 3):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            T.tvm_storage_sync("shared")
            if threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1 < 68:
                if threadIdx_y_1 * 5 + threadIdx_x_1 < 9:
                    if threadIdx_x_1 < 5:
                        pad_temp_shared_1[threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1] = T.if_then_else(1 <= blockIdx_y * 2 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) + ry_outer and blockIdx_y * 2 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) + ry_outer < 225 and 1 <= blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) and blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) < 225, p0_1[rc_outer * 50176 + blockIdx_y * 448 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) * 224 + ry_outer * 224 + blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) - 225], T.float32(0))
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 8:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 12 + threadIdx_y_1 * 6 + threadIdx_x_1] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + T.Div(threadIdx_x_1, 3) * 576 + rc_outer * 9 + ry_outer * 3 + T.truncmod(threadIdx_x_1, 3)]
        T.tvm_storage_sync("shared")
        for rx_inner, ff, xx in T.grid(3, 2, 4):
            conv2d_nchw_1[ff * 4 + xx] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 34 + threadIdx_x * 4 + xx + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner], conv2d_nchw_1[ff * 4 + xx])
            conv2d_nchw_1[ff * 4 + xx + 8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 34 + threadIdx_x * 4 + xx + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner + 48], conv2d_nchw_1[ff * 4 + xx + 8])
    for ax1_inner_inner_inner, ax3_inner_inner_inner in T.grid(2, 4):
        T_relu_1[blockIdx_z * 1605632 + threadIdx_z * 100352 + ax1_inner_inner_inner * 50176 + blockIdx_y * 448 + threadIdx_y * 224 + blockIdx_x * 32 + threadIdx_x * 4 + ax3_inner_inner_inner] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner], T.float32(0))
        T_relu_1[blockIdx_z * 1605632 + threadIdx_z * 100352 + ax1_inner_inner_inner * 50176 + blockIdx_y * 448 + threadIdx_y * 224 + blockIdx_x * 32 + threadIdx_x * 4 + ax3_inner_inner_inner + 802816] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner + 8] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner + 16], T.float32(0))
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_2_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    T_relu_1 = T.decl_buffer((1605632,), data=T_relu)
    p1_1 = T.decl_buffer((73728,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((802816,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 28)
    blockIdx_x = T.launch_thread("blockIdx.x", 8)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(8):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 113 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 113, p0_1[rc_outer * 100352 + T.shift_right(threadIdx_z_1, 2) * 12544 + blockIdx_y * 448 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 112 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 113], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 113 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 113, p0_1[rc_outer * 100352 + T.shift_right(threadIdx_z_1, 2) * 12544 + blockIdx_y * 448 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 112 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 113], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_1 * 576 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 112] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 224] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 336] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_3_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    T_relu_1 = T.decl_buffer((1605632,), data=T_relu)
    p1_1 = T.decl_buffer((147456,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((1605632,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 28)
    blockIdx_x = T.launch_thread("blockIdx.x", 8)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(16):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 113 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 113, p0_1[rc_outer * 100352 + T.shift_right(threadIdx_z_1, 2) * 12544 + blockIdx_y * 448 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 112 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 113], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 113 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 113, p0_1[rc_outer * 100352 + T.shift_right(threadIdx_z_1, 2) * 12544 + blockIdx_y * 448 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 112 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 113], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 112] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 224] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 401408 + threadIdx_z * 12544 + blockIdx_y * 448 + blockIdx_x * 14 + threadIdx_x + 336] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_4_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    T_relu_1 = T.decl_buffer((802816,), data=T_relu)
    p1_1 = T.decl_buffer((294912,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((401408,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 8)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 14)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(16):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 57 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 57, p0_1[rc_outer * 25088 + T.shift_right(threadIdx_z_1, 2) * 3136 + blockIdx_y * 224 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 56 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 57], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 57 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 57, p0_1[rc_outer * 25088 + T.shift_right(threadIdx_z_1, 2) * 3136 + blockIdx_y * 224 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 56 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 57], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 56] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 112] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 168] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_5_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    T_relu_1 = T.decl_buffer((802816,), data=T_relu)
    p1_1 = T.decl_buffer((589824,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((802816,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 8)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 14)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(32):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 57 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 57, p0_1[rc_outer * 25088 + T.shift_right(threadIdx_z_1, 2) * 3136 + blockIdx_y * 224 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 56 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 57], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 57 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 57, p0_1[rc_outer * 25088 + T.shift_right(threadIdx_z_1, 2) * 3136 + blockIdx_y * 224 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 56 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 57], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 56] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 112] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 100352 + threadIdx_z * 3136 + blockIdx_y * 224 + blockIdx_x * 14 + threadIdx_x + 168] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:12] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_6_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((512,), data=p2)
    T_relu_1 = T.decl_buffer((401408,), data=T_relu)
    p1_1 = T.decl_buffer((1179648,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((200704,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 7)
    blockIdx_x = T.launch_thread("blockIdx.x", 2)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(32):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 29 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 29, p0_1[rc_outer * 6272 + T.shift_right(threadIdx_z_1, 2) * 784 + blockIdx_y * 112 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 28 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 29], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 29 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 29, p0_1[rc_outer * 6272 + T.shift_right(threadIdx_z_1, 2) * 784 + blockIdx_y * 112 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 28 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 29], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 28] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 56] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 84] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_7_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((512,), data=p2)
    T_relu_1 = T.decl_buffer((401408,), data=T_relu)
    p1_1 = T.decl_buffer((2359296,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((401408,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((768,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    conv2d_nchw = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([768], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 7)
    blockIdx_x = T.launch_thread("blockIdx.x", 2)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    for rc_outer in range(64):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 29 and 1 < blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) < 29, p0_1[rc_outer * 6272 + T.shift_right(threadIdx_z_1, 2) * 784 + blockIdx_y * 112 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 28 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 8 + threadIdx_x_1 * 2, 15) - 29], T.float32(0))
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    pad_temp_shared_1[threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) and blockIdx_y * 4 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) < 29 and 1 <= blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) and blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) < 29, p0_1[rc_outer * 6272 + T.shift_right(threadIdx_z_1, 2) * 784 + blockIdx_y * 112 + T.shift_right(T.bitwise_and(threadIdx_z_1, 3) * 3 + T.shift_right(threadIdx_x_1, 2), 1) * 28 + blockIdx_x * 14 + T.bitwise_and(threadIdx_z_1 * 24 + threadIdx_x_1 * 2 + 1, 15) - 29], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6 + 1]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6 + 2]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6 + 3]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6 + 4]
            if T.Div(threadIdx_x_1, 12) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 12:
                    p1_shared_1[threadIdx_z_1 * 72 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 48], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 64], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 80], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 49], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 65], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 81], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 50], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 66], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 82], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 96], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 97], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 98], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 112], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 113], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 114], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 128], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 144], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 160], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 176], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 129], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 145], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 161], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 177], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 130], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 146], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 162], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 178], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 192], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 193], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 194], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 208], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 209], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 210], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 224], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 240], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 256], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 272], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 225], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 241], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 257], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 273], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 226], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 242], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 258], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 274], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 288], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 289], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 290], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 304], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 305], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 306], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 320], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 336], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 352], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 368], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 321], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 337], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 353], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 369], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 322], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 338], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 354], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 370], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 384], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 385], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 386], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 400], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 401], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 402], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 416], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 432], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 448], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 464], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 417], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 433], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 449], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 465], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 418], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 434], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 450], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 466], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 480], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 481], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 482], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 496], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 497], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 498], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 512], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 528], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 544], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 560], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 513], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 529], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 545], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 561], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 514], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 530], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 546], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 562], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 576], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 577], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 578], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 592], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 593], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 594], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 608], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 624], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 640], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 656], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 609], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 625], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 641], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 657], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 610], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 626], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 642], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 658], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 672], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 673], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 674], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 688], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 689], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 690], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 704], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 720], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 736], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 752], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 705], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 721], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 737], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 753], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[3])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 706], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 722], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 738], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x + 754], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[3])
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 28] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 56] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 25088 + threadIdx_z * 784 + blockIdx_y * 112 + blockIdx_x * 14 + threadIdx_x + 84] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_8_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((512,), data=p2)
    T_relu_1 = T.decl_buffer((100352,), data=T_relu)
    p1_1 = T.decl_buffer((2359296,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((100352,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((512,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((2,), data=conv2d_nchw, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    conv2d_nchw = T.allocate([2], "float32", "local")
    pad_temp_shared = T.allocate([512], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 7)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    for rc_outer in range(64):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            if T.shift_right(T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 4:
                        pad_temp_shared_1[threadIdx_z_1 * 16 + threadIdx_y_1 * 8 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 2 + T.bitwise_and(threadIdx_z_1, 3) and blockIdx_y * 2 + T.bitwise_and(threadIdx_z_1, 3) < 15 and 1 < threadIdx_y_1 * 8 + threadIdx_x_1 * 2, p0_1[rc_outer * 1568 + T.shift_right(threadIdx_z_1, 2) * 196 + blockIdx_y * 28 + T.bitwise_and(threadIdx_z_1, 3) * 14 + threadIdx_y_1 * 8 + threadIdx_x_1 * 2 - 15], T.float32(0))
            if T.shift_right(T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 4:
                        pad_temp_shared_1[threadIdx_z_1 * 16 + threadIdx_y_1 * 8 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 2 + T.bitwise_and(threadIdx_z_1, 3) and blockIdx_y * 2 + T.bitwise_and(threadIdx_z_1, 3) < 15 and threadIdx_y_1 * 4 + threadIdx_x_1 < 7, p0_1[rc_outer * 1568 + T.shift_right(threadIdx_z_1, 2) * 196 + blockIdx_y * 28 + T.bitwise_and(threadIdx_z_1, 3) * 14 + threadIdx_y_1 * 8 + threadIdx_x_1 * 2 - 14], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6]
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 1]
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 2]
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 3]
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 4]
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 32:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 147456 + threadIdx_z_1 * 4608 + rc_outer * 72 + threadIdx_y_1 * 36 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 1], p1_shared_1[threadIdx_z * 72], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 1], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 2], p1_shared_1[threadIdx_z * 72 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 2], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 3], p1_shared_1[threadIdx_z * 72 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 16], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 17], p1_shared_1[threadIdx_z * 72 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 17], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 18], p1_shared_1[threadIdx_z * 72 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 18], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 19], p1_shared_1[threadIdx_z * 72 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 32], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 33], p1_shared_1[threadIdx_z * 72 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 33], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 34], p1_shared_1[threadIdx_z * 72 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 34], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 35], p1_shared_1[threadIdx_z * 72 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 64], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 65], p1_shared_1[threadIdx_z * 72 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 65], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 66], p1_shared_1[threadIdx_z * 72 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 66], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 67], p1_shared_1[threadIdx_z * 72 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 80], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 72 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 82], p1_shared_1[threadIdx_z * 72 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 82], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 83], p1_shared_1[threadIdx_z * 72 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 96], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 97], p1_shared_1[threadIdx_z * 72 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 97], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 98], p1_shared_1[threadIdx_z * 72 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 98], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 99], p1_shared_1[threadIdx_z * 72 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 128], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 129], p1_shared_1[threadIdx_z * 72 + 18], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 129], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 130], p1_shared_1[threadIdx_z * 72 + 19], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 130], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 131], p1_shared_1[threadIdx_z * 72 + 20], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 144], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 145], p1_shared_1[threadIdx_z * 72 + 21], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 145], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 146], p1_shared_1[threadIdx_z * 72 + 22], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 146], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 147], p1_shared_1[threadIdx_z * 72 + 23], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 160], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 161], p1_shared_1[threadIdx_z * 72 + 24], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 161], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 162], p1_shared_1[threadIdx_z * 72 + 25], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 162], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 163], p1_shared_1[threadIdx_z * 72 + 26], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 192], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 193], p1_shared_1[threadIdx_z * 72 + 27], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 193], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 194], p1_shared_1[threadIdx_z * 72 + 28], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 194], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 195], p1_shared_1[threadIdx_z * 72 + 29], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 208], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 209], p1_shared_1[threadIdx_z * 72 + 30], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 209], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 210], p1_shared_1[threadIdx_z * 72 + 31], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 210], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 211], p1_shared_1[threadIdx_z * 72 + 32], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 224], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 225], p1_shared_1[threadIdx_z * 72 + 33], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 225], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 226], p1_shared_1[threadIdx_z * 72 + 34], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 226], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 227], p1_shared_1[threadIdx_z * 72 + 35], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 256], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 257], p1_shared_1[threadIdx_z * 72 + 36], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 257], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 258], p1_shared_1[threadIdx_z * 72 + 37], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 258], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 259], p1_shared_1[threadIdx_z * 72 + 38], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 272], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 273], p1_shared_1[threadIdx_z * 72 + 39], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 273], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 274], p1_shared_1[threadIdx_z * 72 + 40], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 274], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 275], p1_shared_1[threadIdx_z * 72 + 41], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 288], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 289], p1_shared_1[threadIdx_z * 72 + 42], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 289], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 290], p1_shared_1[threadIdx_z * 72 + 43], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 290], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 291], p1_shared_1[threadIdx_z * 72 + 44], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 320], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 321], p1_shared_1[threadIdx_z * 72 + 45], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 321], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 322], p1_shared_1[threadIdx_z * 72 + 46], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 322], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 323], p1_shared_1[threadIdx_z * 72 + 47], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 336], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 337], p1_shared_1[threadIdx_z * 72 + 48], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 337], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 338], p1_shared_1[threadIdx_z * 72 + 49], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 338], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 339], p1_shared_1[threadIdx_z * 72 + 50], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 352], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 353], p1_shared_1[threadIdx_z * 72 + 51], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 353], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 354], p1_shared_1[threadIdx_z * 72 + 52], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 354], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 355], p1_shared_1[threadIdx_z * 72 + 53], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 384], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 385], p1_shared_1[threadIdx_z * 72 + 54], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 385], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 386], p1_shared_1[threadIdx_z * 72 + 55], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 386], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 387], p1_shared_1[threadIdx_z * 72 + 56], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 400], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 401], p1_shared_1[threadIdx_z * 72 + 57], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 401], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 402], p1_shared_1[threadIdx_z * 72 + 58], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 402], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 403], p1_shared_1[threadIdx_z * 72 + 59], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 416], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 417], p1_shared_1[threadIdx_z * 72 + 60], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 417], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 418], p1_shared_1[threadIdx_z * 72 + 61], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 418], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 419], p1_shared_1[threadIdx_z * 72 + 62], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 448], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 449], p1_shared_1[threadIdx_z * 72 + 63], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 449], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 450], p1_shared_1[threadIdx_z * 72 + 64], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 450], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 451], p1_shared_1[threadIdx_z * 72 + 65], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 464], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 465], p1_shared_1[threadIdx_z * 72 + 66], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 465], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 466], p1_shared_1[threadIdx_z * 72 + 67], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 466], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 467], p1_shared_1[threadIdx_z * 72 + 68], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 480], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 481], p1_shared_1[threadIdx_z * 72 + 69], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 481], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 482], p1_shared_1[threadIdx_z * 72 + 70], conv2d_nchw_1[1])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 482], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 16 + threadIdx_x * 2 + 483], p1_shared_1[threadIdx_z * 72 + 71], conv2d_nchw_1[1])
    T_relu_1[blockIdx_z * 6272 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 2] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 6272 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 2 + 1] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((3211264,), data=T_relu)
    p1_1 = T.decl_buffer((1728,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((96,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((150528,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((68,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((64,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([16], "float32", "local")
    pad_temp_shared = T.allocate([68], "float32", "shared")
    p1_shared = T.allocate([96], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 112)
    blockIdx_x = T.launch_thread("blockIdx.x", 7)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 8)
    for ff_init, xx_init in T.grid(2, 4):
        conv2d_nchw_1[ff_init * 4 + xx_init] = T.float32(0)
        conv2d_nchw_1[ff_init * 4 + xx_init + 8] = T.float32(0)
    for rc_outer, ry_outer in T.grid(3, 3):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            T.tvm_storage_sync("shared")
            if threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1 < 68:
                if threadIdx_y_1 * 5 + threadIdx_x_1 < 9:
                    if threadIdx_x_1 < 5:
                        pad_temp_shared_1[threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1] = T.if_then_else(1 <= blockIdx_y * 2 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) + ry_outer and blockIdx_y * 2 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) + ry_outer < 225 and 1 <= blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) and blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) < 225, p0_1[rc_outer * 50176 + blockIdx_y * 448 + T.Div(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) * 224 + ry_outer * 224 + blockIdx_x * 32 + T.truncmod(threadIdx_z_1 * 9 + threadIdx_y_1 * 5 + threadIdx_x_1, 34) - 225], T.float32(0))
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 8:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 12 + threadIdx_y_1 * 6 + threadIdx_x_1] = p1_1[blockIdx_z * 864 + threadIdx_z_1 * 108 + threadIdx_y_1 * 54 + T.Div(threadIdx_x_1, 3) * 27 + rc_outer * 9 + ry_outer * 3 + T.truncmod(threadIdx_x_1, 3)]
        T.tvm_storage_sync("shared")
        for rx_inner, ff, xx in T.grid(3, 2, 4):
            conv2d_nchw_1[ff * 4 + xx] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 34 + threadIdx_x * 4 + xx + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner], conv2d_nchw_1[ff * 4 + xx])
            conv2d_nchw_1[ff * 4 + xx + 8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 34 + threadIdx_x * 4 + xx + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner + 48], conv2d_nchw_1[ff * 4 + xx + 8])
    for ax1_inner_inner_inner, ax3_inner_inner_inner in T.grid(2, 4):
        T_relu_1[blockIdx_z * 1605632 + threadIdx_z * 100352 + ax1_inner_inner_inner * 50176 + blockIdx_y * 448 + threadIdx_y * 224 + blockIdx_x * 32 + threadIdx_x * 4 + ax3_inner_inner_inner] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner], T.float32(0))
        T_relu_1[blockIdx_z * 1605632 + threadIdx_z * 100352 + ax1_inner_inner_inner * 50176 + blockIdx_y * 448 + threadIdx_y * 224 + blockIdx_x * 32 + threadIdx_x * 4 + ax3_inner_inner_inner + 802816] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner + 8] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner + 16], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_dense_add_kernel(T_add: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.y", "blockIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((1000,), data=p2)
    T_add_1 = T.decl_buffer((1000,), data=T_add)
    p1_shared_local = T.handle("float32", "local")
    p1_shared_local_1 = T.decl_buffer((4,), data=p1_shared_local, scope="local", align=8)
    p0_shared_local = T.handle("float32", "local")
    p0_shared_local_1 = T.decl_buffer((1,), data=p0_shared_local, scope="local", align=4)
    p1_shared_local_2 = T.handle("float32", "local")
    p1_shared_local_3 = T.decl_buffer((4,), data=p1_shared_local_2, scope="local", align=8)
    p0_shared_local_2 = T.handle("float32", "local")
    p0_shared_local_3 = T.decl_buffer((1,), data=p0_shared_local_2, scope="local", align=4)
    p1_1 = T.decl_buffer((4096000,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((4096,), data=p0)
    p0_shared = T.handle("float32", "shared")
    p0_shared_1 = T.decl_buffer((16,), data=p0_shared, scope="shared", align=32)
    T_matmul_NT_local = T.handle("float32", "local")
    T_matmul_NT_local_1 = T.decl_buffer((4,), data=T_matmul_NT_local, scope="local", align=8)
    blockIdx_y = T.launch_thread("blockIdx.y", 16)
    T_matmul_NT_local = T.allocate([4], "float32", "local")
    p0_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([1024], "float32", "shared")
    p0_shared_local_2 = T.allocate([1], "float32", "local")
    p1_shared_local_2 = T.allocate([4], "float32", "local")
    p0_shared_local = T.allocate([1], "float32", "local")
    p1_shared_local = T.allocate([4], "float32", "local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 16)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    for j_c_init in range(2):
        T_matmul_NT_local_1[j_c_init] = T.float32(0)
        T_matmul_NT_local_1[j_c_init + 2] = T.float32(0)
    with T.launch_thread("threadIdx.y", 1) as threadIdx_y_1:
        for ax1_outer in range(2):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax1_inner_inner in range(4):
                p0_shared_1[ax1_outer * 4 + ax1_inner_inner] = p0_1[ax1_outer * 4 + ax1_inner_inner]
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_y_1, 16):
        for ax0_inner in range(4):
            T.launch_thread(threadIdx_x_1, 16)
            for ax1_inner_inner in range(4):
                if threadIdx_x_1 < 2:
                    if blockIdx_y * 8 + T.shift_right(threadIdx_y_1, 1) < 125:
                        p1_shared_1[threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 262144 + threadIdx_y_1 * 16384 + ax0_inner * 4096 + threadIdx_x_1 * 4 + ax1_inner_inner]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    for k_outer_outer in range(511):
        T.tvm_storage_sync("shared")
        with T.attr(p0_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_2, 1)
            for ax1_outer in range(2):
                T.launch_thread(threadIdx_x_2, 1)
                for ax1_inner_inner in range(4):
                    p0_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 8 + ax1_outer * 4 + ax1_inner_inner] = p0_1[k_outer_outer * 8 + ax1_outer * 4 + ax1_inner_inner + 8]
        with T.attr(p1_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_1, 16)
            for ax0_inner in range(4):
                T.launch_thread(threadIdx_x_1, 16)
                for ax1_inner_inner in range(4):
                    if threadIdx_x_1 < 2:
                        if blockIdx_y * 8 + T.shift_right(threadIdx_y_1, 1) < 125:
                            p1_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 512 + threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 262144 + threadIdx_y_1 * 16384 + ax0_inner * 4096 + k_outer_outer * 8 + threadIdx_x_1 * 4 + ax1_inner_inner + 8]
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 256]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 1]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 1]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 257]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 2]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 2]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 258]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 3]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 3]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 259]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 4]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 4]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 260]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 5]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 5]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 261]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 6]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 6]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 262]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 7]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 7]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 263]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    T.tvm_storage_sync("shared")
    p0_shared_local_1[0] = p0_shared_1[8]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 512]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 768]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[9]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 513]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 769]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[10]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 514]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 770]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[11]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 515]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 771]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[12]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 516]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 772]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[13]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 517]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 773]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[14]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 518]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 774]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[15]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 519]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 775]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    for ax1_inner_inner_inner in range(2):
        T_add_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner] = T_matmul_NT_local_1[ax1_inner_inner_inner] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_add_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32] = T_matmul_NT_local_1[ax1_inner_inner_inner + 2] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_dense_add_nn_relu_1_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.y", "blockIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((4096,), data=p2)
    T_relu_1 = T.decl_buffer((4096,), data=T_relu)
    p1_shared_local = T.handle("float32", "local")
    p1_shared_local_1 = T.decl_buffer((4,), data=p1_shared_local, scope="local", align=8)
    p0_shared_local = T.handle("float32", "local")
    p0_shared_local_1 = T.decl_buffer((1,), data=p0_shared_local, scope="local", align=4)
    p1_shared_local_2 = T.handle("float32", "local")
    p1_shared_local_3 = T.decl_buffer((4,), data=p1_shared_local_2, scope="local", align=8)
    p0_shared_local_2 = T.handle("float32", "local")
    p0_shared_local_3 = T.decl_buffer((1,), data=p0_shared_local_2, scope="local", align=4)
    p1_1 = T.decl_buffer((16777216,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((4096,), data=p0)
    p0_shared = T.handle("float32", "shared")
    p0_shared_1 = T.decl_buffer((16,), data=p0_shared, scope="shared", align=32)
    T_matmul_NT_local = T.handle("float32", "local")
    T_matmul_NT_local_1 = T.decl_buffer((4,), data=T_matmul_NT_local, scope="local", align=8)
    blockIdx_y = T.launch_thread("blockIdx.y", 64)
    T_matmul_NT_local = T.allocate([4], "float32", "local")
    p0_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([1024], "float32", "shared")
    p0_shared_local_2 = T.allocate([1], "float32", "local")
    p1_shared_local_2 = T.allocate([4], "float32", "local")
    p0_shared_local = T.allocate([1], "float32", "local")
    p1_shared_local = T.allocate([4], "float32", "local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 16)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    for j_c_init in range(2):
        T_matmul_NT_local_1[j_c_init] = T.float32(0)
        T_matmul_NT_local_1[j_c_init + 2] = T.float32(0)
    with T.launch_thread("threadIdx.y", 1) as threadIdx_y_1:
        for ax1_outer in range(2):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax1_inner_inner in range(4):
                p0_shared_1[ax1_outer * 4 + ax1_inner_inner] = p0_1[ax1_outer * 4 + ax1_inner_inner]
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_y_1, 16):
        for ax0_inner in range(4):
            T.launch_thread(threadIdx_x_1, 16)
            for ax1_inner_inner in range(4):
                if threadIdx_x_1 < 2:
                    p1_shared_1[threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 262144 + threadIdx_y_1 * 16384 + ax0_inner * 4096 + threadIdx_x_1 * 4 + ax1_inner_inner]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    for k_outer_outer in range(511):
        T.tvm_storage_sync("shared")
        with T.attr(p0_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_2, 1)
            for ax1_outer in range(2):
                T.launch_thread(threadIdx_x_2, 1)
                for ax1_inner_inner in range(4):
                    p0_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 8 + ax1_outer * 4 + ax1_inner_inner] = p0_1[k_outer_outer * 8 + ax1_outer * 4 + ax1_inner_inner + 8]
        with T.attr(p1_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_1, 16)
            for ax0_inner in range(4):
                T.launch_thread(threadIdx_x_1, 16)
                for ax1_inner_inner in range(4):
                    if threadIdx_x_1 < 2:
                        p1_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 512 + threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 262144 + threadIdx_y_1 * 16384 + ax0_inner * 4096 + k_outer_outer * 8 + threadIdx_x_1 * 4 + ax1_inner_inner + 8]
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 256]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 1]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 1]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 257]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 2]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 2]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 258]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 3]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 3]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 259]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 4]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 4]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 260]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 5]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 5]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 261]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 6]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 6]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 262]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 7]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 7]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 263]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    T.tvm_storage_sync("shared")
    p0_shared_local_1[0] = p0_shared_1[8]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 512]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 768]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[9]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 513]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 769]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[10]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 514]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 770]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[11]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 515]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 771]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[12]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 516]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 772]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[13]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 517]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 773]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[14]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 518]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 774]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[15]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 519]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 775]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    for ax1_inner_inner_inner in range(2):
        T_relu_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner] = T.max(T_matmul_NT_local_1[ax1_inner_inner_inner] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner], T.float32(0))
        T_relu_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32] = T.max(T_matmul_NT_local_1[ax1_inner_inner_inner + 2] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_dense_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.y", "blockIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((4096,), data=p2)
    T_relu_1 = T.decl_buffer((4096,), data=T_relu)
    p1_shared_local = T.handle("float32", "local")
    p1_shared_local_1 = T.decl_buffer((4,), data=p1_shared_local, scope="local", align=8)
    p0_shared_local = T.handle("float32", "local")
    p0_shared_local_1 = T.decl_buffer((1,), data=p0_shared_local, scope="local", align=4)
    p1_shared_local_2 = T.handle("float32", "local")
    p1_shared_local_3 = T.decl_buffer((4,), data=p1_shared_local_2, scope="local", align=8)
    p0_shared_local_2 = T.handle("float32", "local")
    p0_shared_local_3 = T.decl_buffer((1,), data=p0_shared_local_2, scope="local", align=4)
    p1_1 = T.decl_buffer((102760448,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((25088,), data=p0)
    p0_shared = T.handle("float32", "shared")
    p0_shared_1 = T.decl_buffer((16,), data=p0_shared, scope="shared", align=32)
    T_matmul_NT_local = T.handle("float32", "local")
    T_matmul_NT_local_1 = T.decl_buffer((4,), data=T_matmul_NT_local, scope="local", align=8)
    blockIdx_y = T.launch_thread("blockIdx.y", 64)
    T_matmul_NT_local = T.allocate([4], "float32", "local")
    p0_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([1024], "float32", "shared")
    p0_shared_local_2 = T.allocate([1], "float32", "local")
    p1_shared_local_2 = T.allocate([4], "float32", "local")
    p0_shared_local = T.allocate([1], "float32", "local")
    p1_shared_local = T.allocate([4], "float32", "local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 16)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    for j_c_init in range(2):
        T_matmul_NT_local_1[j_c_init] = T.float32(0)
        T_matmul_NT_local_1[j_c_init + 2] = T.float32(0)
    with T.launch_thread("threadIdx.y", 1) as threadIdx_y_1:
        for ax1_outer in range(2):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax1_inner_inner in range(4):
                p0_shared_1[ax1_outer * 4 + ax1_inner_inner] = p0_1[ax1_outer * 4 + ax1_inner_inner]
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_y_1, 16):
        for ax0_inner in range(4):
            T.launch_thread(threadIdx_x_1, 16)
            for ax1_inner_inner in range(4):
                if threadIdx_x_1 < 2:
                    p1_shared_1[threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 1605632 + threadIdx_y_1 * 100352 + ax0_inner * 25088 + threadIdx_x_1 * 4 + ax1_inner_inner]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    for k_outer_outer in range(3135):
        T.tvm_storage_sync("shared")
        with T.attr(p0_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_2, 1)
            for ax1_outer in range(2):
                T.launch_thread(threadIdx_x_2, 1)
                for ax1_inner_inner in range(4):
                    p0_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 8 + ax1_outer * 4 + ax1_inner_inner] = p0_1[k_outer_outer * 8 + ax1_outer * 4 + ax1_inner_inner + 8]
        with T.attr(p1_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_1, 16)
            for ax0_inner in range(4):
                T.launch_thread(threadIdx_x_1, 16)
                for ax1_inner_inner in range(4):
                    if threadIdx_x_1 < 2:
                        p1_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 512 + threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 1605632 + threadIdx_y_1 * 100352 + ax0_inner * 25088 + k_outer_outer * 8 + threadIdx_x_1 * 4 + ax1_inner_inner + 8]
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 256]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 1]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 1]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 257]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 2]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 2]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 258]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 3]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 3]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 259]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 4]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 4]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 260]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 5]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 5]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 261]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 6]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 6]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 262]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 7]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 7]
            p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 263]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    T.tvm_storage_sync("shared")
    p0_shared_local_1[0] = p0_shared_1[8]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 512]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 768]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[9]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 513]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 769]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[10]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 514]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 770]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[11]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 515]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 771]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[12]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 516]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 772]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[13]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 517]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 773]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[14]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 518]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 774]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[15]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 519]
        p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 775]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    for ax1_inner_inner_inner in range(2):
        T_relu_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner] = T.max(T_matmul_NT_local_1[ax1_inner_inner_inner] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner], T.float32(0))
        T_relu_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32] = T.max(T_matmul_NT_local_1[ax1_inner_inner_inner + 2] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32], T.float32(0))
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_1_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((401408,), data=pool_max)
    p0_1 = T.decl_buffer((1605632,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1568)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(2, 2):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 3), 7) * 224 + rv0 * 112 + T.truncmod(blockIdx_x * 32 + threadIdx_x, 56) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_2_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((200704,), data=pool_max)
    p0_1 = T.decl_buffer((802816,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 784)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(2, 2):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 2), 7) * 112 + rv0 * 56 + T.truncmod(blockIdx_x * 4 + threadIdx_x, 28) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_3_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((100352,), data=pool_max)
    p0_1 = T.decl_buffer((401408,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 392)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(2, 2):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 2), 49) * 784 + T.Div(T.truncmod(blockIdx_x * 30 + T.shift_right(threadIdx_x, 1), 98), 7) * 56 + rv0 * 28 + T.truncmod(blockIdx_x * 4 + threadIdx_x, 14) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_4_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((25088,), data=pool_max)
    p0_1 = T.decl_buffer((100352,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(2, 2):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 256 + threadIdx_x, 49) * 196 + T.Div(T.truncmod(blockIdx_x * 11 + threadIdx_x, 49), 7) * 28 + rv0 * 14 + T.truncmod(blockIdx_x * 4 + threadIdx_x, 7) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((802816,), data=pool_max)
    p0_1 = T.decl_buffer((3211264,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 3136)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(2, 2):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x, 49) * 50176 + T.Div(T.truncmod(blockIdx_x, 49) * 16 + T.shift_right(threadIdx_x, 4), 7) * 448 + rv0 * 224 + T.truncmod(blockIdx_x * 32 + threadIdx_x, 112) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:10:13] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_softmax_kernel(T_softmax_norm: T.handle("float32"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    T_softmax_norm_1 = T.decl_buffer((1000,), data=T_softmax_norm)
    red_buf0 = T.handle("float32", "shared")
    red_buf0_1 = T.decl_buffer((64,), data=red_buf0, scope="shared")
    normal_reduce_temp0 = T.handle("float32", "local")
    normal_reduce_temp0_1 = T.decl_buffer((1,), data=normal_reduce_temp0, scope="local")
    T_softmax_exp = T.handle("float32", "local")
    T_softmax_exp_1 = T.decl_buffer((1000,), data=T_softmax_exp, scope="local")
    red_buf0_2 = T.handle("float32", "shared")
    red_buf0_3 = T.decl_buffer((64,), data=red_buf0_2, scope="shared")
    p0_1 = T.decl_buffer((1000,), data=p0)
    normal_reduce_temp0_2 = T.handle("float32", "local")
    normal_reduce_temp0_3 = T.decl_buffer((1,), data=normal_reduce_temp0_2, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    normal_reduce_temp0_2 = T.allocate([1], "float32", "local")
    red_buf0_2 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0_2, "volatile_scope", 1)
    T_softmax_exp = T.allocate([16], "float32", "local")
    normal_reduce_temp0 = T.allocate([1], "float32", "local")
    red_buf0 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0, "volatile_scope", 1)
    threadIdx_x = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_x, 64):
        normal_reduce_temp0_3[0] = T.float32(-3.4028234663852886e+38)
        for k_inner in range(16):
            if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
                normal_reduce_temp0_3[0] = T.max(normal_reduce_temp0_3[0], p0_1[threadIdx_x * 16 + k_inner])
        with T.attr(T.comm_reducer(lambda x, y: T.max(x, y), [T.float32(-3.4028234663852886e+38)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
            T.tvm_storage_sync("shared")
            red_buf0_3[threadIdx_x] = normal_reduce_temp0_3[0]
            T.tvm_storage_sync("shared")
            if threadIdx_x < 32:
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 32])) as w_32_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_32_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 16])) as w_16_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_16_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 8])) as w_8_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_8_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 4])) as w_4_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_4_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 2])) as w_2_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_2_0
                    T.tvm_storage_sync("warp")
                w_1_0: T.float32 = T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 1])
                T.tvm_storage_sync("warp")
                red_buf0_3[threadIdx_x] = w_1_0
                T.tvm_storage_sync("warp")
            T.tvm_storage_sync("shared")
        for i1_inner_outer in range(4):
            if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
                T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] = T.call_pure_extern("float32x4", "__ocml_exp_f32", p0_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] - T.Broadcast(red_buf0_3[0], 4))
    T.launch_thread(threadIdx_x, 64)
    normal_reduce_temp0_1[0] = T.float32(0)
    T.tvm_storage_sync("warp")
    for k_inner in range(16):
        if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
            normal_reduce_temp0_1[0] = normal_reduce_temp0_1[0] + T_softmax_exp_1[k_inner]
    with T.attr(T.comm_reducer(lambda x, y: x + y, [T.float32(0)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
        T.tvm_storage_sync("shared")
        red_buf0_1[threadIdx_x] = normal_reduce_temp0_1[0]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 32:
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 32]) as w_32_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_32_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 16]) as w_16_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_16_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 8]) as w_8_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_8_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 4]) as w_4_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_4_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 2]) as w_2_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_2_0
                T.tvm_storage_sync("warp")
            w_1_0: T.float32 = red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 1]
            T.tvm_storage_sync("warp")
            red_buf0_1[threadIdx_x] = w_1_0
            T.tvm_storage_sync("warp")
        T.tvm_storage_sync("shared")
    for i1_inner_outer in range(4):
        if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
            T_softmax_norm_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] = T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] / T.Broadcast(red_buf0_1[0], 4)
--------------------------------------------------
Network Name         Mean Inference Time (std dev)
--------------------------------------------------
Traceback (most recent call last):
  File "/src/tvm/apps/benchmark/gpu_imagenet_bench.py", line 113, in <module>
    benchmark(network, target)
  File "/src/tvm/apps/benchmark/gpu_imagenet_bench.py", line 37, in benchmark
    lib = relay.build(net, target=target, params=params)
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/relay/build_module.py", line 364, in build
    graph_json, runtime_mod, params = bld_mod.build(
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/relay/build_module.py", line 161, in build
    self._build(
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm._ffi.base.TVMError: Traceback (most recent call last):
  8: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::relay::backend::RelayBuildModule::GetFunction(tvm::runtime::String const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  7: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
  6: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  5: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::codegen::BuildAMDGPU(tvm::IRModule, tvm::Target)
  1: tvm::codegen::CodeGenLLVM::Finish()
  0: tvm::codegen::CodeGenLLVM::Verify() const
  File "/src/tvm/src/target/llvm/codegen_llvm.cc", line 355
TVMError: LLVM module verification failed with the following errors: 
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %83 = icmp slt i32 %29, 2
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %90 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %103 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %79 = icmp slt i32 %29, 2
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %81 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %94 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %79 = icmp slt i32 %29, 2
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %81 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %94 = mul nsw i32 %29, 4

