One or more operators have not been tuned. Please tune your model for better performance. Use DEBUG logging level to see more details.
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((16,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((16, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            T_expand_dims_3 = T.Buffer((16,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 16, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((16, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 16, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            T_expand_dims_3 = T.Buffer((16,), data=T_expand_dims_1)
            p0_3 = T.Buffer((16,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:19] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((16,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((16, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            T_expand_dims_3 = T.Buffer((16,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 16, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 16, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((16, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 16, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            T_expand_dims_3 = T.Buffer((16,), data=T_expand_dims_1)
            p0_3 = T.Buffer((16,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((32,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((32, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(32):
            T_expand_dims_3 = T.Buffer((32,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 32, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((32, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 32, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(32):
            T_expand_dims_3 = T.Buffer((32,), data=T_expand_dims_1)
            p0_3 = T.Buffer((32,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((32,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((32, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(32):
            T_expand_dims_3 = T.Buffer((32,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 32, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 32, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((32, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 32, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(32):
            T_expand_dims_3 = T.Buffer((32,), data=T_expand_dims_1)
            p0_3 = T.Buffer((32,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:20] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((48,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((48, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(48):
            T_expand_dims_3 = T.Buffer((48,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 48, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((48, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 48, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(48):
            T_expand_dims_3 = T.Buffer((48,), data=T_expand_dims_1)
            p0_3 = T.Buffer((48,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            p0_3 = T.Buffer((192,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            p0_3 = T.Buffer((192,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((48,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((48, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(48):
            T_expand_dims_3 = T.Buffer((48,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 48, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 48, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((48, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 48, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(48):
            T_expand_dims_3 = T.Buffer((48,), data=T_expand_dims_1)
            p0_3 = T.Buffer((48,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            p0_3 = T.Buffer((192,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 192, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 192, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((192, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 192, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            T_expand_dims_3 = T.Buffer((192,), data=T_expand_dims_1)
            p0_3 = T.Buffer((192,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:21] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 1000, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1000, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1000,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1000, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(1000):
            T_expand_dims_3 = T.Buffer((1000,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:18:22] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 1000, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1000, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1000, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 1000, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(1000):
            T_expand_dims_3 = T.Buffer((1000,), data=T_expand_dims_1)
            p0_3 = T.Buffer((1000,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_1_kernel(T_concat: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((93312,), data=p0)
    p1_1 = T.decl_buffer((93312,), data=p1)
    T_concat_1 = T.decl_buffer((186624,), data=T_concat)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(3):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 256 + blockIdx_x < 729:
            T_concat_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = T.if_then_else(729 <= T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 512 + blockIdx_x * 2 + T.shift_right(threadIdx_x, 7), 1458), p1_1[T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x, 186624) - 93312], p0_1[T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x, 186624)])
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_2_kernel(T_concat: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((32448,), data=p0)
    p1_1 = T.decl_buffer((32448,), data=p1)
    T_concat_1 = T.decl_buffer((64896,), data=T_concat)
    blockIdx_x = T.launch_thread("blockIdx.x", 254)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    if blockIdx_x * 2 + T.shift_right(threadIdx_x, 7) < 507:
        T_concat_1[blockIdx_x * 256 + threadIdx_x] = T.if_then_else(507 <= blockIdx_x * 4 + T.shift_right(threadIdx_x, 6), p1_1[blockIdx_x * 256 + threadIdx_x - 32448], p0_1[blockIdx_x * 256 + threadIdx_x])
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_3_kernel(T_concat: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((43264,), data=p0)
    p1_1 = T.decl_buffer((43264,), data=p1)
    T_concat_1 = T.decl_buffer((86528,), data=T_concat)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(2):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 128 + T.shift_right(blockIdx_x, 1) < 169:
            T_concat_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = T.if_then_else(169 <= T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 256 + blockIdx_x, 338), p1_1[T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x, 86528) - 43264], p0_1[T.truncmod(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x, 86528)])
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_kernel(T_concat: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((193600,), data=p0)
    p1_1 = T.decl_buffer((193600,), data=p1)
    T_concat_1 = T.decl_buffer((387200,), data=T_concat)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(6):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 512 + blockIdx_x * 2 + T.shift_right(threadIdx_x, 7) < 3025:
            T_concat_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = T.if_then_else(3025 <= ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024 + blockIdx_x * 4 + T.shift_right(threadIdx_x, 6), p1_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x - 193600], p0_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x])
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_batch_flatten_kernel(p0: T.handle("float32"), tensor: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((1000,), data=p0)
    tensor_1 = T.decl_buffer((1000,), data=tensor)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    if blockIdx_x * 32 + T.shift_right(threadIdx_x, 3) < 125:
        tensor_1[blockIdx_x * 256 + threadIdx_x] = p0_1[blockIdx_x * 256 + threadIdx_x]
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_10_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((192,), data=p2)
    T_relu_1 = T.decl_buffer((32448,), data=T_relu)
    p1_1 = T.decl_buffer((9216,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((8112,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((16,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 24)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([128], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    threadIdx_z_1 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_1, 8):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x]
        pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 169]
    threadIdx_z_2 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_2, 8):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        p1_shared_1[threadIdx_z_2 * 16] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48]
        p1_shared_1[threadIdx_z_2 * 16 + 1] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 1]
        p1_shared_1[threadIdx_z_2 * 16 + 2] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 2]
        p1_shared_1[threadIdx_z_2 * 16 + 3] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 3]
        p1_shared_1[threadIdx_z_2 * 16 + 4] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 4]
        p1_shared_1[threadIdx_z_2 * 16 + 5] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 5]
        p1_shared_1[threadIdx_z_2 * 16 + 6] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 6]
        p1_shared_1[threadIdx_z_2 * 16 + 7] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 7]
        p1_shared_1[threadIdx_z_2 * 16 + 8] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 8]
        p1_shared_1[threadIdx_z_2 * 16 + 9] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 9]
        p1_shared_1[threadIdx_z_2 * 16 + 10] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 10]
        p1_shared_1[threadIdx_z_2 * 16 + 11] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 11]
        p1_shared_1[threadIdx_z_2 * 16 + 12] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 12]
        p1_shared_1[threadIdx_z_2 * 16 + 13] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 13]
        p1_shared_1[threadIdx_z_2 * 16 + 14] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 14]
        p1_shared_1[threadIdx_z_2 * 16 + 15] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 15]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 16 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 16 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 16 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 16 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 16 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 16 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 16 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 16 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 16 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 16 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 16 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 16 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 16 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 16 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 16 + 15], conv2d_nchw_1[0])
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_1, 8):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 2704]
        pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 2873]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_2, 8):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 16] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 16]
        p1_shared_1[threadIdx_z_2 * 16 + 1] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 17]
        p1_shared_1[threadIdx_z_2 * 16 + 2] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 18]
        p1_shared_1[threadIdx_z_2 * 16 + 3] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 19]
        p1_shared_1[threadIdx_z_2 * 16 + 4] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 20]
        p1_shared_1[threadIdx_z_2 * 16 + 5] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 21]
        p1_shared_1[threadIdx_z_2 * 16 + 6] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 22]
        p1_shared_1[threadIdx_z_2 * 16 + 7] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 23]
        p1_shared_1[threadIdx_z_2 * 16 + 8] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 24]
        p1_shared_1[threadIdx_z_2 * 16 + 9] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 25]
        p1_shared_1[threadIdx_z_2 * 16 + 10] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 26]
        p1_shared_1[threadIdx_z_2 * 16 + 11] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 27]
        p1_shared_1[threadIdx_z_2 * 16 + 12] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 28]
        p1_shared_1[threadIdx_z_2 * 16 + 13] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 29]
        p1_shared_1[threadIdx_z_2 * 16 + 14] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 30]
        p1_shared_1[threadIdx_z_2 * 16 + 15] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 31]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 16 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 16 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 16 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 16 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 16 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 16 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 16 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 16 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 16 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 16 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 16 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 16 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 16 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 16 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 16 + 15], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 8):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 5408]
        pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 5577]
    with T.launch_thread(threadIdx_z_2, 8):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 16] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 32]
        p1_shared_1[threadIdx_z_2 * 16 + 1] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 33]
        p1_shared_1[threadIdx_z_2 * 16 + 2] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 34]
        p1_shared_1[threadIdx_z_2 * 16 + 3] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 35]
        p1_shared_1[threadIdx_z_2 * 16 + 4] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 36]
        p1_shared_1[threadIdx_z_2 * 16 + 5] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 37]
        p1_shared_1[threadIdx_z_2 * 16 + 6] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 38]
        p1_shared_1[threadIdx_z_2 * 16 + 7] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 39]
        p1_shared_1[threadIdx_z_2 * 16 + 8] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 40]
        p1_shared_1[threadIdx_z_2 * 16 + 9] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 41]
        p1_shared_1[threadIdx_z_2 * 16 + 10] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 42]
        p1_shared_1[threadIdx_z_2 * 16 + 11] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 43]
        p1_shared_1[threadIdx_z_2 * 16 + 12] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 44]
        p1_shared_1[threadIdx_z_2 * 16 + 13] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 45]
        p1_shared_1[threadIdx_z_2 * 16 + 14] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 46]
        p1_shared_1[threadIdx_z_2 * 16 + 15] = p1_1[blockIdx_z * 384 + threadIdx_z_2 * 48 + 47]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 16 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 16 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 16 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 16 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 16 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 16 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 16 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 16 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 16 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 16 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 16 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 16 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 16 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 16 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 16 + 15], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 1352 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 8 + threadIdx_z], T.float32(0))
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_11_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((192,), data=p2)
    T_relu_1 = T.decl_buffer((32448,), data=T_relu)
    p1_1 = T.decl_buffer((82944,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((8112,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((72,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 6)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([72], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(6):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(3):
                if threadIdx_z_1 < 24:
                    pad_temp_shared_1[threadIdx_z_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = T.if_then_else(1 <= blockIdx_y + T.truncmod(threadIdx_z_1, 3) and blockIdx_y + T.truncmod(threadIdx_z_1, 3) < 14 and 1 <= ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner + blockIdx_x and ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner + blockIdx_x < 14, p0_1[rc_outer * 1352 + T.Div(threadIdx_z_1, 3) * 169 + blockIdx_y * 13 + T.truncmod(threadIdx_z_1, 3) * 13 + blockIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner - 14], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(72):
                p1_shared_1[threadIdx_z_1 * 72 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[blockIdx_z * 13824 + threadIdx_z_1 * 432 + rc_outer * 72 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        T.tvm_storage_sync("shared")
        for rc_inner, ry_inner, rx_inner in T.grid(8, 3, 3):
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 9 + ry_inner * 3 + rx_inner], p1_shared_1[threadIdx_z * 72 + rc_inner * 9 + ry_inner * 3 + rx_inner], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 5408 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_12_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((48,), data=p2)
    T_relu_1 = T.decl_buffer((8112,), data=T_relu)
    p1_1 = T.decl_buffer((18432,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((64896,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((16,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 6)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([128], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(24):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[rc_outer * 2704 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x]
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[rc_outer * 2704 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 169]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            p1_shared_1[threadIdx_z_1 * 16] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16]
            p1_shared_1[threadIdx_z_1 * 16 + 1] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 1]
            p1_shared_1[threadIdx_z_1 * 16 + 2] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 2]
            p1_shared_1[threadIdx_z_1 * 16 + 3] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 3]
            p1_shared_1[threadIdx_z_1 * 16 + 4] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 4]
            p1_shared_1[threadIdx_z_1 * 16 + 5] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 5]
            p1_shared_1[threadIdx_z_1 * 16 + 6] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 6]
            p1_shared_1[threadIdx_z_1 * 16 + 7] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 7]
            p1_shared_1[threadIdx_z_1 * 16 + 8] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 8]
            p1_shared_1[threadIdx_z_1 * 16 + 9] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 9]
            p1_shared_1[threadIdx_z_1 * 16 + 10] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 10]
            p1_shared_1[threadIdx_z_1 * 16 + 11] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 11]
            p1_shared_1[threadIdx_z_1 * 16 + 12] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 12]
            p1_shared_1[threadIdx_z_1 * 16 + 13] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 13]
            p1_shared_1[threadIdx_z_1 * 16 + 14] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 14]
            p1_shared_1[threadIdx_z_1 * 16 + 15] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 15]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 16], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 16 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 16 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 16 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 16 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 16 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 16 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 16 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 16 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 16 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 16 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 16 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 16 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 16 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 16 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 16 + 15], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 1352 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 8 + threadIdx_z], T.float32(0))
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_13_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((10816,), data=T_relu)
    p1_1 = T.decl_buffer((24576,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((64896,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((16,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 8)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([128], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(24):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[rc_outer * 2704 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x]
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[rc_outer * 2704 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 169]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            p1_shared_1[threadIdx_z_1 * 16] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16]
            p1_shared_1[threadIdx_z_1 * 16 + 1] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 1]
            p1_shared_1[threadIdx_z_1 * 16 + 2] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 2]
            p1_shared_1[threadIdx_z_1 * 16 + 3] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 3]
            p1_shared_1[threadIdx_z_1 * 16 + 4] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 4]
            p1_shared_1[threadIdx_z_1 * 16 + 5] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 5]
            p1_shared_1[threadIdx_z_1 * 16 + 6] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 6]
            p1_shared_1[threadIdx_z_1 * 16 + 7] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 7]
            p1_shared_1[threadIdx_z_1 * 16 + 8] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 8]
            p1_shared_1[threadIdx_z_1 * 16 + 9] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 9]
            p1_shared_1[threadIdx_z_1 * 16 + 10] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 10]
            p1_shared_1[threadIdx_z_1 * 16 + 11] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 11]
            p1_shared_1[threadIdx_z_1 * 16 + 12] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 12]
            p1_shared_1[threadIdx_z_1 * 16 + 13] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 13]
            p1_shared_1[threadIdx_z_1 * 16 + 14] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 14]
            p1_shared_1[threadIdx_z_1 * 16 + 15] = p1_1[blockIdx_z * 3072 + threadIdx_z_1 * 384 + rc_outer * 16 + 15]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 16], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 16 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 16 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 16 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 16 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 16 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 16 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 16 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 16 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 16 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 16 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 16 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 16 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 16 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 16 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 16 + 15], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 1352 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 8 + threadIdx_z], T.float32(0))
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_14_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    T_relu_1 = T.decl_buffer((43264,), data=T_relu)
    p1_1 = T.decl_buffer((16384,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((10816,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((32,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([32], "float32", "shared")
    p1_shared = T.allocate([512], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 16)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    threadIdx_z_1 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_1, 16):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x]
        pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 169]
    threadIdx_z_2 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_2, 16):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        p1_shared_1[threadIdx_z_2 * 32] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64]
        p1_shared_1[threadIdx_z_2 * 32 + 1] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 1]
        p1_shared_1[threadIdx_z_2 * 32 + 2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 2]
        p1_shared_1[threadIdx_z_2 * 32 + 3] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 3]
        p1_shared_1[threadIdx_z_2 * 32 + 4] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 4]
        p1_shared_1[threadIdx_z_2 * 32 + 5] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 5]
        p1_shared_1[threadIdx_z_2 * 32 + 6] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 6]
        p1_shared_1[threadIdx_z_2 * 32 + 7] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 7]
        p1_shared_1[threadIdx_z_2 * 32 + 8] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 8]
        p1_shared_1[threadIdx_z_2 * 32 + 9] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 9]
        p1_shared_1[threadIdx_z_2 * 32 + 10] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 10]
        p1_shared_1[threadIdx_z_2 * 32 + 11] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 11]
        p1_shared_1[threadIdx_z_2 * 32 + 12] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 12]
        p1_shared_1[threadIdx_z_2 * 32 + 13] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 13]
        p1_shared_1[threadIdx_z_2 * 32 + 14] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 14]
        p1_shared_1[threadIdx_z_2 * 32 + 15] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 15]
        p1_shared_1[threadIdx_z_2 * 32 + 16] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 16]
        p1_shared_1[threadIdx_z_2 * 32 + 17] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 17]
        p1_shared_1[threadIdx_z_2 * 32 + 18] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 18]
        p1_shared_1[threadIdx_z_2 * 32 + 19] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 19]
        p1_shared_1[threadIdx_z_2 * 32 + 20] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 20]
        p1_shared_1[threadIdx_z_2 * 32 + 21] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 21]
        p1_shared_1[threadIdx_z_2 * 32 + 22] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 22]
        p1_shared_1[threadIdx_z_2 * 32 + 23] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 23]
        p1_shared_1[threadIdx_z_2 * 32 + 24] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 24]
        p1_shared_1[threadIdx_z_2 * 32 + 25] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 25]
        p1_shared_1[threadIdx_z_2 * 32 + 26] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 26]
        p1_shared_1[threadIdx_z_2 * 32 + 27] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 27]
        p1_shared_1[threadIdx_z_2 * 32 + 28] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 28]
        p1_shared_1[threadIdx_z_2 * 32 + 29] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 29]
        p1_shared_1[threadIdx_z_2 * 32 + 30] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 30]
        p1_shared_1[threadIdx_z_2 * 32 + 31] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 31]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 32 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 32 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 32 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 32 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 32 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 32 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 32 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 32 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 32 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 32 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 32 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 32 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 32 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 32 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 32 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 32 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 32 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 32 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 32 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 32 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 32 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 32 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 32 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 32 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 32 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 32 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 32 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 32 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 32 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 32 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 32 + 31], conv2d_nchw_1[0])
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_1, 16):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 5408]
        pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 5577]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_2, 16):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 32] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 32]
        p1_shared_1[threadIdx_z_2 * 32 + 1] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 33]
        p1_shared_1[threadIdx_z_2 * 32 + 2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 34]
        p1_shared_1[threadIdx_z_2 * 32 + 3] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 35]
        p1_shared_1[threadIdx_z_2 * 32 + 4] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 36]
        p1_shared_1[threadIdx_z_2 * 32 + 5] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 37]
        p1_shared_1[threadIdx_z_2 * 32 + 6] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 38]
        p1_shared_1[threadIdx_z_2 * 32 + 7] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 39]
        p1_shared_1[threadIdx_z_2 * 32 + 8] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 40]
        p1_shared_1[threadIdx_z_2 * 32 + 9] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 41]
        p1_shared_1[threadIdx_z_2 * 32 + 10] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 42]
        p1_shared_1[threadIdx_z_2 * 32 + 11] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 43]
        p1_shared_1[threadIdx_z_2 * 32 + 12] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 44]
        p1_shared_1[threadIdx_z_2 * 32 + 13] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 45]
        p1_shared_1[threadIdx_z_2 * 32 + 14] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 46]
        p1_shared_1[threadIdx_z_2 * 32 + 15] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 47]
        p1_shared_1[threadIdx_z_2 * 32 + 16] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 48]
        p1_shared_1[threadIdx_z_2 * 32 + 17] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 49]
        p1_shared_1[threadIdx_z_2 * 32 + 18] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 50]
        p1_shared_1[threadIdx_z_2 * 32 + 19] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 51]
        p1_shared_1[threadIdx_z_2 * 32 + 20] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 52]
        p1_shared_1[threadIdx_z_2 * 32 + 21] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 53]
        p1_shared_1[threadIdx_z_2 * 32 + 22] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 54]
        p1_shared_1[threadIdx_z_2 * 32 + 23] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 55]
        p1_shared_1[threadIdx_z_2 * 32 + 24] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 56]
        p1_shared_1[threadIdx_z_2 * 32 + 25] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 57]
        p1_shared_1[threadIdx_z_2 * 32 + 26] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 58]
        p1_shared_1[threadIdx_z_2 * 32 + 27] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 59]
        p1_shared_1[threadIdx_z_2 * 32 + 28] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 60]
        p1_shared_1[threadIdx_z_2 * 32 + 29] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 61]
        p1_shared_1[threadIdx_z_2 * 32 + 30] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 62]
        p1_shared_1[threadIdx_z_2 * 32 + 31] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 64 + 63]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 32 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 32 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 32 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 32 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 32 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 32 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 32 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 32 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 32 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 32 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 32 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 32 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 32 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 32 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 32 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 32 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 32 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 32 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 32 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 32 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 32 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 32 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 32 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 32 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 32 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 32 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 32 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 32 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 32 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 32 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 32 + 31], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 2704 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 16 + threadIdx_z], T.float32(0))
[23:18:42] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_15_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    T_relu_1 = T.decl_buffer((43264,), data=T_relu)
    p1_1 = T.decl_buffer((147456,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1152,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((10816,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((36,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 8)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([36], "float32", "shared")
    p1_shared = T.allocate([1152], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    threadIdx_z_1 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_1, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) - 14], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) - 14], T.float32(0))
    threadIdx_z_2 = T.env_thread("threadIdx.z")
    with T.launch_thread(threadIdx_z_2, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 1]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 2]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 3]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 4]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 5]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 6]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 7]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 8]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 9]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 10]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 11]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 12]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 13]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 14]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 15]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 16]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 17]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 18]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 19]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 20]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 21]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 22]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 23]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 24]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 25]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 26]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 27]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 28]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 29]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 30]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 31]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 32]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 33]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 34]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 35]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 662], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 662], T.float32(0))
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 36]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 37]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 38]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 39]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 40]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 41]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 42]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 43]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 44]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 45]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 46]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 47]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 48]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 49]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 50]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 51]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 52]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 53]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 54]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 55]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 56]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 57]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 58]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 59]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 60]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 61]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 62]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 63]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 64]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 65]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 66]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 67]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 68]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 69]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 70]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 71]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 1338], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 1338], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 72]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 73]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 74]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 75]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 76]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 77]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 78]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 79]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 80]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 81]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 82]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 83]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 84]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 85]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 86]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 87]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 88]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 89]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 90]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 91]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 92]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 93]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 94]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 95]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 96]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 97]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 98]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 99]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 100]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 101]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 102]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 103]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 104]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 105]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 106]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 107]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 2014], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 2014], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 108]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 109]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 110]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 111]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 112]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 113]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 114]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 115]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 116]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 117]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 118]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 119]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 120]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 121]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 122]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 123]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 124]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 125]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 126]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 127]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 128]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 129]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 130]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 131]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 132]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 133]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 134]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 135]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 136]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 137]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 138]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 139]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 140]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 141]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 142]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 143]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 2690], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 2690], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 144]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 145]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 146]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 147]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 148]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 149]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 150]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 151]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 152]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 153]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 154]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 155]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 156]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 157]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 158]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 159]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 160]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 161]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 162]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 163]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 164]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 165]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 166]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 167]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 168]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 169]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 170]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 171]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 172]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 173]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 174]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 175]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 176]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 177]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 178]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 179]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 3366], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 3366], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 180]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 181]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 182]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 183]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 184]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 185]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 186]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 187]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 188]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 189]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 190]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 191]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 192]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 193]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 194]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 195]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 196]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 197]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 198]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 199]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 200]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 201]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 202]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 203]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 204]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 205]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 206]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 207]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 208]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 209]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 210]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 211]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 212]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 213]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 214]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 215]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 4042], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 4042], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 216]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 217]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 218]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 219]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 220]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 221]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 222]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 223]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 224]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 225]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 226]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 227]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 228]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 229]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 230]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 231]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 232]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 233]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 234]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 235]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 236]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 237]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 238]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 239]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 240]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 241]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 242]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 243]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 244]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 245]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 246]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 247]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 248]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 249]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 250]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 251]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 4718], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 4718], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 252]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 253]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 254]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 255]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 256]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 257]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 258]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 259]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 260]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 261]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 262]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 263]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 264]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 265]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 266]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 267]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 268]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 269]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 270]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 271]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 272]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 273]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 274]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 275]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 276]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 277]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 278]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 279]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 280]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 281]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 282]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 283]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 284]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 285]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 286]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 287]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 5394], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 5394], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 288]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 289]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 290]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 291]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 292]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 293]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 294]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 295]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 296]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 297]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 298]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 299]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 300]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 301]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 302]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 303]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 304]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 305]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 306]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 307]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 308]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 309]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 310]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 311]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 312]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 313]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 314]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 315]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 316]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 317]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 318]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 319]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 320]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 321]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 322]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 323]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 6070], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 6070], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 324]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 325]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 326]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 327]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 328]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 329]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 330]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 331]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 332]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 333]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 334]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 335]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 336]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 337]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 338]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 339]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 340]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 341]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 342]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 343]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 344]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 345]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 346]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 347]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 348]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 349]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 350]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 351]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 352]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 353]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 354]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 355]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 356]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 357]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 358]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 359]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 6746], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 6746], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 360]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 361]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 362]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 363]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 364]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 365]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 366]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 367]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 368]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 369]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 370]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 371]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 372]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 373]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 374]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 375]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 376]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 377]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 378]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 379]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 380]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 381]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 382]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 383]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 384]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 385]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 386]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 387]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 388]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 389]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 390]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 391]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 392]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 393]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 394]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 395]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 7422], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 7422], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 396]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 397]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 398]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 399]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 400]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 401]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 402]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 403]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 404]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 405]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 406]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 407]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 408]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 409]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 410]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 411]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 412]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 413]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 414]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 415]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 416]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 417]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 418]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 419]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 420]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 421]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 422]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 423]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 424]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 425]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 426]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 427]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 428]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 429]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 430]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 431]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 8098], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 8098], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 432]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 433]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 434]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 435]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 436]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 437]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 438]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 439]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 440]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 441]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 442]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 443]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 444]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 445]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 446]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 447]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 448]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 449]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 450]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 451]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 452]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 453]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 454]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 455]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 456]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 457]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 458]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 459]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 460]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 461]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 462]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 463]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 464]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 465]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 466]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 467]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 8774], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 8774], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 468]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 469]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 470]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 471]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 472]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 473]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 474]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 475]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 476]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 477]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 478]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 479]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 480]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 481]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 482]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 483]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 484]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 485]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 486]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 487]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 488]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 489]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 490]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 491]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 492]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 493]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 494]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 495]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 496]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 497]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 498]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 499]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 500]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 501]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 502]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 503]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 9450], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 9450], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 504]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 505]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 506]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 507]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 508]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 509]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 510]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 511]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 512]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 513]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 514]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 515]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 516]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 517]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 518]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 519]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 520]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 521]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 522]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 523]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 524]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 525]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 526]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 527]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 528]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 529]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 530]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 531]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 532]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 533]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 534]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 535]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 536]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 537]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 538]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 539]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 1)
        T.tvm_storage_sync("shared")
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2, 3) + 10126], T.float32(0))
        if threadIdx_z_1 < 18:
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = T.if_then_else(1 <= T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y and T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) + blockIdx_y < 14 and 1 <= blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) and blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) < 14, p0_1[T.Div(threadIdx_z_1 * 2 + 1, 9) * 169 + T.Div(T.truncmod(threadIdx_z_1 * 2 + 1, 9), 3) * 13 + blockIdx_y * 13 + blockIdx_x + T.truncmod(threadIdx_z_1 * 2 + 1, 3) + 10126], T.float32(0))
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 1)
        p1_shared_1[threadIdx_z_2 * 36] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 540]
        p1_shared_1[threadIdx_z_2 * 36 + 1] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 541]
        p1_shared_1[threadIdx_z_2 * 36 + 2] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 542]
        p1_shared_1[threadIdx_z_2 * 36 + 3] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 543]
        p1_shared_1[threadIdx_z_2 * 36 + 4] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 544]
        p1_shared_1[threadIdx_z_2 * 36 + 5] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 545]
        p1_shared_1[threadIdx_z_2 * 36 + 6] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 546]
        p1_shared_1[threadIdx_z_2 * 36 + 7] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 547]
        p1_shared_1[threadIdx_z_2 * 36 + 8] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 548]
        p1_shared_1[threadIdx_z_2 * 36 + 9] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 549]
        p1_shared_1[threadIdx_z_2 * 36 + 10] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 550]
        p1_shared_1[threadIdx_z_2 * 36 + 11] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 551]
        p1_shared_1[threadIdx_z_2 * 36 + 12] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 552]
        p1_shared_1[threadIdx_z_2 * 36 + 13] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 553]
        p1_shared_1[threadIdx_z_2 * 36 + 14] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 554]
        p1_shared_1[threadIdx_z_2 * 36 + 15] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 555]
        p1_shared_1[threadIdx_z_2 * 36 + 16] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 556]
        p1_shared_1[threadIdx_z_2 * 36 + 17] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 557]
        p1_shared_1[threadIdx_z_2 * 36 + 18] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 558]
        p1_shared_1[threadIdx_z_2 * 36 + 19] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 559]
        p1_shared_1[threadIdx_z_2 * 36 + 20] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 560]
        p1_shared_1[threadIdx_z_2 * 36 + 21] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 561]
        p1_shared_1[threadIdx_z_2 * 36 + 22] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 562]
        p1_shared_1[threadIdx_z_2 * 36 + 23] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 563]
        p1_shared_1[threadIdx_z_2 * 36 + 24] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 564]
        p1_shared_1[threadIdx_z_2 * 36 + 25] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 565]
        p1_shared_1[threadIdx_z_2 * 36 + 26] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 566]
        p1_shared_1[threadIdx_z_2 * 36 + 27] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 567]
        p1_shared_1[threadIdx_z_2 * 36 + 28] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 568]
        p1_shared_1[threadIdx_z_2 * 36 + 29] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 569]
        p1_shared_1[threadIdx_z_2 * 36 + 30] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 570]
        p1_shared_1[threadIdx_z_2 * 36 + 31] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 571]
        p1_shared_1[threadIdx_z_2 * 36 + 32] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 572]
        p1_shared_1[threadIdx_z_2 * 36 + 33] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 573]
        p1_shared_1[threadIdx_z_2 * 36 + 34] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 574]
        p1_shared_1[threadIdx_z_2 * 36 + 35] = p1_1[blockIdx_z * 18432 + threadIdx_z_2 * 576 + 575]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 36], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 36 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 36 + 2], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 36 + 3], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 36 + 4], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 36 + 5], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 36 + 6], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 36 + 7], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 36 + 8], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 36 + 9], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 36 + 10], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 36 + 11], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 36 + 12], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 36 + 13], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 36 + 14], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 36 + 15], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 36 + 16], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 36 + 17], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 36 + 18], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 36 + 19], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 36 + 20], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 36 + 21], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 36 + 22], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 36 + 23], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 36 + 24], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 36 + 25], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 36 + 26], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 36 + 27], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 36 + 28], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 36 + 29], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 36 + 30], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 36 + 31], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 36 + 32], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 36 + 33], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 36 + 34], conv2d_nchw_1[0])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 36 + 35], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 5408 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_16_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((10816,), data=T_relu)
    p1_1 = T.decl_buffer((32768,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((86528,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((32,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([32], "float32", "shared")
    p1_shared = T.allocate([512], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 16)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(16):
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 2] = p0_1[rc_outer * 5408 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x]
            pad_temp_shared_1[threadIdx_z_1 * 2 + 1] = p0_1[rc_outer * 5408 + threadIdx_z_1 * 338 + blockIdx_y * 13 + blockIdx_x + 169]
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            p1_shared_1[threadIdx_z_1 * 32] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32]
            p1_shared_1[threadIdx_z_1 * 32 + 1] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 1]
            p1_shared_1[threadIdx_z_1 * 32 + 2] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 2]
            p1_shared_1[threadIdx_z_1 * 32 + 3] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 3]
            p1_shared_1[threadIdx_z_1 * 32 + 4] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 4]
            p1_shared_1[threadIdx_z_1 * 32 + 5] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 5]
            p1_shared_1[threadIdx_z_1 * 32 + 6] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 6]
            p1_shared_1[threadIdx_z_1 * 32 + 7] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 7]
            p1_shared_1[threadIdx_z_1 * 32 + 8] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 8]
            p1_shared_1[threadIdx_z_1 * 32 + 9] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 9]
            p1_shared_1[threadIdx_z_1 * 32 + 10] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 10]
            p1_shared_1[threadIdx_z_1 * 32 + 11] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 11]
            p1_shared_1[threadIdx_z_1 * 32 + 12] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 12]
            p1_shared_1[threadIdx_z_1 * 32 + 13] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 13]
            p1_shared_1[threadIdx_z_1 * 32 + 14] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 14]
            p1_shared_1[threadIdx_z_1 * 32 + 15] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 15]
            p1_shared_1[threadIdx_z_1 * 32 + 16] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 16]
            p1_shared_1[threadIdx_z_1 * 32 + 17] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 17]
            p1_shared_1[threadIdx_z_1 * 32 + 18] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 18]
            p1_shared_1[threadIdx_z_1 * 32 + 19] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 19]
            p1_shared_1[threadIdx_z_1 * 32 + 20] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 20]
            p1_shared_1[threadIdx_z_1 * 32 + 21] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 21]
            p1_shared_1[threadIdx_z_1 * 32 + 22] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 22]
            p1_shared_1[threadIdx_z_1 * 32 + 23] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 23]
            p1_shared_1[threadIdx_z_1 * 32 + 24] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 24]
            p1_shared_1[threadIdx_z_1 * 32 + 25] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 25]
            p1_shared_1[threadIdx_z_1 * 32 + 26] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 26]
            p1_shared_1[threadIdx_z_1 * 32 + 27] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 27]
            p1_shared_1[threadIdx_z_1 * 32 + 28] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 28]
            p1_shared_1[threadIdx_z_1 * 32 + 29] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 29]
            p1_shared_1[threadIdx_z_1 * 32 + 30] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 30]
            p1_shared_1[threadIdx_z_1 * 32 + 31] = p1_1[blockIdx_z * 8192 + threadIdx_z_1 * 512 + rc_outer * 32 + 31]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 32], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 32 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 32 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 32 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 32 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 32 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 32 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 32 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 32 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 32 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 32 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 32 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 32 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 32 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 32 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 32 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 32 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 32 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 32 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 32 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 32 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 32 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 32 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 32 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 32 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 32 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 32 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 32 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 32 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 32 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 32 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 32 + 31], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 2704 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 16 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_17_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((1000,), data=p2)
    T_relu_1 = T.decl_buffer((169000,), data=T_relu)
    p1_1 = T.decl_buffer((512000,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1280,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((86528,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((128,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 100)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([128], "float32", "shared")
    p1_shared = T.allocate([1280], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 10)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(4):
        with T.launch_thread("threadIdx.z", 10) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 13] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 1] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 169]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 2] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 338]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 3] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 507]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 4] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 676]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 5] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 845]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 6] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1014]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 7] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1183]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 8] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1352]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 9] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1521]
            pad_temp_shared_1[threadIdx_z_1 * 13 + 10] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1690]
            if threadIdx_z_1 < 9:
                pad_temp_shared_1[threadIdx_z_1 * 13 + 11] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 1859]
            if threadIdx_z_1 < 9:
                pad_temp_shared_1[threadIdx_z_1 * 13 + 12] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 2197 + blockIdx_y * 13 + blockIdx_x + 2028]
        with T.launch_thread("threadIdx.z", 10) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            p1_shared_1[threadIdx_z_1 * 128] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128]
            p1_shared_1[threadIdx_z_1 * 128 + 1] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 1]
            p1_shared_1[threadIdx_z_1 * 128 + 2] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 2]
            p1_shared_1[threadIdx_z_1 * 128 + 3] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 3]
            p1_shared_1[threadIdx_z_1 * 128 + 4] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 4]
            p1_shared_1[threadIdx_z_1 * 128 + 5] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 5]
            p1_shared_1[threadIdx_z_1 * 128 + 6] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 6]
            p1_shared_1[threadIdx_z_1 * 128 + 7] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 7]
            p1_shared_1[threadIdx_z_1 * 128 + 8] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 8]
            p1_shared_1[threadIdx_z_1 * 128 + 9] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 9]
            p1_shared_1[threadIdx_z_1 * 128 + 10] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 10]
            p1_shared_1[threadIdx_z_1 * 128 + 11] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 11]
            p1_shared_1[threadIdx_z_1 * 128 + 12] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 12]
            p1_shared_1[threadIdx_z_1 * 128 + 13] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 13]
            p1_shared_1[threadIdx_z_1 * 128 + 14] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 14]
            p1_shared_1[threadIdx_z_1 * 128 + 15] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 15]
            p1_shared_1[threadIdx_z_1 * 128 + 16] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 16]
            p1_shared_1[threadIdx_z_1 * 128 + 17] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 17]
            p1_shared_1[threadIdx_z_1 * 128 + 18] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 18]
            p1_shared_1[threadIdx_z_1 * 128 + 19] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 19]
            p1_shared_1[threadIdx_z_1 * 128 + 20] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 20]
            p1_shared_1[threadIdx_z_1 * 128 + 21] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 21]
            p1_shared_1[threadIdx_z_1 * 128 + 22] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 22]
            p1_shared_1[threadIdx_z_1 * 128 + 23] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 23]
            p1_shared_1[threadIdx_z_1 * 128 + 24] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 24]
            p1_shared_1[threadIdx_z_1 * 128 + 25] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 25]
            p1_shared_1[threadIdx_z_1 * 128 + 26] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 26]
            p1_shared_1[threadIdx_z_1 * 128 + 27] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 27]
            p1_shared_1[threadIdx_z_1 * 128 + 28] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 28]
            p1_shared_1[threadIdx_z_1 * 128 + 29] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 29]
            p1_shared_1[threadIdx_z_1 * 128 + 30] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 30]
            p1_shared_1[threadIdx_z_1 * 128 + 31] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 31]
            p1_shared_1[threadIdx_z_1 * 128 + 32] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 32]
            p1_shared_1[threadIdx_z_1 * 128 + 33] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 33]
            p1_shared_1[threadIdx_z_1 * 128 + 34] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 34]
            p1_shared_1[threadIdx_z_1 * 128 + 35] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 35]
            p1_shared_1[threadIdx_z_1 * 128 + 36] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 36]
            p1_shared_1[threadIdx_z_1 * 128 + 37] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 37]
            p1_shared_1[threadIdx_z_1 * 128 + 38] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 38]
            p1_shared_1[threadIdx_z_1 * 128 + 39] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 39]
            p1_shared_1[threadIdx_z_1 * 128 + 40] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 40]
            p1_shared_1[threadIdx_z_1 * 128 + 41] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 41]
            p1_shared_1[threadIdx_z_1 * 128 + 42] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 42]
            p1_shared_1[threadIdx_z_1 * 128 + 43] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 43]
            p1_shared_1[threadIdx_z_1 * 128 + 44] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 44]
            p1_shared_1[threadIdx_z_1 * 128 + 45] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 45]
            p1_shared_1[threadIdx_z_1 * 128 + 46] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 46]
            p1_shared_1[threadIdx_z_1 * 128 + 47] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 47]
            p1_shared_1[threadIdx_z_1 * 128 + 48] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 48]
            p1_shared_1[threadIdx_z_1 * 128 + 49] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 49]
            p1_shared_1[threadIdx_z_1 * 128 + 50] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 50]
            p1_shared_1[threadIdx_z_1 * 128 + 51] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 51]
            p1_shared_1[threadIdx_z_1 * 128 + 52] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 52]
            p1_shared_1[threadIdx_z_1 * 128 + 53] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 53]
            p1_shared_1[threadIdx_z_1 * 128 + 54] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 54]
            p1_shared_1[threadIdx_z_1 * 128 + 55] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 55]
            p1_shared_1[threadIdx_z_1 * 128 + 56] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 56]
            p1_shared_1[threadIdx_z_1 * 128 + 57] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 57]
            p1_shared_1[threadIdx_z_1 * 128 + 58] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 58]
            p1_shared_1[threadIdx_z_1 * 128 + 59] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 59]
            p1_shared_1[threadIdx_z_1 * 128 + 60] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 60]
            p1_shared_1[threadIdx_z_1 * 128 + 61] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 61]
            p1_shared_1[threadIdx_z_1 * 128 + 62] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 62]
            p1_shared_1[threadIdx_z_1 * 128 + 63] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 63]
            p1_shared_1[threadIdx_z_1 * 128 + 64] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 64]
            p1_shared_1[threadIdx_z_1 * 128 + 65] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 65]
            p1_shared_1[threadIdx_z_1 * 128 + 66] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 66]
            p1_shared_1[threadIdx_z_1 * 128 + 67] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 67]
            p1_shared_1[threadIdx_z_1 * 128 + 68] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 68]
            p1_shared_1[threadIdx_z_1 * 128 + 69] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 69]
            p1_shared_1[threadIdx_z_1 * 128 + 70] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 70]
            p1_shared_1[threadIdx_z_1 * 128 + 71] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 71]
            p1_shared_1[threadIdx_z_1 * 128 + 72] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 72]
            p1_shared_1[threadIdx_z_1 * 128 + 73] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 73]
            p1_shared_1[threadIdx_z_1 * 128 + 74] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 74]
            p1_shared_1[threadIdx_z_1 * 128 + 75] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 75]
            p1_shared_1[threadIdx_z_1 * 128 + 76] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 76]
            p1_shared_1[threadIdx_z_1 * 128 + 77] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 77]
            p1_shared_1[threadIdx_z_1 * 128 + 78] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 78]
            p1_shared_1[threadIdx_z_1 * 128 + 79] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 79]
            p1_shared_1[threadIdx_z_1 * 128 + 80] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 80]
            p1_shared_1[threadIdx_z_1 * 128 + 81] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 81]
            p1_shared_1[threadIdx_z_1 * 128 + 82] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 82]
            p1_shared_1[threadIdx_z_1 * 128 + 83] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 83]
            p1_shared_1[threadIdx_z_1 * 128 + 84] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 84]
            p1_shared_1[threadIdx_z_1 * 128 + 85] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 85]
            p1_shared_1[threadIdx_z_1 * 128 + 86] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 86]
            p1_shared_1[threadIdx_z_1 * 128 + 87] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 87]
            p1_shared_1[threadIdx_z_1 * 128 + 88] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 88]
            p1_shared_1[threadIdx_z_1 * 128 + 89] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 89]
            p1_shared_1[threadIdx_z_1 * 128 + 90] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 90]
            p1_shared_1[threadIdx_z_1 * 128 + 91] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 91]
            p1_shared_1[threadIdx_z_1 * 128 + 92] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 92]
            p1_shared_1[threadIdx_z_1 * 128 + 93] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 93]
            p1_shared_1[threadIdx_z_1 * 128 + 94] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 94]
            p1_shared_1[threadIdx_z_1 * 128 + 95] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 95]
            p1_shared_1[threadIdx_z_1 * 128 + 96] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 96]
            p1_shared_1[threadIdx_z_1 * 128 + 97] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 97]
            p1_shared_1[threadIdx_z_1 * 128 + 98] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 98]
            p1_shared_1[threadIdx_z_1 * 128 + 99] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 99]
            p1_shared_1[threadIdx_z_1 * 128 + 100] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 100]
            p1_shared_1[threadIdx_z_1 * 128 + 101] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 101]
            p1_shared_1[threadIdx_z_1 * 128 + 102] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 102]
            p1_shared_1[threadIdx_z_1 * 128 + 103] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 103]
            p1_shared_1[threadIdx_z_1 * 128 + 104] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 104]
            p1_shared_1[threadIdx_z_1 * 128 + 105] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 105]
            p1_shared_1[threadIdx_z_1 * 128 + 106] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 106]
            p1_shared_1[threadIdx_z_1 * 128 + 107] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 107]
            p1_shared_1[threadIdx_z_1 * 128 + 108] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 108]
            p1_shared_1[threadIdx_z_1 * 128 + 109] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 109]
            p1_shared_1[threadIdx_z_1 * 128 + 110] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 110]
            p1_shared_1[threadIdx_z_1 * 128 + 111] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 111]
            p1_shared_1[threadIdx_z_1 * 128 + 112] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 112]
            p1_shared_1[threadIdx_z_1 * 128 + 113] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 113]
            p1_shared_1[threadIdx_z_1 * 128 + 114] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 114]
            p1_shared_1[threadIdx_z_1 * 128 + 115] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 115]
            p1_shared_1[threadIdx_z_1 * 128 + 116] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 116]
            p1_shared_1[threadIdx_z_1 * 128 + 117] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 117]
            p1_shared_1[threadIdx_z_1 * 128 + 118] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 118]
            p1_shared_1[threadIdx_z_1 * 128 + 119] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 119]
            p1_shared_1[threadIdx_z_1 * 128 + 120] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 120]
            p1_shared_1[threadIdx_z_1 * 128 + 121] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 121]
            p1_shared_1[threadIdx_z_1 * 128 + 122] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 122]
            p1_shared_1[threadIdx_z_1 * 128 + 123] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 123]
            p1_shared_1[threadIdx_z_1 * 128 + 124] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 124]
            p1_shared_1[threadIdx_z_1 * 128 + 125] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 125]
            p1_shared_1[threadIdx_z_1 * 128 + 126] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 126]
            p1_shared_1[threadIdx_z_1 * 128 + 127] = p1_1[blockIdx_z * 5120 + threadIdx_z_1 * 512 + rc_outer * 128 + 127]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 128], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 128 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 128 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 128 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 128 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 128 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 128 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 128 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 128 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 128 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 128 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 128 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 128 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 128 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 128 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 128 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 128 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 128 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 128 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 128 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 128 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 128 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 128 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 128 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 128 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 128 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 128 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 128 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 128 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 128 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 128 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 128 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 128 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 128 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 128 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 128 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[36], p1_shared_1[threadIdx_z * 128 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[37], p1_shared_1[threadIdx_z * 128 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[38], p1_shared_1[threadIdx_z * 128 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[39], p1_shared_1[threadIdx_z * 128 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[40], p1_shared_1[threadIdx_z * 128 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[41], p1_shared_1[threadIdx_z * 128 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[42], p1_shared_1[threadIdx_z * 128 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[43], p1_shared_1[threadIdx_z * 128 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[44], p1_shared_1[threadIdx_z * 128 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[45], p1_shared_1[threadIdx_z * 128 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[46], p1_shared_1[threadIdx_z * 128 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[47], p1_shared_1[threadIdx_z * 128 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[48], p1_shared_1[threadIdx_z * 128 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[49], p1_shared_1[threadIdx_z * 128 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[50], p1_shared_1[threadIdx_z * 128 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[51], p1_shared_1[threadIdx_z * 128 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[52], p1_shared_1[threadIdx_z * 128 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[53], p1_shared_1[threadIdx_z * 128 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[54], p1_shared_1[threadIdx_z * 128 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[55], p1_shared_1[threadIdx_z * 128 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[56], p1_shared_1[threadIdx_z * 128 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[57], p1_shared_1[threadIdx_z * 128 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[58], p1_shared_1[threadIdx_z * 128 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[59], p1_shared_1[threadIdx_z * 128 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[60], p1_shared_1[threadIdx_z * 128 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[61], p1_shared_1[threadIdx_z * 128 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[62], p1_shared_1[threadIdx_z * 128 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[63], p1_shared_1[threadIdx_z * 128 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[64], p1_shared_1[threadIdx_z * 128 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[65], p1_shared_1[threadIdx_z * 128 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[66], p1_shared_1[threadIdx_z * 128 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[67], p1_shared_1[threadIdx_z * 128 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[68], p1_shared_1[threadIdx_z * 128 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[69], p1_shared_1[threadIdx_z * 128 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[70], p1_shared_1[threadIdx_z * 128 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[71], p1_shared_1[threadIdx_z * 128 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[72], p1_shared_1[threadIdx_z * 128 + 72], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[73], p1_shared_1[threadIdx_z * 128 + 73], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[74], p1_shared_1[threadIdx_z * 128 + 74], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[75], p1_shared_1[threadIdx_z * 128 + 75], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[76], p1_shared_1[threadIdx_z * 128 + 76], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[77], p1_shared_1[threadIdx_z * 128 + 77], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[78], p1_shared_1[threadIdx_z * 128 + 78], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[79], p1_shared_1[threadIdx_z * 128 + 79], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[80], p1_shared_1[threadIdx_z * 128 + 80], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[81], p1_shared_1[threadIdx_z * 128 + 81], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[82], p1_shared_1[threadIdx_z * 128 + 82], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[83], p1_shared_1[threadIdx_z * 128 + 83], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[84], p1_shared_1[threadIdx_z * 128 + 84], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[85], p1_shared_1[threadIdx_z * 128 + 85], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[86], p1_shared_1[threadIdx_z * 128 + 86], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[87], p1_shared_1[threadIdx_z * 128 + 87], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[88], p1_shared_1[threadIdx_z * 128 + 88], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[89], p1_shared_1[threadIdx_z * 128 + 89], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[90], p1_shared_1[threadIdx_z * 128 + 90], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[91], p1_shared_1[threadIdx_z * 128 + 91], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[92], p1_shared_1[threadIdx_z * 128 + 92], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[93], p1_shared_1[threadIdx_z * 128 + 93], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[94], p1_shared_1[threadIdx_z * 128 + 94], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[95], p1_shared_1[threadIdx_z * 128 + 95], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[96], p1_shared_1[threadIdx_z * 128 + 96], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[97], p1_shared_1[threadIdx_z * 128 + 97], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[98], p1_shared_1[threadIdx_z * 128 + 98], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[99], p1_shared_1[threadIdx_z * 128 + 99], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[100], p1_shared_1[threadIdx_z * 128 + 100], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[101], p1_shared_1[threadIdx_z * 128 + 101], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[102], p1_shared_1[threadIdx_z * 128 + 102], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[103], p1_shared_1[threadIdx_z * 128 + 103], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[104], p1_shared_1[threadIdx_z * 128 + 104], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[105], p1_shared_1[threadIdx_z * 128 + 105], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[106], p1_shared_1[threadIdx_z * 128 + 106], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[107], p1_shared_1[threadIdx_z * 128 + 107], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[108], p1_shared_1[threadIdx_z * 128 + 108], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[109], p1_shared_1[threadIdx_z * 128 + 109], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[110], p1_shared_1[threadIdx_z * 128 + 110], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[111], p1_shared_1[threadIdx_z * 128 + 111], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[112], p1_shared_1[threadIdx_z * 128 + 112], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[113], p1_shared_1[threadIdx_z * 128 + 113], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[114], p1_shared_1[threadIdx_z * 128 + 114], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[115], p1_shared_1[threadIdx_z * 128 + 115], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[116], p1_shared_1[threadIdx_z * 128 + 116], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[117], p1_shared_1[threadIdx_z * 128 + 117], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[118], p1_shared_1[threadIdx_z * 128 + 118], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[119], p1_shared_1[threadIdx_z * 128 + 119], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[120], p1_shared_1[threadIdx_z * 128 + 120], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[121], p1_shared_1[threadIdx_z * 128 + 121], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[122], p1_shared_1[threadIdx_z * 128 + 122], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[123], p1_shared_1[threadIdx_z * 128 + 123], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[124], p1_shared_1[threadIdx_z * 128 + 124], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[125], p1_shared_1[threadIdx_z * 128 + 125], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[126], p1_shared_1[threadIdx_z * 128 + 126], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[127], p1_shared_1[threadIdx_z * 128 + 127], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 1690 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 10 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_1_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((16,), data=p2)
    T_relu_1 = T.decl_buffer((48400,), data=T_relu)
    p1_1 = T.decl_buffer((1024,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((193600,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((176,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 1)
    conv2d_nchw = T.allocate([2], "float32", "local")
    pad_temp_shared = T.allocate([176], "float32", "shared")
    p1_shared = T.allocate([256], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 55)
    blockIdx_x = T.launch_thread("blockIdx.x", 5)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 11)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    for rc_outer in range(4):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 11)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(2):
                pad_temp_shared_1[threadIdx_z_1 * 22 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p0_1[rc_outer * 48400 + threadIdx_z_1 * 6050 + T.Div(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 11) * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + T.truncmod(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 11)]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 11)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(3):
                if T.shift_right(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 5) + threadIdx_z_1 < 8:
                    if threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 32:
                        p1_shared_1[threadIdx_z_1 * 32 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[threadIdx_z_1 * 128 + T.shift_right(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 4) * 64 + rc_outer * 16 + T.bitwise_and(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 15)]
        T.tvm_storage_sync("shared")
        for rc_inner in range(16):
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 11 + threadIdx_x], p1_shared_1[threadIdx_z * 16 + rc_inner], conv2d_nchw_1[0])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 11 + threadIdx_x], p1_shared_1[threadIdx_z * 16 + rc_inner + 128], conv2d_nchw_1[1])
    T_relu_1[threadIdx_z * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + threadIdx_x + 24200] = T.max(conv2d_nchw_1[1] + p2_1[threadIdx_z + 8], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_2_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((193600,), data=T_relu)
    p1_1 = T.decl_buffer((1024,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((48400,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((400,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([400], "float32", "shared")
    p1_shared = T.allocate([512], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 11)
    blockIdx_x = T.launch_thread("blockIdx.x", 11)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 5)
    threadIdx_x = T.launch_thread("threadIdx.x", 5)
    conv2d_nchw_1[0] = T.float32(0)
    with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 5)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 5)
        if threadIdx_z_1 * 13 + threadIdx_y_1 * 3 + threadIdx_x_1 < 400:
            if threadIdx_y_1 * 3 + threadIdx_x_1 < 13:
                if threadIdx_x_1 < 3:
                    pad_temp_shared_1[threadIdx_z_1 * 13 + threadIdx_y_1 * 3 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 13 + threadIdx_y_1 * 3 + threadIdx_x_1, 25) * 3025 + blockIdx_y * 275 + T.Div(T.truncmod(threadIdx_z_1 * 13 + threadIdx_y_1 * 3 + threadIdx_x_1, 25), 5) * 55 + blockIdx_x * 5 + T.truncmod(threadIdx_z_1 * 13 + threadIdx_y_1 * 3 + threadIdx_x_1, 5)]
    with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 5)
        threadIdx_x_1 = T.launch_thread("threadIdx.x", 5)
        if T.shift_right(T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1, 2) + threadIdx_z_1 < 32:
            if T.shift_right(threadIdx_x_1, 2) + threadIdx_y_1 < 4:
                if threadIdx_x_1 < 4:
                    p1_shared_1[threadIdx_z_1 * 16 + threadIdx_y_1 * 4 + threadIdx_x_1] = p1_1[blockIdx_z * 512 + threadIdx_z_1 * 16 + threadIdx_y_1 * 4 + threadIdx_x_1]
    T.tvm_storage_sync("shared")
    for rc_inner in range(16):
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 25 + threadIdx_y * 5 + threadIdx_x], p1_shared_1[threadIdx_z * 16 + rc_inner], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 96800 + threadIdx_z * 3025 + blockIdx_y * 275 + threadIdx_y * 55 + blockIdx_x * 5 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_3_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((193600,), data=T_relu)
    p1_1 = T.decl_buffer((9216,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2304,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((48400,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((72,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([72], "float32", "shared")
    p1_shared = T.allocate([2304], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 55)
    blockIdx_x = T.launch_thread("blockIdx.x", 55)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(2):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(3):
                if threadIdx_z_1 < 24:
                    pad_temp_shared_1[threadIdx_z_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = T.if_then_else(1 <= blockIdx_y + T.truncmod(threadIdx_z_1, 3) and blockIdx_y + T.truncmod(threadIdx_z_1, 3) < 56 and 1 <= ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner + blockIdx_x and ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner + blockIdx_x < 56, p0_1[rc_outer * 24200 + T.Div(threadIdx_z_1, 3) * 3025 + blockIdx_y * 55 + T.truncmod(threadIdx_z_1, 3) * 55 + blockIdx_x + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner - 56], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(72):
                p1_shared_1[threadIdx_z_1 * 72 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[blockIdx_z * 4608 + threadIdx_z_1 * 144 + rc_outer * 72 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        T.tvm_storage_sync("shared")
        for rc_inner, ry_inner, rx_inner in T.grid(8, 3, 3):
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 9 + ry_inner * 3 + rx_inner], p1_shared_1[threadIdx_z * 72 + rc_inner * 9 + ry_inner * 3 + rx_inner], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 96800 + threadIdx_z * 3025 + blockIdx_y * 55 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_4_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((16,), data=p2)
    T_relu_1 = T.decl_buffer((48400,), data=T_relu)
    p1_1 = T.decl_buffer((2048,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((387200,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((176,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 1)
    conv2d_nchw = T.allocate([2], "float32", "local")
    pad_temp_shared = T.allocate([176], "float32", "shared")
    p1_shared = T.allocate([256], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 55)
    blockIdx_x = T.launch_thread("blockIdx.x", 5)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 11)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    for rc_outer in range(8):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 11)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(2):
                pad_temp_shared_1[threadIdx_z_1 * 22 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p0_1[rc_outer * 48400 + threadIdx_z_1 * 6050 + T.Div(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 11) * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + T.truncmod(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 11)]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 11)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(3):
                if T.shift_right(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 5) + threadIdx_z_1 < 8:
                    if threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 32:
                        p1_shared_1[threadIdx_z_1 * 32 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[threadIdx_z_1 * 256 + T.shift_right(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 4) * 128 + rc_outer * 16 + T.bitwise_and(threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 15)]
        T.tvm_storage_sync("shared")
        for rc_inner in range(16):
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 11 + threadIdx_x], p1_shared_1[threadIdx_z * 16 + rc_inner], conv2d_nchw_1[0])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 11 + threadIdx_x], p1_shared_1[threadIdx_z * 16 + rc_inner + 128], conv2d_nchw_1[1])
    T_relu_1[threadIdx_z * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + threadIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 3025 + blockIdx_y * 55 + blockIdx_x * 11 + threadIdx_x + 24200] = T.max(conv2d_nchw_1[1] + p2_1[threadIdx_z + 8], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_5_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((32,), data=p2)
    T_relu_1 = T.decl_buffer((23328,), data=T_relu)
    p1_1 = T.decl_buffer((4096,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((64,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((93312,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((54,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((9,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 1)
    conv2d_nchw = T.allocate([9], "float32", "local")
    pad_temp_shared = T.allocate([54], "float32", "shared")
    p1_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 9)
    blockIdx_x = T.launch_thread("blockIdx.x", 3)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 3)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    threadIdx_z_1 = T.env_thread("threadIdx.z")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_1, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        T.launch_thread(threadIdx_x_1, 3)
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9)]
    threadIdx_z_2 = T.env_thread("threadIdx.z")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_2, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 1458]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 2]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 2916]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 4]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 4374]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 6]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 5832]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 8]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 7290]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 10]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 8748]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 12]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 10206]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 14]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 11664]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 16]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 13122]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 18]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 14580]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 20]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 16038]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 22]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 17496]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 24]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 18954]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 26]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 20412]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 28]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 21870]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 30]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 23328]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 32]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 24786]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 34]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 26244]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 36]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 27702]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 38]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 29160]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 40]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 30618]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 42]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 32076]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 44]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 33534]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 46]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 34992]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 48]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 36450]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 50]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 37908]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 52]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 39366]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 54]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 40824]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 56]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 42282]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 58]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 43740]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 60]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 45198]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 62]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 46656]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 64]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 48114]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 66]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 49572]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 68]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 51030]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 70]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 52488]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 72]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 53946]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 74]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 55404]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 76]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 56862]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 78]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 58320]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 80]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 59778]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 82]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 61236]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 84]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 62694]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 86]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 64152]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 88]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 65610]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 90]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 67068]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 92]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 68526]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 94]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 69984]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 96]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 71442]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 98]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 72900]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 100]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 74358]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 102]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 75816]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 104]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 77274]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 106]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 78732]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 108]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 80190]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 110]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 81648]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 112]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 83106]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 114]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 84564]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 116]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 86022]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 118]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 87480]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 120]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 88938]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 122]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 90396]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 124]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 91854]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[threadIdx_z_2 * 128 + threadIdx_x_2 + 126]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3] = T.max(conv2d_nchw_1[0] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 1] = T.max(conv2d_nchw_1[1] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 2] = T.max(conv2d_nchw_1[2] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 27] = T.max(conv2d_nchw_1[3] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 28] = T.max(conv2d_nchw_1[4] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 29] = T.max(conv2d_nchw_1[5] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 54] = T.max(conv2d_nchw_1[6] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 55] = T.max(conv2d_nchw_1[7] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 56] = T.max(conv2d_nchw_1[8] + p2_1[threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_6_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    T_relu_1 = T.decl_buffer((93312,), data=T_relu)
    p1_1 = T.decl_buffer((4096,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((64,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((23328,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((54,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((9,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([9], "float32", "local")
    pad_temp_shared = T.allocate([54], "float32", "shared")
    p1_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 9)
    blockIdx_x = T.launch_thread("blockIdx.x", 3)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 3)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    threadIdx_z_1 = T.env_thread("threadIdx.z")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_1, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        T.launch_thread(threadIdx_x_1, 3)
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9)]
    threadIdx_z_2 = T.env_thread("threadIdx.z")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_z_2, 32):
        threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 1458]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 2]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 2916]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 4]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 4374]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 6]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 5832]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 8]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 7290]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 10]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 8748]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 12]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 10206]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 14]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 11664]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 16]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 13122]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 18]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 14580]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 20]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 16038]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 22]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 17496]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 24]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 18954]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 26]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 20412]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 28]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    with T.launch_thread(threadIdx_z_1, 32):
        T.launch_thread(threadIdx_y_1, 1)
        T.launch_thread(threadIdx_x_1, 3)
        T.tvm_storage_sync("shared")
        if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
            if threadIdx_x_1 < 2:
                pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9) + 21870]
    with T.launch_thread(threadIdx_z_2, 32):
        T.launch_thread(threadIdx_y_2, 1)
        T.launch_thread(threadIdx_x_2, 3)
        if T.shift_right(threadIdx_x_2, 1) + threadIdx_z_2 < 32:
            if threadIdx_x_2 < 2:
                p1_shared_1[threadIdx_z_2 * 2 + threadIdx_x_2] = p1_1[blockIdx_z * 1024 + threadIdx_z_2 * 32 + threadIdx_x_2 + 30]
    T.tvm_storage_sync("shared")
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
    conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
    conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
    conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
    conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
    conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
    conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
    conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
    conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
    conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 1] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 2] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 27] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 28] = T.max(conv2d_nchw_1[4] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 29] = T.max(conv2d_nchw_1[5] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 54] = T.max(conv2d_nchw_1[6] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 55] = T.max(conv2d_nchw_1[7] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 56] = T.max(conv2d_nchw_1[8] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_7_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    T_relu_1 = T.decl_buffer((93312,), data=T_relu)
    p1_1 = T.decl_buffer((36864,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((576,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((23328,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((110,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((9,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([9], "float32", "local")
    pad_temp_shared = T.allocate([110], "float32", "shared")
    p1_shared = T.allocate([576], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 9)
    blockIdx_x = T.launch_thread("blockIdx.x", 3)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 3)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    for rc_outer in range(16):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 3)
            T.tvm_storage_sync("shared")
            if threadIdx_z_1 * 2 + threadIdx_x_1 < 55:
                if threadIdx_x_1 < 2:
                    pad_temp_shared_1[threadIdx_z_1 * 4 + threadIdx_x_1 * 2] = T.if_then_else(1 <= blockIdx_y * 3 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 55), 11) and blockIdx_y * 3 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 55), 11) < 28 and 1 <= blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 11) and blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 11) < 28, p0_1[rc_outer * 1458 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 110), 55) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 55), 11) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2, 11) - 28], T.float32(0))
            if threadIdx_z_1 * 2 + threadIdx_x_1 < 55:
                if threadIdx_x_1 < 2:
                    pad_temp_shared_1[threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1] = T.if_then_else(1 <= blockIdx_y * 3 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 55), 11) and blockIdx_y * 3 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 55), 11) < 28 and 1 <= blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 11) and blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 11) < 28, p0_1[rc_outer * 1458 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 110), 55) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 55), 11) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 4 + threadIdx_x_1 * 2 + 1, 11) - 28], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 3)
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6]
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6 + 1] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6 + 1]
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6 + 2] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6 + 2]
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6 + 3] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6 + 3]
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6 + 4] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6 + 4]
            p1_shared_1[threadIdx_z_1 * 18 + threadIdx_x_1 * 6 + 5] = p1_1[blockIdx_z * 9216 + threadIdx_z_1 * 288 + rc_outer * 18 + threadIdx_x_1 * 6 + 5]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 12], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 22], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 3], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 12], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 14], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 3], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 4], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 14], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 15], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 26], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 12], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 22], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 33], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 34], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 12], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 14], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 34], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 13], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 14], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 15], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 26], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 22], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 33], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 34], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 44], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 23], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 34], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 24], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 25], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 26], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 35], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 48], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 55], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 56], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 57], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 66], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 67], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 77], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 56], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 57], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 58], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 67], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 69], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 57], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 58], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 59], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 69], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 70], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 81], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 66], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 67], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 77], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 88], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 89], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 67], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 69], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 89], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 91], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 68], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 69], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 70], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 81], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 91], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 92], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 77], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 88], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 89], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 99], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 100], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 101], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 78], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 89], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 91], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 100], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 101], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 102], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 79], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 80], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 81], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 90], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 91], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 92], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 101], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 102], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 103], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[8])
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 1] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 2] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 27] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 28] = T.max(conv2d_nchw_1[4] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 29] = T.max(conv2d_nchw_1[5] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 54] = T.max(conv2d_nchw_1[6] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 55] = T.max(conv2d_nchw_1[7] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 23328 + threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 56] = T.max(conv2d_nchw_1[8] + p2_1[blockIdx_z * 32 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_8_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((32,), data=p2)
    T_relu_1 = T.decl_buffer((23328,), data=T_relu)
    p1_1 = T.decl_buffer((8192,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((64,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((186624,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((54,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((9,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 1)
    conv2d_nchw = T.allocate([9], "float32", "local")
    pad_temp_shared = T.allocate([54], "float32", "shared")
    p1_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 9)
    blockIdx_x = T.launch_thread("blockIdx.x", 3)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 3)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    for rc_outer in range(128):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 3)
            T.tvm_storage_sync("shared")
            if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 27:
                if threadIdx_x_1 < 2:
                    pad_temp_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p0_1[rc_outer * 1458 + T.Div(threadIdx_z_1 * 2 + threadIdx_x_1, 27) * 729 + blockIdx_y * 81 + T.Div(T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 27), 9) * 27 + blockIdx_x * 9 + T.truncmod(threadIdx_z_1 * 2 + threadIdx_x_1, 9)]
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 3)
            if T.shift_right(threadIdx_x_1, 1) + threadIdx_z_1 < 32:
                if threadIdx_x_1 < 2:
                    p1_shared_1[threadIdx_z_1 * 2 + threadIdx_x_1] = p1_1[threadIdx_z_1 * 256 + rc_outer * 2 + threadIdx_x_1]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 1], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 9], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 10], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 11], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 18], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 19], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 20], p1_shared_1[threadIdx_z * 2], conv2d_nchw_1[8])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 27], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 28], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 29], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 36], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 37], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[4])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 38], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[5])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 45], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[6])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 46], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[7])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 3 + 47], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_1[8])
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3] = T.max(conv2d_nchw_1[0] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 1] = T.max(conv2d_nchw_1[1] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 2] = T.max(conv2d_nchw_1[2] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 27] = T.max(conv2d_nchw_1[3] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 28] = T.max(conv2d_nchw_1[4] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 29] = T.max(conv2d_nchw_1[5] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 54] = T.max(conv2d_nchw_1[6] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 55] = T.max(conv2d_nchw_1[7] + p2_1[threadIdx_z], T.float32(0))
    T_relu_1[threadIdx_z * 729 + blockIdx_y * 81 + blockIdx_x * 9 + threadIdx_x * 3 + 56] = T.max(conv2d_nchw_1[8] + p2_1[threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_9_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((48,), data=p2)
    T_relu_1 = T.decl_buffer((8112,), data=T_relu)
    p1_1 = T.decl_buffer((12288,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((2048,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((43264,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((128,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((1,), data=conv2d_nchw, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 3)
    conv2d_nchw = T.allocate([1], "float32", "local")
    pad_temp_shared = T.allocate([128], "float32", "shared")
    p1_shared = T.allocate([2048], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 13)
    blockIdx_x = T.launch_thread("blockIdx.x", 13)
    threadIdx_z = T.launch_thread("threadIdx.z", 16)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    conv2d_nchw_1[0] = T.float32(0)
    for rc_outer in range(2):
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 8] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 1] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 169]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 2] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 338]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 3] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 507]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 4] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 676]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 5] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 845]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 6] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 1014]
            pad_temp_shared_1[threadIdx_z_1 * 8 + 7] = p0_1[rc_outer * 21632 + threadIdx_z_1 * 1352 + blockIdx_y * 13 + blockIdx_x + 1183]
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            p1_shared_1[threadIdx_z_1 * 128] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128]
            p1_shared_1[threadIdx_z_1 * 128 + 1] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 1]
            p1_shared_1[threadIdx_z_1 * 128 + 2] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 2]
            p1_shared_1[threadIdx_z_1 * 128 + 3] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 3]
            p1_shared_1[threadIdx_z_1 * 128 + 4] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 4]
            p1_shared_1[threadIdx_z_1 * 128 + 5] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 5]
            p1_shared_1[threadIdx_z_1 * 128 + 6] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 6]
            p1_shared_1[threadIdx_z_1 * 128 + 7] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 7]
            p1_shared_1[threadIdx_z_1 * 128 + 8] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 8]
            p1_shared_1[threadIdx_z_1 * 128 + 9] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 9]
            p1_shared_1[threadIdx_z_1 * 128 + 10] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 10]
            p1_shared_1[threadIdx_z_1 * 128 + 11] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 11]
            p1_shared_1[threadIdx_z_1 * 128 + 12] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 12]
            p1_shared_1[threadIdx_z_1 * 128 + 13] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 13]
            p1_shared_1[threadIdx_z_1 * 128 + 14] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 14]
            p1_shared_1[threadIdx_z_1 * 128 + 15] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 15]
            p1_shared_1[threadIdx_z_1 * 128 + 16] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 16]
            p1_shared_1[threadIdx_z_1 * 128 + 17] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 17]
            p1_shared_1[threadIdx_z_1 * 128 + 18] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 18]
            p1_shared_1[threadIdx_z_1 * 128 + 19] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 19]
            p1_shared_1[threadIdx_z_1 * 128 + 20] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 20]
            p1_shared_1[threadIdx_z_1 * 128 + 21] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 21]
            p1_shared_1[threadIdx_z_1 * 128 + 22] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 22]
            p1_shared_1[threadIdx_z_1 * 128 + 23] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 23]
            p1_shared_1[threadIdx_z_1 * 128 + 24] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 24]
            p1_shared_1[threadIdx_z_1 * 128 + 25] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 25]
            p1_shared_1[threadIdx_z_1 * 128 + 26] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 26]
            p1_shared_1[threadIdx_z_1 * 128 + 27] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 27]
            p1_shared_1[threadIdx_z_1 * 128 + 28] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 28]
            p1_shared_1[threadIdx_z_1 * 128 + 29] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 29]
            p1_shared_1[threadIdx_z_1 * 128 + 30] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 30]
            p1_shared_1[threadIdx_z_1 * 128 + 31] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 31]
            p1_shared_1[threadIdx_z_1 * 128 + 32] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 32]
            p1_shared_1[threadIdx_z_1 * 128 + 33] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 33]
            p1_shared_1[threadIdx_z_1 * 128 + 34] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 34]
            p1_shared_1[threadIdx_z_1 * 128 + 35] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 35]
            p1_shared_1[threadIdx_z_1 * 128 + 36] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 36]
            p1_shared_1[threadIdx_z_1 * 128 + 37] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 37]
            p1_shared_1[threadIdx_z_1 * 128 + 38] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 38]
            p1_shared_1[threadIdx_z_1 * 128 + 39] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 39]
            p1_shared_1[threadIdx_z_1 * 128 + 40] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 40]
            p1_shared_1[threadIdx_z_1 * 128 + 41] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 41]
            p1_shared_1[threadIdx_z_1 * 128 + 42] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 42]
            p1_shared_1[threadIdx_z_1 * 128 + 43] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 43]
            p1_shared_1[threadIdx_z_1 * 128 + 44] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 44]
            p1_shared_1[threadIdx_z_1 * 128 + 45] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 45]
            p1_shared_1[threadIdx_z_1 * 128 + 46] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 46]
            p1_shared_1[threadIdx_z_1 * 128 + 47] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 47]
            p1_shared_1[threadIdx_z_1 * 128 + 48] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 48]
            p1_shared_1[threadIdx_z_1 * 128 + 49] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 49]
            p1_shared_1[threadIdx_z_1 * 128 + 50] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 50]
            p1_shared_1[threadIdx_z_1 * 128 + 51] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 51]
            p1_shared_1[threadIdx_z_1 * 128 + 52] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 52]
            p1_shared_1[threadIdx_z_1 * 128 + 53] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 53]
            p1_shared_1[threadIdx_z_1 * 128 + 54] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 54]
            p1_shared_1[threadIdx_z_1 * 128 + 55] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 55]
            p1_shared_1[threadIdx_z_1 * 128 + 56] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 56]
            p1_shared_1[threadIdx_z_1 * 128 + 57] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 57]
            p1_shared_1[threadIdx_z_1 * 128 + 58] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 58]
            p1_shared_1[threadIdx_z_1 * 128 + 59] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 59]
            p1_shared_1[threadIdx_z_1 * 128 + 60] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 60]
            p1_shared_1[threadIdx_z_1 * 128 + 61] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 61]
            p1_shared_1[threadIdx_z_1 * 128 + 62] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 62]
            p1_shared_1[threadIdx_z_1 * 128 + 63] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 63]
            p1_shared_1[threadIdx_z_1 * 128 + 64] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 64]
            p1_shared_1[threadIdx_z_1 * 128 + 65] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 65]
            p1_shared_1[threadIdx_z_1 * 128 + 66] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 66]
            p1_shared_1[threadIdx_z_1 * 128 + 67] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 67]
            p1_shared_1[threadIdx_z_1 * 128 + 68] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 68]
            p1_shared_1[threadIdx_z_1 * 128 + 69] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 69]
            p1_shared_1[threadIdx_z_1 * 128 + 70] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 70]
            p1_shared_1[threadIdx_z_1 * 128 + 71] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 71]
            p1_shared_1[threadIdx_z_1 * 128 + 72] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 72]
            p1_shared_1[threadIdx_z_1 * 128 + 73] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 73]
            p1_shared_1[threadIdx_z_1 * 128 + 74] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 74]
            p1_shared_1[threadIdx_z_1 * 128 + 75] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 75]
            p1_shared_1[threadIdx_z_1 * 128 + 76] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 76]
            p1_shared_1[threadIdx_z_1 * 128 + 77] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 77]
            p1_shared_1[threadIdx_z_1 * 128 + 78] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 78]
            p1_shared_1[threadIdx_z_1 * 128 + 79] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 79]
            p1_shared_1[threadIdx_z_1 * 128 + 80] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 80]
            p1_shared_1[threadIdx_z_1 * 128 + 81] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 81]
            p1_shared_1[threadIdx_z_1 * 128 + 82] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 82]
            p1_shared_1[threadIdx_z_1 * 128 + 83] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 83]
            p1_shared_1[threadIdx_z_1 * 128 + 84] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 84]
            p1_shared_1[threadIdx_z_1 * 128 + 85] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 85]
            p1_shared_1[threadIdx_z_1 * 128 + 86] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 86]
            p1_shared_1[threadIdx_z_1 * 128 + 87] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 87]
            p1_shared_1[threadIdx_z_1 * 128 + 88] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 88]
            p1_shared_1[threadIdx_z_1 * 128 + 89] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 89]
            p1_shared_1[threadIdx_z_1 * 128 + 90] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 90]
            p1_shared_1[threadIdx_z_1 * 128 + 91] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 91]
            p1_shared_1[threadIdx_z_1 * 128 + 92] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 92]
            p1_shared_1[threadIdx_z_1 * 128 + 93] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 93]
            p1_shared_1[threadIdx_z_1 * 128 + 94] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 94]
            p1_shared_1[threadIdx_z_1 * 128 + 95] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 95]
            p1_shared_1[threadIdx_z_1 * 128 + 96] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 96]
            p1_shared_1[threadIdx_z_1 * 128 + 97] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 97]
            p1_shared_1[threadIdx_z_1 * 128 + 98] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 98]
            p1_shared_1[threadIdx_z_1 * 128 + 99] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 99]
            p1_shared_1[threadIdx_z_1 * 128 + 100] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 100]
            p1_shared_1[threadIdx_z_1 * 128 + 101] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 101]
            p1_shared_1[threadIdx_z_1 * 128 + 102] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 102]
            p1_shared_1[threadIdx_z_1 * 128 + 103] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 103]
            p1_shared_1[threadIdx_z_1 * 128 + 104] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 104]
            p1_shared_1[threadIdx_z_1 * 128 + 105] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 105]
            p1_shared_1[threadIdx_z_1 * 128 + 106] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 106]
            p1_shared_1[threadIdx_z_1 * 128 + 107] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 107]
            p1_shared_1[threadIdx_z_1 * 128 + 108] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 108]
            p1_shared_1[threadIdx_z_1 * 128 + 109] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 109]
            p1_shared_1[threadIdx_z_1 * 128 + 110] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 110]
            p1_shared_1[threadIdx_z_1 * 128 + 111] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 111]
            p1_shared_1[threadIdx_z_1 * 128 + 112] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 112]
            p1_shared_1[threadIdx_z_1 * 128 + 113] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 113]
            p1_shared_1[threadIdx_z_1 * 128 + 114] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 114]
            p1_shared_1[threadIdx_z_1 * 128 + 115] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 115]
            p1_shared_1[threadIdx_z_1 * 128 + 116] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 116]
            p1_shared_1[threadIdx_z_1 * 128 + 117] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 117]
            p1_shared_1[threadIdx_z_1 * 128 + 118] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 118]
            p1_shared_1[threadIdx_z_1 * 128 + 119] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 119]
            p1_shared_1[threadIdx_z_1 * 128 + 120] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 120]
            p1_shared_1[threadIdx_z_1 * 128 + 121] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 121]
            p1_shared_1[threadIdx_z_1 * 128 + 122] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 122]
            p1_shared_1[threadIdx_z_1 * 128 + 123] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 123]
            p1_shared_1[threadIdx_z_1 * 128 + 124] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 124]
            p1_shared_1[threadIdx_z_1 * 128 + 125] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 125]
            p1_shared_1[threadIdx_z_1 * 128 + 126] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 126]
            p1_shared_1[threadIdx_z_1 * 128 + 127] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 256 + rc_outer * 128 + 127]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[0], p1_shared_1[threadIdx_z * 128], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[1], p1_shared_1[threadIdx_z * 128 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[2], p1_shared_1[threadIdx_z * 128 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[3], p1_shared_1[threadIdx_z * 128 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[4], p1_shared_1[threadIdx_z * 128 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[5], p1_shared_1[threadIdx_z * 128 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[6], p1_shared_1[threadIdx_z * 128 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[7], p1_shared_1[threadIdx_z * 128 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[8], p1_shared_1[threadIdx_z * 128 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[9], p1_shared_1[threadIdx_z * 128 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[10], p1_shared_1[threadIdx_z * 128 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[11], p1_shared_1[threadIdx_z * 128 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[12], p1_shared_1[threadIdx_z * 128 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[13], p1_shared_1[threadIdx_z * 128 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[14], p1_shared_1[threadIdx_z * 128 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[15], p1_shared_1[threadIdx_z * 128 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[16], p1_shared_1[threadIdx_z * 128 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[17], p1_shared_1[threadIdx_z * 128 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[18], p1_shared_1[threadIdx_z * 128 + 18], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[19], p1_shared_1[threadIdx_z * 128 + 19], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[20], p1_shared_1[threadIdx_z * 128 + 20], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[21], p1_shared_1[threadIdx_z * 128 + 21], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[22], p1_shared_1[threadIdx_z * 128 + 22], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[23], p1_shared_1[threadIdx_z * 128 + 23], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[24], p1_shared_1[threadIdx_z * 128 + 24], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[25], p1_shared_1[threadIdx_z * 128 + 25], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[26], p1_shared_1[threadIdx_z * 128 + 26], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[27], p1_shared_1[threadIdx_z * 128 + 27], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[28], p1_shared_1[threadIdx_z * 128 + 28], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[29], p1_shared_1[threadIdx_z * 128 + 29], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[30], p1_shared_1[threadIdx_z * 128 + 30], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[31], p1_shared_1[threadIdx_z * 128 + 31], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[32], p1_shared_1[threadIdx_z * 128 + 32], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[33], p1_shared_1[threadIdx_z * 128 + 33], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[34], p1_shared_1[threadIdx_z * 128 + 34], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[35], p1_shared_1[threadIdx_z * 128 + 35], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[36], p1_shared_1[threadIdx_z * 128 + 36], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[37], p1_shared_1[threadIdx_z * 128 + 37], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[38], p1_shared_1[threadIdx_z * 128 + 38], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[39], p1_shared_1[threadIdx_z * 128 + 39], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[40], p1_shared_1[threadIdx_z * 128 + 40], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[41], p1_shared_1[threadIdx_z * 128 + 41], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[42], p1_shared_1[threadIdx_z * 128 + 42], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[43], p1_shared_1[threadIdx_z * 128 + 43], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[44], p1_shared_1[threadIdx_z * 128 + 44], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[45], p1_shared_1[threadIdx_z * 128 + 45], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[46], p1_shared_1[threadIdx_z * 128 + 46], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[47], p1_shared_1[threadIdx_z * 128 + 47], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[48], p1_shared_1[threadIdx_z * 128 + 48], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[49], p1_shared_1[threadIdx_z * 128 + 49], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[50], p1_shared_1[threadIdx_z * 128 + 50], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[51], p1_shared_1[threadIdx_z * 128 + 51], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[52], p1_shared_1[threadIdx_z * 128 + 52], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[53], p1_shared_1[threadIdx_z * 128 + 53], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[54], p1_shared_1[threadIdx_z * 128 + 54], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[55], p1_shared_1[threadIdx_z * 128 + 55], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[56], p1_shared_1[threadIdx_z * 128 + 56], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[57], p1_shared_1[threadIdx_z * 128 + 57], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[58], p1_shared_1[threadIdx_z * 128 + 58], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[59], p1_shared_1[threadIdx_z * 128 + 59], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[60], p1_shared_1[threadIdx_z * 128 + 60], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[61], p1_shared_1[threadIdx_z * 128 + 61], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[62], p1_shared_1[threadIdx_z * 128 + 62], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[63], p1_shared_1[threadIdx_z * 128 + 63], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[64], p1_shared_1[threadIdx_z * 128 + 64], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[65], p1_shared_1[threadIdx_z * 128 + 65], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[66], p1_shared_1[threadIdx_z * 128 + 66], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[67], p1_shared_1[threadIdx_z * 128 + 67], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[68], p1_shared_1[threadIdx_z * 128 + 68], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[69], p1_shared_1[threadIdx_z * 128 + 69], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[70], p1_shared_1[threadIdx_z * 128 + 70], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[71], p1_shared_1[threadIdx_z * 128 + 71], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[72], p1_shared_1[threadIdx_z * 128 + 72], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[73], p1_shared_1[threadIdx_z * 128 + 73], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[74], p1_shared_1[threadIdx_z * 128 + 74], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[75], p1_shared_1[threadIdx_z * 128 + 75], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[76], p1_shared_1[threadIdx_z * 128 + 76], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[77], p1_shared_1[threadIdx_z * 128 + 77], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[78], p1_shared_1[threadIdx_z * 128 + 78], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[79], p1_shared_1[threadIdx_z * 128 + 79], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[80], p1_shared_1[threadIdx_z * 128 + 80], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[81], p1_shared_1[threadIdx_z * 128 + 81], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[82], p1_shared_1[threadIdx_z * 128 + 82], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[83], p1_shared_1[threadIdx_z * 128 + 83], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[84], p1_shared_1[threadIdx_z * 128 + 84], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[85], p1_shared_1[threadIdx_z * 128 + 85], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[86], p1_shared_1[threadIdx_z * 128 + 86], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[87], p1_shared_1[threadIdx_z * 128 + 87], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[88], p1_shared_1[threadIdx_z * 128 + 88], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[89], p1_shared_1[threadIdx_z * 128 + 89], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[90], p1_shared_1[threadIdx_z * 128 + 90], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[91], p1_shared_1[threadIdx_z * 128 + 91], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[92], p1_shared_1[threadIdx_z * 128 + 92], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[93], p1_shared_1[threadIdx_z * 128 + 93], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[94], p1_shared_1[threadIdx_z * 128 + 94], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[95], p1_shared_1[threadIdx_z * 128 + 95], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[96], p1_shared_1[threadIdx_z * 128 + 96], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[97], p1_shared_1[threadIdx_z * 128 + 97], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[98], p1_shared_1[threadIdx_z * 128 + 98], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[99], p1_shared_1[threadIdx_z * 128 + 99], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[100], p1_shared_1[threadIdx_z * 128 + 100], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[101], p1_shared_1[threadIdx_z * 128 + 101], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[102], p1_shared_1[threadIdx_z * 128 + 102], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[103], p1_shared_1[threadIdx_z * 128 + 103], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[104], p1_shared_1[threadIdx_z * 128 + 104], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[105], p1_shared_1[threadIdx_z * 128 + 105], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[106], p1_shared_1[threadIdx_z * 128 + 106], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[107], p1_shared_1[threadIdx_z * 128 + 107], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[108], p1_shared_1[threadIdx_z * 128 + 108], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[109], p1_shared_1[threadIdx_z * 128 + 109], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[110], p1_shared_1[threadIdx_z * 128 + 110], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[111], p1_shared_1[threadIdx_z * 128 + 111], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[112], p1_shared_1[threadIdx_z * 128 + 112], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[113], p1_shared_1[threadIdx_z * 128 + 113], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[114], p1_shared_1[threadIdx_z * 128 + 114], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[115], p1_shared_1[threadIdx_z * 128 + 115], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[116], p1_shared_1[threadIdx_z * 128 + 116], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[117], p1_shared_1[threadIdx_z * 128 + 117], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[118], p1_shared_1[threadIdx_z * 128 + 118], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[119], p1_shared_1[threadIdx_z * 128 + 119], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[120], p1_shared_1[threadIdx_z * 128 + 120], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[121], p1_shared_1[threadIdx_z * 128 + 121], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[122], p1_shared_1[threadIdx_z * 128 + 122], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[123], p1_shared_1[threadIdx_z * 128 + 123], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[124], p1_shared_1[threadIdx_z * 128 + 124], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[125], p1_shared_1[threadIdx_z * 128 + 125], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[126], p1_shared_1[threadIdx_z * 128 + 126], conv2d_nchw_1[0])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[127], p1_shared_1[threadIdx_z * 128 + 127], conv2d_nchw_1[0])
    T_relu_1[blockIdx_z * 2704 + threadIdx_z * 169 + blockIdx_y * 13 + blockIdx_x] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 16 + threadIdx_z], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((802816,), data=T_relu)
    p1_1 = T.decl_buffer((1728,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((96,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((150528,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((171,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((64,), data=conv2d_nchw, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([16], "float32", "local")
    pad_temp_shared = T.allocate([171], "float32", "shared")
    p1_shared = T.allocate([96], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 56)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    for ff_init, xx_init in T.grid(2, 4):
        conv2d_nchw_1[ff_init * 4 + xx_init] = T.float32(0)
        conv2d_nchw_1[ff_init * 4 + xx_init + 8] = T.float32(0)
    for rc_outer, ry_outer in T.grid(3, 3):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(2):
                if threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 171:
                    if T.Div(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 11) + threadIdx_y_1 < 2:
                        if threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 11:
                            pad_temp_shared_1[threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = T.if_then_else(1 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 57) + ry_outer and 1 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 57), p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 57) * 224 + ry_outer * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 22 + threadIdx_y_1 * 11 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 57) - 225], T.float32(0))
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            if T.shift_right(T.Div(threadIdx_x_1, 6) + threadIdx_y_1, 1) + threadIdx_z_1 < 8:
                if T.Div(threadIdx_x_1, 6) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 6:
                        p1_shared_1[threadIdx_z_1 * 12 + threadIdx_y_1 * 6 + threadIdx_x_1] = p1_1[blockIdx_z * 864 + threadIdx_z_1 * 108 + threadIdx_y_1 * 54 + T.Div(threadIdx_x_1, 3) * 27 + rc_outer * 9 + ry_outer * 3 + T.truncmod(threadIdx_x_1, 3)]
        T.tvm_storage_sync("shared")
        for rx_inner, ff, xx in T.grid(3, 2, 4):
            conv2d_nchw_1[ff * 4 + xx] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 114 + threadIdx_x * 8 + xx * 2 + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner], conv2d_nchw_1[ff * 4 + xx])
            conv2d_nchw_1[ff * 4 + xx + 8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 114 + threadIdx_x * 8 + xx * 2 + rx_inner], p1_shared_1[threadIdx_z * 6 + ff * 3 + rx_inner + 48], conv2d_nchw_1[ff * 4 + xx + 8])
    for ax1_inner_inner_inner, ax3_inner_inner_inner in T.grid(2, 4):
        T_relu_1[blockIdx_z * 401408 + threadIdx_z * 25088 + ax1_inner_inner_inner * 12544 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 4 + ax3_inner_inner_inner] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner], T.float32(0))
        T_relu_1[blockIdx_z * 401408 + threadIdx_z * 25088 + ax1_inner_inner_inner * 12544 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 4 + ax3_inner_inner_inner + 200704] = T.max(conv2d_nchw_1[ax1_inner_inner_inner * 4 + ax3_inner_inner_inner + 8] + p2_1[blockIdx_z * 32 + threadIdx_z * 2 + ax1_inner_inner_inner + 16], T.float32(0))
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_global_avg_pool2d_kernel(adaptive_pool_sum: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    adaptive_pool_sum_1 = T.decl_buffer((1000,), data=adaptive_pool_sum)
    red_buf0 = T.handle("float32", "shared")
    red_buf0_1 = T.decl_buffer((1024,), data=red_buf0, scope="shared")
    p0_1 = T.decl_buffer((169000,), data=p0)
    adaptive_pool_sum_rf = T.handle("float32", "local")
    adaptive_pool_sum_rf_1 = T.decl_buffer((1,), data=adaptive_pool_sum_rf, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 32)
    adaptive_pool_sum_rf = T.allocate([1], "float32", "local")
    red_buf0 = T.allocate([1024], "float32", "shared")
    T.attr(red_buf0, "volatile_scope", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 32)
    threadIdx_x = T.launch_thread("threadIdx.x", 32)
    adaptive_pool_sum_rf_1[0] = T.float32(0)
    for rv0_rv1_fused_outer in range(6):
        if blockIdx_x * 4 + T.shift_right(threadIdx_y, 3) < 125:
            if rv0_rv1_fused_outer * 32 + threadIdx_x < 169 and rv0_rv1_fused_outer * 32 + threadIdx_x < 169:
                adaptive_pool_sum_rf_1[0] = adaptive_pool_sum_rf_1[0] + p0_1[blockIdx_x * 5408 + threadIdx_y * 169 + rv0_rv1_fused_outer * 32 + threadIdx_x]
    with T.attr(T.comm_reducer(lambda x, y: x + y, [T.float32(0)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
        T.tvm_storage_sync("shared")
        red_buf0_1[threadIdx_y * 32 + threadIdx_x] = adaptive_pool_sum_rf_1[0]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 16:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 16]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 8:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 8]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 4:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 4]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 2:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 2]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 1:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 1]
        T.tvm_storage_sync("shared")
    if threadIdx_x == 0 and blockIdx_x * 4 + T.shift_right(threadIdx_y, 3) < 125:
        adaptive_pool_sum_1[blockIdx_x * 32 + threadIdx_y] = red_buf0_1[threadIdx_y * 32]
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_global_avg_pool2d_kernel_1(adaptive_pool_avg: T.handle("float32"), adaptive_pool_sum: T.handle("float32", "global")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    adaptive_pool_sum_1 = T.decl_buffer((1000,), data=adaptive_pool_sum)
    adaptive_pool_avg_1 = T.decl_buffer((1000,), data=adaptive_pool_avg)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    if blockIdx_x * 32 + T.shift_right(threadIdx_x, 3) < 125:
        adaptive_pool_avg_1[blockIdx_x * 256 + threadIdx_x] = adaptive_pool_sum_1[blockIdx_x * 256 + threadIdx_x] * T.float32(0.0059171597633136093)
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_1_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((93312,), data=pool_max)
    p0_1 = T.decl_buffer((387200,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 365)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(3, 3):
        if blockIdx_x * 2 + T.shift_right(threadIdx_x, 7) < 729:
            pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 256 + threadIdx_x, 729) * 3025 + T.Div(T.truncmod(blockIdx_x * 256 + threadIdx_x, 729), 27) * 110 + rv0 * 55 + T.truncmod(blockIdx_x * 13 + threadIdx_x, 27) * 2 + rv1])
    if blockIdx_x * 2 + T.shift_right(threadIdx_x, 7) < 729:
        pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_2_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((43264,), data=pool_max)
    p0_1 = T.decl_buffer((186624,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 169)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(3, 3):
        pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 256 + threadIdx_x, 169) * 729 + T.Div(T.truncmod(blockIdx_x * 87 + threadIdx_x, 169), 13) * 54 + rv0 * 27 + T.truncmod(blockIdx_x * 9 + threadIdx_x, 13) * 2 + rv1])
    pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_kernel(p0: T.handle("float32"), pool_max: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    pool_max_1 = T.decl_buffer((193600,), data=pool_max)
    p0_1 = T.decl_buffer((802816,), data=p0)
    pool_max_local = T.handle("float32", "local")
    pool_max_local_1 = T.decl_buffer((1,), data=pool_max_local, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 757)
    pool_max_local = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_local_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(3, 3):
        if blockIdx_x * 4 + T.shift_right(threadIdx_x, 6) < 3025:
            pool_max_local_1[0] = T.max(pool_max_local_1[0], p0_1[T.Div(blockIdx_x * 256 + threadIdx_x, 3025) * 12544 + T.Div(T.truncmod(blockIdx_x * 256 + threadIdx_x, 3025), 55) * 224 + rv0 * 112 + T.truncmod(blockIdx_x * 36 + threadIdx_x, 55) * 2 + rv1])
    if blockIdx_x * 4 + T.shift_right(threadIdx_x, 6) < 3025:
        pool_max_1[blockIdx_x * 256 + threadIdx_x] = pool_max_local_1[0]
[23:18:43] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_softmax_kernel(T_softmax_norm: T.handle("float32"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    T_softmax_norm_1 = T.decl_buffer((1000,), data=T_softmax_norm)
    red_buf0 = T.handle("float32", "shared")
    red_buf0_1 = T.decl_buffer((64,), data=red_buf0, scope="shared")
    normal_reduce_temp0 = T.handle("float32", "local")
    normal_reduce_temp0_1 = T.decl_buffer((1,), data=normal_reduce_temp0, scope="local")
    T_softmax_exp = T.handle("float32", "local")
    T_softmax_exp_1 = T.decl_buffer((1000,), data=T_softmax_exp, scope="local")
    red_buf0_2 = T.handle("float32", "shared")
    red_buf0_3 = T.decl_buffer((64,), data=red_buf0_2, scope="shared")
    p0_1 = T.decl_buffer((1000,), data=p0)
    normal_reduce_temp0_2 = T.handle("float32", "local")
    normal_reduce_temp0_3 = T.decl_buffer((1,), data=normal_reduce_temp0_2, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    normal_reduce_temp0_2 = T.allocate([1], "float32", "local")
    red_buf0_2 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0_2, "volatile_scope", 1)
    T_softmax_exp = T.allocate([16], "float32", "local")
    normal_reduce_temp0 = T.allocate([1], "float32", "local")
    red_buf0 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0, "volatile_scope", 1)
    threadIdx_x = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_x, 64):
        normal_reduce_temp0_3[0] = T.float32(-3.4028234663852886e+38)
        for k_inner in range(16):
            if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
                normal_reduce_temp0_3[0] = T.max(normal_reduce_temp0_3[0], p0_1[threadIdx_x * 16 + k_inner])
        with T.attr(T.comm_reducer(lambda x, y: T.max(x, y), [T.float32(-3.4028234663852886e+38)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
            T.tvm_storage_sync("shared")
            red_buf0_3[threadIdx_x] = normal_reduce_temp0_3[0]
            T.tvm_storage_sync("shared")
            if threadIdx_x < 32:
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 32])) as w_32_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_32_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 16])) as w_16_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_16_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 8])) as w_8_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_8_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 4])) as w_4_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_4_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 2])) as w_2_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_2_0
                    T.tvm_storage_sync("warp")
                w_1_0: T.float32 = T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 1])
                T.tvm_storage_sync("warp")
                red_buf0_3[threadIdx_x] = w_1_0
                T.tvm_storage_sync("warp")
            T.tvm_storage_sync("shared")
        for i1_inner_outer in range(4):
            if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
                T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] = T.call_pure_extern("float32x4", "__ocml_exp_f32", p0_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] - T.Broadcast(red_buf0_3[0], 4))
    T.launch_thread(threadIdx_x, 64)
    normal_reduce_temp0_1[0] = T.float32(0)
    T.tvm_storage_sync("warp")
    for k_inner in range(16):
        if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
            normal_reduce_temp0_1[0] = normal_reduce_temp0_1[0] + T_softmax_exp_1[k_inner]
    with T.attr(T.comm_reducer(lambda x, y: x + y, [T.float32(0)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
        T.tvm_storage_sync("shared")
        red_buf0_1[threadIdx_x] = normal_reduce_temp0_1[0]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 32:
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 32]) as w_32_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_32_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 16]) as w_16_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_16_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 8]) as w_8_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_8_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 4]) as w_4_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_4_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 2]) as w_2_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_2_0
                T.tvm_storage_sync("warp")
            w_1_0: T.float32 = red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 1]
            T.tvm_storage_sync("warp")
            red_buf0_1[threadIdx_x] = w_1_0
            T.tvm_storage_sync("warp")
        T.tvm_storage_sync("shared")
    for i1_inner_outer in range(4):
        if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
            T_softmax_norm_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] = T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] / T.Broadcast(red_buf0_1[0], 4)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "b76caf272a0ed096", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 6)
    stack_tcode_1 = T.decl_buffer((T.uint64(6),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 6)
    assert num_args == 3, "tvmgen_default_fused_concatenate: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_concat_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_concat: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_concatenate_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_p0_shape)
    tvmgen_default_fused_concatenate_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_concatenate_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_concatenate_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_p1_shape)
    tvmgen_default_fused_concatenate_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_concatenate_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_p1_strides)
    T_concat_1: T.handle("float32") = T.tvm_struct_get(T_concat, 0, 1, "handle")
    T.attr(T_concat_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_T_concat_shape: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 2, "handle")
    tvmgen_default_fused_concatenate_T_concat_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_T_concat_shape)
    tvmgen_default_fused_concatenate_T_concat_strides: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 3, "handle")
    tvmgen_default_fused_concatenate_T_concat_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_T_concat_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_concatenate: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_concatenate: Expect arg[1] to be pointer"
    assert T_concat_code == 3 or T_concat_code == 13 or T_concat_code == 7 or T_concat_code == 4, "tvmgen_default_fused_concatenate: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p0_shape_1[1]) == 64, "Argument tvmgen_default_fused_concatenate.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_concatenate.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_concatenate.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_concatenate_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_concatenate_p0_strides_1[1]), "tvmgen_default_fused_concatenate.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p1_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate.p1.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p1_shape_1[1]) == 64, "Argument tvmgen_default_fused_concatenate.p1.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p1_shape_1[2]) == 55, "Argument tvmgen_default_fused_concatenate.p1.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_p1_shape_1[3]) == 55, "Argument tvmgen_default_fused_concatenate.p1.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_p1_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_concatenate_p1_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_concatenate_p1_strides_1[1]), "tvmgen_default_fused_concatenate.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate.T_concat.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate.T_concat.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_concat, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_concat, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_concat, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate.T_concat.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate.T_concat.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_T_concat_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_shape_1[1]) == 128, "Argument tvmgen_default_fused_concatenate.T_concat.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_T_concat_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_shape_1[2]) == 55, "Argument tvmgen_default_fused_concatenate.T_concat.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_T_concat_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_shape_1[3]) == 55, "Argument tvmgen_default_fused_concatenate.T_concat.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_T_concat_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_T_concat_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_concatenate_T_concat_strides_1[1]), "tvmgen_default_fused_concatenate.T_concat.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate.T_concat.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_concat, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate.T_concat.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_concat, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_concat, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate.T_concat.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_concat, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 64, 55, 55), data=p0_1)
    p1_2 = T.decl_buffer((1, 64, 55, 55), data=p1_1)
    T_concat_2 = T.decl_buffer((1, 128, 55, 55), data=T_concat_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_concatenate_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_concat_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 256))
        stack_tcode_1[4] = 0
        T.call_packed_lowered("tvmgen_default_fused_concatenate_kernel", stack_value, stack_tcode, 0, 5)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_1(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "c054ee0efb5c5cd8", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 6)
    stack_tcode_1 = T.decl_buffer((T.uint64(6),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 6)
    assert num_args == 3, "tvmgen_default_fused_concatenate_1: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_concat_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_concat: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_1_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_concatenate_1_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_1_p0_shape)
    tvmgen_default_fused_concatenate_1_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_concatenate_1_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_1_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_1_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_concatenate_1_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_1_p1_shape)
    tvmgen_default_fused_concatenate_1_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_concatenate_1_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_1_p1_strides)
    T_concat_1: T.handle("float32") = T.tvm_struct_get(T_concat, 0, 1, "handle")
    T.attr(T_concat_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_1_T_concat_shape: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 2, "handle")
    tvmgen_default_fused_concatenate_1_T_concat_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_1_T_concat_shape)
    tvmgen_default_fused_concatenate_1_T_concat_strides: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 3, "handle")
    tvmgen_default_fused_concatenate_1_T_concat_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_1_T_concat_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_concatenate_1: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_concatenate_1: Expect arg[1] to be pointer"
    assert T_concat_code == 3 or T_concat_code == 13 or T_concat_code == 7 or T_concat_code == 4, "tvmgen_default_fused_concatenate_1: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_1.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_1.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_shape_1[1]) == 128, "Argument tvmgen_default_fused_concatenate_1.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_concatenate_1.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_concatenate_1.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_1_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p0_strides_1[1]), "tvmgen_default_fused_concatenate_1.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_1.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_1.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_1.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_1.p1.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_shape_1[1]) == 128, "Argument tvmgen_default_fused_concatenate_1.p1.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_shape_1[2]) == 27, "Argument tvmgen_default_fused_concatenate_1.p1.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_shape_1[3]) == 27, "Argument tvmgen_default_fused_concatenate_1.p1.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_1_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_concatenate_1_p1_strides_1[1]), "tvmgen_default_fused_concatenate_1.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_1.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_1.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_1.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.T_concat.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_1.T_concat.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_concat, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_concat, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_concat, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_1.T_concat.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_1.T_concat.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_T_concat_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_shape_1[1]) == 256, "Argument tvmgen_default_fused_concatenate_1.T_concat.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_T_concat_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_shape_1[2]) == 27, "Argument tvmgen_default_fused_concatenate_1.T_concat.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_T_concat_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_shape_1[3]) == 27, "Argument tvmgen_default_fused_concatenate_1.T_concat.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_1_T_concat_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_1_T_concat_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_concatenate_1_T_concat_strides_1[1]), "tvmgen_default_fused_concatenate_1.T_concat.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_1.T_concat.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_concat, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_1.T_concat.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_concat, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_concat, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_1.T_concat.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_concat, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 128, 27, 27), data=p0_1)
    p1_2 = T.decl_buffer((1, 128, 27, 27), data=p1_1)
    T_concat_2 = T.decl_buffer((1, 256, 27, 27), data=T_concat_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_concatenate_1_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_concat_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 256))
        stack_tcode_1[4] = 0
        T.call_packed_lowered("tvmgen_default_fused_concatenate_1_kernel", stack_value, stack_tcode, 0, 5)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_2(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "99fd08570e699982", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 6)
    stack_tcode_1 = T.decl_buffer((T.uint64(6),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 6)
    assert num_args == 3, "tvmgen_default_fused_concatenate_2: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_concat_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_concat: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_2_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_concatenate_2_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_2_p0_shape)
    tvmgen_default_fused_concatenate_2_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_concatenate_2_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_2_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_2_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_concatenate_2_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_2_p1_shape)
    tvmgen_default_fused_concatenate_2_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_concatenate_2_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_2_p1_strides)
    T_concat_1: T.handle("float32") = T.tvm_struct_get(T_concat, 0, 1, "handle")
    T.attr(T_concat_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_2_T_concat_shape: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 2, "handle")
    tvmgen_default_fused_concatenate_2_T_concat_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_2_T_concat_shape)
    tvmgen_default_fused_concatenate_2_T_concat_strides: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 3, "handle")
    tvmgen_default_fused_concatenate_2_T_concat_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_2_T_concat_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_concatenate_2: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_concatenate_2: Expect arg[1] to be pointer"
    assert T_concat_code == 3 or T_concat_code == 13 or T_concat_code == 7 or T_concat_code == 4, "tvmgen_default_fused_concatenate_2: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_2.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_2.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_shape_1[1]) == 192, "Argument tvmgen_default_fused_concatenate_2.p0.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_2.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_2.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_2_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p0_strides_1[1]), "tvmgen_default_fused_concatenate_2.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_2.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_2.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_2.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_2.p1.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_shape_1[1]) == 192, "Argument tvmgen_default_fused_concatenate_2.p1.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_2.p1.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_2.p1.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_2_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_2_p1_strides_1[1]), "tvmgen_default_fused_concatenate_2.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_2.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_2.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_2.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.T_concat.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_2.T_concat.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_concat, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_concat, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_concat, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_2.T_concat.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_2.T_concat.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_T_concat_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_shape_1[1]) == 384, "Argument tvmgen_default_fused_concatenate_2.T_concat.shape[1] has an unsatisfied constraint: 384 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_T_concat_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_2.T_concat.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_T_concat_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_2.T_concat.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_2_T_concat_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_2_T_concat_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_2_T_concat_strides_1[1]), "tvmgen_default_fused_concatenate_2.T_concat.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_2.T_concat.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_concat, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_2.T_concat.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_concat, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_concat, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_2.T_concat.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_concat, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 192, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((1, 192, 13, 13), data=p1_1)
    T_concat_2 = T.decl_buffer((1, 384, 13, 13), data=T_concat_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_concatenate_2_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_concat_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 254))
        stack_tcode_1[3] = 0
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 256))
        stack_tcode_1[4] = 0
        T.call_packed_lowered("tvmgen_default_fused_concatenate_2_kernel", stack_value, stack_tcode, 0, 5)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_concatenate_3(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "9daf35c27fde27a3", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 6)
    stack_tcode_1 = T.decl_buffer((T.uint64(6),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 6)
    assert num_args == 3, "tvmgen_default_fused_concatenate_3: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_concat_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_concat: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_3_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_concatenate_3_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_3_p0_shape)
    tvmgen_default_fused_concatenate_3_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_concatenate_3_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_3_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_3_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_concatenate_3_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_3_p1_shape)
    tvmgen_default_fused_concatenate_3_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_concatenate_3_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_3_p1_strides)
    T_concat_1: T.handle("float32") = T.tvm_struct_get(T_concat, 0, 1, "handle")
    T.attr(T_concat_1, "storage_alignment", 64)
    tvmgen_default_fused_concatenate_3_T_concat_shape: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 2, "handle")
    tvmgen_default_fused_concatenate_3_T_concat_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_concatenate_3_T_concat_shape)
    tvmgen_default_fused_concatenate_3_T_concat_strides: T.handle("int64") = T.tvm_struct_get(T_concat, 0, 3, "handle")
    tvmgen_default_fused_concatenate_3_T_concat_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_concatenate_3_T_concat_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_concatenate_3: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_concatenate_3: Expect arg[1] to be pointer"
    assert T_concat_code == 3 or T_concat_code == 13 or T_concat_code == 7 or T_concat_code == 4, "tvmgen_default_fused_concatenate_3: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_3.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_3.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_shape_1[1]) == 256, "Argument tvmgen_default_fused_concatenate_3.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_3.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_3.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_3_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p0_strides_1[1]), "tvmgen_default_fused_concatenate_3.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_3.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_3.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_3.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_3.p1.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_shape_1[1]) == 256, "Argument tvmgen_default_fused_concatenate_3.p1.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_3.p1.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_3.p1.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_3_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_3_p1_strides_1[1]), "tvmgen_default_fused_concatenate_3.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_3.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_3.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_3.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.T_concat.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_concat, 0, 4, "int32"), "tvmgen_default_fused_concatenate_3.T_concat.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_concat, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_concat, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_concat, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_concatenate_3.T_concat.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_shape_1[0]) == 1, "Argument tvmgen_default_fused_concatenate_3.T_concat.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_T_concat_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_shape_1[1]) == 512, "Argument tvmgen_default_fused_concatenate_3.T_concat.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_T_concat_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_shape_1[2]) == 13, "Argument tvmgen_default_fused_concatenate_3.T_concat.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_T_concat_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_shape_1[3]) == 13, "Argument tvmgen_default_fused_concatenate_3.T_concat.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_concatenate_3_T_concat_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_concatenate_3_T_concat_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_concatenate_3_T_concat_strides_1[1]), "tvmgen_default_fused_concatenate_3.T_concat.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, "uint64"), "Argument tvmgen_default_fused_concatenate_3.T_concat.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_concat, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_concat, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_concatenate_3.T_concat.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_concat, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_concat, 0, 9, "int32"), "Argument tvmgen_default_fused_concatenate_3.T_concat.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_concat, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 256, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((1, 256, 13, 13), data=p1_1)
    T_concat_2 = T.decl_buffer((1, 512, 13, 13), data=T_concat_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_concatenate_3_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_concat_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 256))
        stack_tcode_1[4] = 0
        T.call_packed_lowered("tvmgen_default_fused_concatenate_3_kernel", stack_value, stack_tcode, 0, 5)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_batch_flatten(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "726d0df94a8484e3", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 5)
    stack_tcode_1 = T.decl_buffer((T.uint64(5),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 5)
    assert num_args == 2, "tvmgen_default_fused_nn_batch_flatten: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    tensor_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    tensor: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_batch_flatten_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_batch_flatten_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_batch_flatten_p0_shape)
    tvmgen_default_fused_nn_batch_flatten_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_batch_flatten_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_batch_flatten_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    tensor_1: T.handle("float32") = T.tvm_struct_get(tensor, 0, 1, "handle")
    T.attr(tensor_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_batch_flatten_tensor_shape: T.handle("int64") = T.tvm_struct_get(tensor, 0, 2, "handle")
    tvmgen_default_fused_nn_batch_flatten_tensor_shape_1 = T.decl_buffer((2,), "int64", data=tvmgen_default_fused_nn_batch_flatten_tensor_shape)
    tvmgen_default_fused_nn_batch_flatten_tensor_strides: T.handle("int64") = T.tvm_struct_get(tensor, 0, 3, "handle")
    tvmgen_default_fused_nn_batch_flatten_tensor_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_batch_flatten_tensor_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_batch_flatten: Expect arg[0] to be pointer"
    assert tensor_code == 3 or tensor_code == 13 or tensor_code == 7 or tensor_code == 4, "tvmgen_default_fused_nn_batch_flatten: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_batch_flatten.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_batch_flatten.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_batch_flatten.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_batch_flatten.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_p0_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_batch_flatten.p0.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_p0_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_batch_flatten.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_p0_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_batch_flatten.p0.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_batch_flatten_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_p0_strides_1[1]), "tvmgen_default_fused_nn_batch_flatten.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_batch_flatten.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_batch_flatten.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(tensor, 0, 4, "int32"), "tvmgen_default_fused_nn_batch_flatten.tensor.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(tensor, 0, 4, "int32"), "tvmgen_default_fused_nn_batch_flatten.tensor.ndim is expected to equal 2"
    assert T.tvm_struct_get(tensor, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(tensor, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(tensor, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_batch_flatten.tensor.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_tensor_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_batch_flatten.tensor.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_tensor_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_tensor_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_batch_flatten.tensor.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_batch_flatten_tensor_shape[1])"
    if not T.isnullptr(tvmgen_default_fused_nn_batch_flatten_tensor_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_batch_flatten_tensor_strides_1[1]), "tvmgen_default_fused_nn_batch_flatten.tensor.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(tensor, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_batch_flatten.tensor.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(tensor, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(tensor, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_batch_flatten.tensor.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(tensor, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(tensor, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_batch_flatten.tensor.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(tensor, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 1000, 1, 1), data=p0_1)
    tensor_2 = T.decl_buffer((1, 1000), data=tensor_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_batch_flatten_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, p0_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, tensor_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 4))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_batch_flatten_kernel", stack_value, stack_tcode, 0, 4)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "73faf685ffc9ccbd", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape_1[1]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape_1[2]) == 224, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.shape[2] has an unsatisfied constraint: 224 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape_1[3]) == 224, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.shape[3] has an unsatisfied constraint: 224 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides_1[3]) and 224 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides_1[2]) and 50176 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape_1[0]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape_1[1]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape_1[2]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape_1[3]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides_1[3]) and 3 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides_1[2]) and 9 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides_1[1]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape_1[2]) == 112, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.shape[2] has an unsatisfied constraint: 112 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape_1[3]) == 112, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.shape[3] has an unsatisfied constraint: 112 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides_1[3]) and 112 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides_1[2]) and 12544 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 3, 224, 224), data=p0_1)
    p1_2 = T.decl_buffer((64, 3, 3, 3), data=p1_1)
    p2_2 = T.decl_buffer((1, 64, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 64, 112, 112), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 2))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 56))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 4))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 2))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 7))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 2))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 7))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 2))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 7))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_1(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "64fa8dbb48e7ca74", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_1: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_1: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_1: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_1: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_1: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape_1[0]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides_1[1]) and 64 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_1_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_1.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 64, 55, 55), data=p0_1)
    p1_2 = T.decl_buffer((16, 64, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 16, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 16, 55, 55), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_1_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 1))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 55))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 5))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 11))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 11))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 11))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_1_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_10(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "b5aff2911c93aaf6", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_10: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_10: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_10: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_10: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_10: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape_1[0]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides_1[1]) and 48 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape_1[1]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape_1[1]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_10_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_10.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 48, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((192, 48, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 192, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 192, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_10_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 24))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_10_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_11(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "18feb75fd3d0501f", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_11: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_11: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_11: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_11: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_11: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape_1[0]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.shape[0] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape_1[2]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape_1[3]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides_1[3]) and 3 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides_1[2]) and 9 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides_1[1]) and 432 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape_1[1]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape_1[1]) == 192, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.shape[1] has an unsatisfied constraint: 192 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_11_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_11.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 48, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((192, 48, 3, 3), data=p1_1)
    p2_2 = T.decl_buffer((1, 192, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 192, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_11_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 6))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_11_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_12(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "58d326dd1757a12b", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_12: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_12: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_12: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_12: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_12: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape_1[1]) == 384, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.shape[1] has an unsatisfied constraint: 384 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape_1[0]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape_1[1]) == 384, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.shape[1] has an unsatisfied constraint: 384 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides_1[1]) and 384 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_12_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_12.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 384, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((48, 384, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 48, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 48, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_12_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 6))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_12_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_13(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "23c87e75cbef6a38", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_13: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_13: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_13: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_13: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_13: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape_1[1]) == 384, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.shape[1] has an unsatisfied constraint: 384 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape_1[0]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape_1[1]) == 384, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.shape[1] has an unsatisfied constraint: 384 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides_1[1]) and 384 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_13_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_13.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 384, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((64, 384, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 64, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 64, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_13_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 8))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_13_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_14(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "b03a1b2d7f385878", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_14: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_14: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_14: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_14: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_14: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape_1[0]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides_1[1]) and 64 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_14_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_14.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 64, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((256, 64, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 256, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 256, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_14_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 16))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 16))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 16))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 16))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_14_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_15(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "2e54fb706cb996e0", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_15: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_15: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_15: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_15: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_15: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape_1[0]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape_1[2]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape_1[3]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides_1[3]) and 3 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides_1[2]) and 9 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides_1[1]) and 576 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_15_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_15.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 64, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((256, 64, 3, 3), data=p1_1)
    p2_2 = T.decl_buffer((1, 256, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 256, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_15_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 8))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_15_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_16(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "e727382fc7eb9876", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_16: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_16: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_16: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_16: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_16: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape_1[1]) == 512, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape_1[0]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape_1[1]) == 512, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides_1[1]) and 512 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_16_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_16.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 512, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((64, 512, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 64, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 64, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_16_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 4))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 16))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 16))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 16))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_16_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_17(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "d6edcc9be32c731a", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_17: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_17: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_17: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_17: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_17: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape_1[1]) == 512, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape_1[0]) == 1000, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape_1[1]) == 512, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides_1[1]) and 512 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_17_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_17.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 512, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((1000, 512, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 1000, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 1000, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_17_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 100))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 10))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 10))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 10))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_17_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_2(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "883ed51446696c55", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_2: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_2: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_2: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_2: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_2: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape_1[0]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides_1[1]) and 16 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_2_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_2.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 16, 55, 55), data=p0_1)
    p1_2 = T.decl_buffer((64, 16, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 64, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 64, 55, 55), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_2_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 2))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 11))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 11))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 5))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 5))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 5))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 5))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 5))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 5))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_2_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_3(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "667bab68da4accb0", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_3: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_3: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_3: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_3: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_3: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape_1[0]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape_1[2]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape_1[3]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides_1[3]) and 3 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides_1[2]) and 9 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides_1[1]) and 144 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_3_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_3.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 16, 55, 55), data=p0_1)
    p1_2 = T.decl_buffer((64, 16, 3, 3), data=p1_1)
    p2_2 = T.decl_buffer((1, 64, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 64, 55, 55), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_3_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 2))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 55))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 55))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_3_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_4(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "73a35ed0ce3d7125", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_4: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_4: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_4: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_4: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_4: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape_1[0]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.shape[0] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides_1[1]) and 128 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape_1[1]) == 16, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.shape[1] has an unsatisfied constraint: 16 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_4_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_4.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 128, 55, 55), data=p0_1)
    p1_2 = T.decl_buffer((16, 128, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 16, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 16, 55, 55), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_4_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 1))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 55))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 5))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 8))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 11))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 8))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 11))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 8))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 11))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_4_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_5(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "6be4410bdb4dda12", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_5: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_5: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_5: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_5: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_5: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape_1[0]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides_1[1]) and 128 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_5_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_5.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 128, 27, 27), data=p0_1)
    p1_2 = T.decl_buffer((32, 128, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 32, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 32, 27, 27), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_5_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 1))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 9))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 3))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 3))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 3))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 3))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_5_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_6(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "4eb430fe1fadc439", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_6: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_6: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_6: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_6: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_6: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape_1[0]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides_1[1]) and 32 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_6_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_6.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 32, 27, 27), data=p0_1)
    p1_2 = T.decl_buffer((128, 32, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 128, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 128, 27, 27), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_6_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 4))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 9))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 3))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 3))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 3))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 3))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_6_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_7(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "52d3008c64eb3d8d", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_7: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_7: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_7: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_7: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_7: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape_1[0]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape_1[2]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape_1[3]) == 3, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides_1[3]) and 3 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides_1[2]) and 9 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides_1[1]) and 288 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_7_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_7.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 32, 27, 27), data=p0_1)
    p1_2 = T.decl_buffer((128, 32, 3, 3), data=p1_1)
    p2_2 = T.decl_buffer((1, 128, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 128, 27, 27), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_7_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 4))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 9))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 3))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 3))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 3))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 3))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_7_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_8(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "1211fe325c85e073", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_8: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_8: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_8: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_8: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_8: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape_1[0]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.shape[0] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides_1[1]) and 256 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape_1[1]) == 32, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.shape[1] has an unsatisfied constraint: 32 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_8_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_8.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 256, 27, 27), data=p0_1)
    p1_2 = T.decl_buffer((32, 256, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 32, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 32, 27, 27), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_8_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 1))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 9))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 3))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 32))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 3))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 32))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 3))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 32))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 3))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_8_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_9(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "98241612bcd25b5e", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 17)
    stack_tcode_1 = T.decl_buffer((T.uint64(17),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 17)
    assert num_args == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_9: num_args should be 4"
    arg_type_ids_1 = T.decl_buffer((4,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    p2_code: T.int32 = arg_type_ids_1[2]
    T_relu_code: T.int32 = arg_type_ids_1[3]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p2: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    T_relu: T.handle = T.tvm_struct_get(args, 3, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides)
    p2_1: T.handle("float32") = T.tvm_struct_get(p2, 0, 1, "handle")
    T.attr(p2_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape: T.handle("int64") = T.tvm_struct_get(p2, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_strides: T.handle("int64") = T.tvm_struct_get(p2, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_strides)
    T_relu_1: T.handle("float32") = T.tvm_struct_get(T_relu, 0, 1, "handle")
    T.attr(T_relu_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 2, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape)
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides: T.handle("int64") = T.tvm_struct_get(T_relu, 0, 3, "handle")
    tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_9: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_9: Expect arg[1] to be pointer"
    assert p2_code == 3 or p2_code == 13 or p2_code == 7 or p2_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_9: Expect arg[2] to be pointer"
    assert T_relu_code == 3 or T_relu_code == 13 or T_relu_code == 7 or T_relu_code == 4, "tvmgen_default_fused_nn_conv2d_add_nn_relu_9: Expect arg[3] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p0_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape_1[0]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.shape[0] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides_1[1]) and 256 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p1_strides_1[0]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p2, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.ndim is expected to equal 4"
    assert T.tvm_struct_get(p2, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p2, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p2, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_p2_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p2, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p2, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p2, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p2, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p2, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.p2.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p2, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_relu, 0, 4, "int32"), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_relu, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_relu, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_relu, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape_1[1]) == 48, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.shape[1] has an unsatisfied constraint: 48 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_conv2d_add_nn_relu_9_T_relu_strides_1[1]), "tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_relu, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_relu, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_relu, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_relu, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_conv2d_add_nn_relu_9.T_relu.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_relu, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 256, 13, 13), data=p0_1)
    p1_2 = T.decl_buffer((48, 256, 1, 1), data=p1_1)
    p2_2 = T.decl_buffer((1, 48, 1, 1), data=p2_1)
    T_relu_2 = T.decl_buffer((1, 48, 13, 13), data=T_relu_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_conv2d_add_nn_relu_9_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_relu_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, p1_1)
        stack_tcode_1[2] = 3
        T.tvm_struct_set(stack_value, 3, 12, p2_1)
        stack_tcode_1[3] = 3
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 3))
        stack_tcode_1[4] = 0
        T.tvm_struct_set(stack_value, 5, 12, T.Cast("int64", 13))
        stack_tcode_1[5] = 0
        T.tvm_struct_set(stack_value, 6, 12, T.Cast("int64", 13))
        stack_tcode_1[6] = 0
        T.tvm_struct_set(stack_value, 7, 12, T.Cast("int64", 16))
        stack_tcode_1[7] = 0
        T.tvm_struct_set(stack_value, 8, 12, T.Cast("int64", 1))
        stack_tcode_1[8] = 0
        T.tvm_struct_set(stack_value, 9, 12, T.Cast("int64", 1))
        stack_tcode_1[9] = 0
        T.tvm_struct_set(stack_value, 10, 12, T.Cast("int64", 16))
        stack_tcode_1[10] = 0
        T.tvm_struct_set(stack_value, 11, 12, T.Cast("int64", 1))
        stack_tcode_1[11] = 0
        T.tvm_struct_set(stack_value, 12, 12, T.Cast("int64", 1))
        stack_tcode_1[12] = 0
        T.tvm_struct_set(stack_value, 13, 12, T.Cast("int64", 16))
        stack_tcode_1[13] = 0
        T.tvm_struct_set(stack_value, 14, 12, T.Cast("int64", 1))
        stack_tcode_1[14] = 0
        T.tvm_struct_set(stack_value, 15, 12, T.Cast("int64", 1))
        stack_tcode_1[15] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_conv2d_add_nn_relu_9_kernel", stack_value, stack_tcode, 0, 16)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_global_avg_pool2d(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "ceb9f79daa7592c4", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 6)
    stack_tcode_1 = T.decl_buffer((T.uint64(6),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 6)
    assert num_args == 2, "tvmgen_default_fused_nn_global_avg_pool2d: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    adaptive_pool_avg_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    adaptive_pool_avg: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_global_avg_pool2d_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_global_avg_pool2d_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_global_avg_pool2d_p0_shape)
    tvmgen_default_fused_nn_global_avg_pool2d_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_global_avg_pool2d_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_global_avg_pool2d_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    adaptive_pool_avg_1: T.handle("float32") = T.tvm_struct_get(adaptive_pool_avg, 0, 1, "handle")
    T.attr(adaptive_pool_avg_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape: T.handle("int64") = T.tvm_struct_get(adaptive_pool_avg, 0, 2, "handle")
    tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape)
    tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_strides: T.handle("int64") = T.tvm_struct_get(adaptive_pool_avg, 0, 3, "handle")
    tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_global_avg_pool2d: Expect arg[0] to be pointer"
    assert adaptive_pool_avg_code == 3 or adaptive_pool_avg_code == 13 or adaptive_pool_avg_code == 7 or adaptive_pool_avg_code == 4, "tvmgen_default_fused_nn_global_avg_pool2d: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_global_avg_pool2d.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_global_avg_pool2d.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_global_avg_pool2d.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_global_avg_pool2d_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_p0_strides_1[1]), "tvmgen_default_fused_nn_global_avg_pool2d.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_global_avg_pool2d.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(adaptive_pool_avg, 0, 4, "int32"), "tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(adaptive_pool_avg, 0, 4, "int32"), "tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.ndim is expected to equal 4"
    assert T.tvm_struct_get(adaptive_pool_avg, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(adaptive_pool_avg, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(adaptive_pool_avg, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape_1[2]) == 1, "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape_1[3]) == 1, "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_global_avg_pool2d_adaptive_pool_avg_strides_1[1]), "tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(adaptive_pool_avg, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(adaptive_pool_avg, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(adaptive_pool_avg, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(adaptive_pool_avg, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(adaptive_pool_avg, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_global_avg_pool2d.adaptive_pool_avg.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(adaptive_pool_avg, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 1000, 13, 13), data=p0_1)
    adaptive_pool_avg_2 = T.decl_buffer((1, 1000, 1, 1), data=adaptive_pool_avg_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_global_avg_pool2d_compute_"):
        adaptive_pool_sum: T.handle("float32", "global") = T.TVMBackendAllocWorkspace(10, dev_id, T.uint64(4000), 2, 32)
        T.attr(adaptive_pool_sum, "storage_alignment", 64)
        if T.isnullptr(adaptive_pool_sum):
            T.tvm_throw_last_error()
        T.tvm_struct_set(stack_value, 0, 12, adaptive_pool_sum)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 32))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 32))
        stack_tcode_1[3] = 0
        T.tvm_struct_set(stack_value, 4, 12, T.Cast("int64", 32))
        stack_tcode_1[4] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_global_avg_pool2d_kernel", stack_value, stack_tcode, 0, 5)
        T.tvm_struct_set(stack_value, 0, 12, adaptive_pool_avg_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, adaptive_pool_sum)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 4))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_global_avg_pool2d_kernel_1", stack_value, stack_tcode, 0, 4)
        if T.TVMBackendFreeWorkspace(10, dev_id, adaptive_pool_sum) != 0:
            T.tvm_throw_last_error()
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "c010a08facda5dee", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 5)
    stack_tcode_1 = T.decl_buffer((T.uint64(5),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 5)
    assert num_args == 2, "tvmgen_default_fused_nn_max_pool2d: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    pool_max_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    pool_max: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_p0_shape)
    tvmgen_default_fused_nn_max_pool2d_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    pool_max_1: T.handle("float32") = T.tvm_struct_get(pool_max, 0, 1, "handle")
    T.attr(pool_max_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_pool_max_shape: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_pool_max_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_pool_max_shape)
    tvmgen_default_fused_nn_max_pool2d_pool_max_strides: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_pool_max_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_pool_max_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_max_pool2d: Expect arg[0] to be pointer"
    assert pool_max_code == 3 or pool_max_code == 13 or pool_max_code == 7 or pool_max_code == 4, "tvmgen_default_fused_nn_max_pool2d: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_max_pool2d.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_shape_1[2]) == 112, "Argument tvmgen_default_fused_nn_max_pool2d.p0.shape[2] has an unsatisfied constraint: 112 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_shape_1[3]) == 112, "Argument tvmgen_default_fused_nn_max_pool2d.p0.shape[3] has an unsatisfied constraint: 112 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_strides_1[3]) and 112 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_strides_1[2]) and 12544 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_p0_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d.pool_max.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d.pool_max.ndim is expected to equal 4"
    assert T.tvm_struct_get(pool_max, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(pool_max, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(pool_max, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d.pool_max.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_pool_max_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_shape_1[1]) == 64, "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_pool_max_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_pool_max_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_pool_max_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_pool_max_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_pool_max_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d.pool_max.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(pool_max, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(pool_max, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(pool_max, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_max_pool2d.pool_max.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(pool_max, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 64, 112, 112), data=p0_1)
    pool_max_2 = T.decl_buffer((1, 64, 55, 55), data=pool_max_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_max_pool2d_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, p0_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, pool_max_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 757))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_max_pool2d_kernel", stack_value, stack_tcode, 0, 4)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_1(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "419cbc8947725b20", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 5)
    stack_tcode_1 = T.decl_buffer((T.uint64(5),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 5)
    assert num_args == 2, "tvmgen_default_fused_nn_max_pool2d_1: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    pool_max_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    pool_max: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_1_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_1_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_1_p0_shape)
    tvmgen_default_fused_nn_max_pool2d_1_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_1_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_1_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    pool_max_1: T.handle("float32") = T.tvm_struct_get(pool_max, 0, 1, "handle")
    T.attr(pool_max_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape)
    tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_max_pool2d_1: Expect arg[0] to be pointer"
    assert pool_max_code == 3 or pool_max_code == 13 or pool_max_code == 7 or pool_max_code == 4, "tvmgen_default_fused_nn_max_pool2d_1: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_1.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_1.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d_1.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_shape_1[2]) == 55, "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.shape[2] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_shape_1[3]) == 55, "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.shape[3] has an unsatisfied constraint: 55 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_1_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_strides_1[3]) and 55 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_strides_1[2]) and 3025 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_p0_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d_1.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d_1.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_1.pool_max.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_1.pool_max.ndim is expected to equal 4"
    assert T.tvm_struct_get(pool_max, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(pool_max, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(pool_max, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d_1.pool_max.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape_1[1]) == 128, "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_1_pool_max_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_1_pool_max_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d_1.pool_max.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(pool_max, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(pool_max, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(pool_max, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_max_pool2d_1.pool_max.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(pool_max, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 128, 55, 55), data=p0_1)
    pool_max_2 = T.decl_buffer((1, 128, 27, 27), data=pool_max_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_max_pool2d_1_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, p0_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, pool_max_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 365))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_max_pool2d_1_kernel", stack_value, stack_tcode, 0, 4)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_2(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "1399d6502d75c7d9", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 5)
    stack_tcode_1 = T.decl_buffer((T.uint64(5),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 5)
    assert num_args == 2, "tvmgen_default_fused_nn_max_pool2d_2: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    pool_max_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    pool_max: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_2_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_2_p0_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_2_p0_shape)
    tvmgen_default_fused_nn_max_pool2d_2_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_2_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_2_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    pool_max_1: T.handle("float32") = T.tvm_struct_get(pool_max, 0, 1, "handle")
    T.attr(pool_max_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 2, "handle")
    tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape_1 = T.decl_buffer((4,), "int64", data=tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape)
    tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides: T.handle("int64") = T.tvm_struct_get(pool_max, 0, 3, "handle")
    tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_max_pool2d_2: Expect arg[0] to be pointer"
    assert pool_max_code == 3 or pool_max_code == 13 or pool_max_code == 7 or pool_max_code == 4, "tvmgen_default_fused_nn_max_pool2d_2: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_2.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_2.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d_2.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_p0_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_shape_1[2]) == 27, "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.shape[2] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_p0_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_shape_1[3]) == 27, "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.shape[3] has an unsatisfied constraint: 27 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_p0_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_2_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_strides_1[3]) and 27 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_strides_1[2]) and 729 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_p0_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d_2.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d_2.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_2.pool_max.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(pool_max, 0, 4, "int32"), "tvmgen_default_fused_nn_max_pool2d_2.pool_max.ndim is expected to equal 4"
    assert T.tvm_struct_get(pool_max, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(pool_max, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(pool_max, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_max_pool2d_2.pool_max.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape_1[1]) == 256, "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape[1])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape_1[2]) == 13, "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.shape[2] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape[2])"
    assert T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape_1[3]) == 13, "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.shape[3] has an unsatisfied constraint: 13 == T.Cast(\"int32\", tvmgen_default_fused_nn_max_pool2d_2_pool_max_shape[3])"
    if not T.isnullptr(tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides_1[3]) and 13 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides_1[2]) and 169 == T.Cast("int32", tvmgen_default_fused_nn_max_pool2d_2_pool_max_strides_1[1]), "tvmgen_default_fused_nn_max_pool2d_2.pool_max.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(pool_max, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(pool_max, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(pool_max, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(pool_max, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_max_pool2d_2.pool_max.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(pool_max, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 256, 27, 27), data=p0_1)
    pool_max_2 = T.decl_buffer((1, 256, 13, 13), data=pool_max_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_max_pool2d_2_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, p0_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, pool_max_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 169))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 256))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_max_pool2d_2_kernel", stack_value, stack_tcode, 0, 4)
    T.ret(0)
[23:18:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_softmax(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "hash": "65d167682acf2126", "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.noalias": T.bool(True)})
    stack_tcode: T.handle("int32") = T.tvm_stack_alloca("arg_tcode", 5)
    stack_tcode_1 = T.decl_buffer((T.uint64(5),), "int32", data=stack_tcode)
    stack_value: T.handle = T.tvm_stack_alloca("arg_value", 5)
    assert num_args == 2, "tvmgen_default_fused_nn_softmax: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_softmax_norm_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_softmax_norm: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_softmax_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    tvmgen_default_fused_nn_softmax_p0_shape_1 = T.decl_buffer((2,), "int64", data=tvmgen_default_fused_nn_softmax_p0_shape)
    tvmgen_default_fused_nn_softmax_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    tvmgen_default_fused_nn_softmax_p0_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_softmax_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_softmax_norm_1: T.handle("float32") = T.tvm_struct_get(T_softmax_norm, 0, 1, "handle")
    T.attr(T_softmax_norm_1, "storage_alignment", 64)
    tvmgen_default_fused_nn_softmax_T_softmax_norm_shape: T.handle("int64") = T.tvm_struct_get(T_softmax_norm, 0, 2, "handle")
    tvmgen_default_fused_nn_softmax_T_softmax_norm_shape_1 = T.decl_buffer((2,), "int64", data=tvmgen_default_fused_nn_softmax_T_softmax_norm_shape)
    tvmgen_default_fused_nn_softmax_T_softmax_norm_strides: T.handle("int64") = T.tvm_struct_get(T_softmax_norm, 0, 3, "handle")
    tvmgen_default_fused_nn_softmax_T_softmax_norm_strides_1 = T.decl_buffer((0,), "int64", data=tvmgen_default_fused_nn_softmax_T_softmax_norm_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "tvmgen_default_fused_nn_softmax: Expect arg[0] to be pointer"
    assert T_softmax_norm_code == 3 or T_softmax_norm_code == 13 or T_softmax_norm_code == 7 or T_softmax_norm_code == 4, "tvmgen_default_fused_nn_softmax: Expect arg[1] to be pointer"
    assert 2 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_softmax.p0.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(p0, 0, 4, "int32"), "tvmgen_default_fused_nn_softmax.p0.ndim is expected to equal 2"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_softmax.p0.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_softmax_p0_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_softmax.p0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_softmax_p0_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_softmax_p0_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_softmax.p0.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_softmax_p0_shape[1])"
    if not T.isnullptr(tvmgen_default_fused_nn_softmax_p0_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_softmax_p0_strides_1[1]), "tvmgen_default_fused_nn_softmax.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_softmax.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_softmax.p0.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(T_softmax_norm, 0, 4, "int32"), "tvmgen_default_fused_nn_softmax.T_softmax_norm.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(T_softmax_norm, 0, 4, "int32"), "tvmgen_default_fused_nn_softmax.T_softmax_norm.ndim is expected to equal 2"
    assert T.tvm_struct_get(T_softmax_norm, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_softmax_norm, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_softmax_norm, 0, 7, "uint16") == T.uint16(1), "tvmgen_default_fused_nn_softmax.T_softmax_norm.dtype is expected to be float32"
    assert T.Cast("int32", tvmgen_default_fused_nn_softmax_T_softmax_norm_shape_1[0]) == 1, "Argument tvmgen_default_fused_nn_softmax.T_softmax_norm.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", tvmgen_default_fused_nn_softmax_T_softmax_norm_shape[0])"
    assert T.Cast("int32", tvmgen_default_fused_nn_softmax_T_softmax_norm_shape_1[1]) == 1000, "Argument tvmgen_default_fused_nn_softmax.T_softmax_norm.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", tvmgen_default_fused_nn_softmax_T_softmax_norm_shape[1])"
    if not T.isnullptr(tvmgen_default_fused_nn_softmax_T_softmax_norm_strides):
        assert 1 == T.Cast("int32", tvmgen_default_fused_nn_softmax_T_softmax_norm_strides_1[1]), "tvmgen_default_fused_nn_softmax.T_softmax_norm.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_softmax_norm, 0, 8, "uint64"), "Argument tvmgen_default_fused_nn_softmax.T_softmax_norm.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_softmax_norm, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_softmax_norm, 0, 10, "int32") == 10, "Argument tvmgen_default_fused_nn_softmax.T_softmax_norm.device_type has an unsatisfied constraint: 10 == T.tvm_struct_get(T_softmax_norm, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_softmax_norm, 0, 9, "int32"), "Argument tvmgen_default_fused_nn_softmax.T_softmax_norm.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_softmax_norm, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1, 1000), data=p0_1)
    T_softmax_norm_2 = T.decl_buffer((1, 1000), data=T_softmax_norm_1)
    T.tvm_struct_set(stack_value, 0, 12, T.Cast("int64", 10))
    stack_tcode_1[0] = 0
    T.tvm_struct_set(stack_value, 1, 12, T.Cast("int64", dev_id))
    stack_tcode_1[1] = 0
    T.call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2)
    with T.attr(0, "compute_scope", "tvmgen_default_fused_nn_softmax_compute_"):
        T.tvm_struct_set(stack_value, 0, 12, T_softmax_norm_1)
        stack_tcode_1[0] = 3
        T.tvm_struct_set(stack_value, 1, 12, p0_1)
        stack_tcode_1[1] = 3
        T.tvm_struct_set(stack_value, 2, 12, T.Cast("int64", 1))
        stack_tcode_1[2] = 0
        T.tvm_struct_set(stack_value, 3, 12, T.Cast("int64", 64))
        stack_tcode_1[3] = 0
        T.call_packed_lowered("tvmgen_default_fused_nn_softmax_kernel", stack_value, stack_tcode, 0, 4)
    T.ret(0)
--------------------------------------------------
Network Name         Mean Inference Time (std dev)
--------------------------------------------------
squeezenet_v1.1      4.66 ms             (0.48 ms)
