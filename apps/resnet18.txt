[23:07:43] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 3, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 3, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((3,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        p1_3 = T.Buffer((1,), data=p1_1)
        T_add_2[0:3] = p0_2[0:3] + T.Broadcast(p1_3[0], 3)
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 3, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 3, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((3,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        T_sqrt_2[0:3] = T.call_llvm_pure_intrin("float32x3", "llvm.sqrt", T.uint32(1), p0_2[0:3])
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 3, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 3, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((3,), data=p1_1)
    T_divide_2 = T.decl_buffer((3,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        p0_3 = T.Buffer((1,), data=p0_1)
        T_divide_2[0:3] = T.Broadcast(p0_3[0], 3) / p1_2[0:3]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((3, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(3):
            T_expand_dims_3 = T.Buffer((3,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 3, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 3, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_negative_2 = T.decl_buffer((3,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        T_negative_2[0:3] = T.Broadcast(T.float32(0), 3) - p0_2[0:3]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 3, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 3, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    p1_2 = T.decl_buffer((3,), data=p1_1)
    T_multiply_2 = T.decl_buffer((3,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        T_multiply_2[0:3] = p0_2[0:3] * p1_2[0:3]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 3, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 3, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 3, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    p1_2 = T.decl_buffer((3,), data=p1_1)
    T_add_2 = T.decl_buffer((3,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        T_add_2[0:3] = p0_2[0:3] + p1_2[0:3]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((3, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(3):
            T_expand_dims_3 = T.Buffer((3,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:44] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:45] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 64, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 64, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((64,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_divide_2 = T.decl_buffer((64,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 64, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 64, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_negative_2 = T.decl_buffer((64,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_multiply_2 = T.decl_buffer((64,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 64, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 64, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 64, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    p1_2 = T.decl_buffer((64,), data=p1_1)
    T_add_2 = T.decl_buffer((64,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:46] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 128, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 128, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((128,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_divide_2 = T.decl_buffer((128,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 128, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 128, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_negative_2 = T.decl_buffer((128,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 128, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 128, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 128, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((128,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_divide_2 = T.decl_buffer((128,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 128, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 128, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_negative_2 = T.decl_buffer((128,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 128, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 128, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 128, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((128,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_divide_2 = T.decl_buffer((128,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:47] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 128, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 128, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_negative_2 = T.decl_buffer((128,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 128, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 128, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 128, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((128,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_divide_2 = T.decl_buffer((128,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 128, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 128, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_negative_2 = T.decl_buffer((128,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_multiply_2 = T.decl_buffer((128,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 128, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 128, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 128, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    p1_2 = T.decl_buffer((128,), data=p1_1)
    T_add_2 = T.decl_buffer((128,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 256, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 256, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((256,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_divide_2 = T.decl_buffer((256,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 256, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 256, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_negative_2 = T.decl_buffer((256,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:48] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 256, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 256, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 256, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((256,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_divide_2 = T.decl_buffer((256,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 256, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 256, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_negative_2 = T.decl_buffer((256,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 256, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 256, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 256, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((256,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_divide_2 = T.decl_buffer((256,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 256, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 256, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_negative_2 = T.decl_buffer((256,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 256, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:49] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 256, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 256, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((256,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_divide_2 = T.decl_buffer((256,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 256, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 256, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_negative_2 = T.decl_buffer((256,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_multiply_2 = T.decl_buffer((256,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 256, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 256, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 256, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    p1_2 = T.decl_buffer((256,), data=p1_1)
    T_add_2 = T.decl_buffer((256,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 512, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 512, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((512,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 512, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 512, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_divide_2 = T.decl_buffer((512,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 512, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 512, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_negative_2 = T.decl_buffer((512,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 512, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 512, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 512, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((512,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 512, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 512, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_divide_2 = T.decl_buffer((512,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:50] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 512, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 512, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_negative_2 = T.decl_buffer((512,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 512, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 512, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 512, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((512,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 512, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 512, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_divide_2 = T.decl_buffer((512,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 512, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 512, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_negative_2 = T.decl_buffer((512,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 512, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 0"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p1_3 = T.Buffer((1,), data=p1_1)
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + T.Broadcast(p1_3[0], 16)
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_sqrt(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_sqrt: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_sqrt_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_sqrt: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_sqrt_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_sqrt_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_p0_shape)
    intrp_fused_sqrt_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_sqrt_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_sqrt_1: T.handle("float32") = T.tvm_struct_get(T_sqrt, 0, 1, "handle")
    T.attr(T_sqrt_1, "storage_alignment", 64)
    intrp_fused_sqrt_T_sqrt_shape: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 2, "handle")
    intrp_fused_sqrt_T_sqrt_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_sqrt_T_sqrt_shape)
    intrp_fused_sqrt_T_sqrt_strides: T.handle("int64") = T.tvm_struct_get(T_sqrt, 0, 3, "handle")
    intrp_fused_sqrt_T_sqrt_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_sqrt_T_sqrt_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_sqrt: Expect arg[0] to be pointer"
    assert T_sqrt_code == 3 or T_sqrt_code == 13 or T_sqrt_code == 7 or T_sqrt_code == 4, "intrp_fused_sqrt: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_sqrt.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_p0_shape_1[0]) == 512, "Argument intrp_fused_sqrt.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_p0_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_p0_strides_1[0]), "intrp_fused_sqrt.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_sqrt.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_sqrt, 0, 4, "int32"), "intrp_fused_sqrt.T_sqrt.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_sqrt, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_sqrt, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_sqrt, 0, 7, "uint16") == T.uint16(1), "intrp_fused_sqrt.T_sqrt.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_sqrt_T_sqrt_shape_1[0]) == 512, "Argument intrp_fused_sqrt.T_sqrt.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_sqrt_T_sqrt_shape[0])"
    if not T.isnullptr(intrp_fused_sqrt_T_sqrt_strides):
        assert 1 == T.Cast("int32", intrp_fused_sqrt_T_sqrt_strides_1[0]), "intrp_fused_sqrt.T_sqrt.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, "uint64"), "Argument intrp_fused_sqrt.T_sqrt.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_sqrt, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_sqrt, 0, 10, "int32") == 1, "Argument intrp_fused_sqrt.T_sqrt.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_sqrt, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_sqrt, 0, 9, "int32"), "Argument intrp_fused_sqrt.T_sqrt.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_sqrt, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_sqrt_2 = T.decl_buffer((512,), data=T_sqrt_1)
    with T.attr(0, "compute_scope", "intrp_fused_sqrt_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_sqrt_2[cse_var_1:cse_var_1 + 16] = T.call_llvm_pure_intrin("float32x16", "llvm.sqrt", T.uint32(1), p0_2[cse_var_1:cse_var_1 + 16])
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert 0 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 0"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 512, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 512, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_divide_2 = T.decl_buffer((512,), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((1,), data=p0_1)
            T_divide_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(p0_3[0], 16) / p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:51] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_negative(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_negative: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_negative_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_negative: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_negative_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_negative_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_p0_shape)
    intrp_fused_negative_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_negative_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_negative_1: T.handle("float32") = T.tvm_struct_get(T_negative, 0, 1, "handle")
    T.attr(T_negative_1, "storage_alignment", 64)
    intrp_fused_negative_T_negative_shape: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 2, "handle")
    intrp_fused_negative_T_negative_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_negative_T_negative_shape)
    intrp_fused_negative_T_negative_strides: T.handle("int64") = T.tvm_struct_get(T_negative, 0, 3, "handle")
    intrp_fused_negative_T_negative_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_negative_T_negative_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_negative: Expect arg[0] to be pointer"
    assert T_negative_code == 3 or T_negative_code == 13 or T_negative_code == 7 or T_negative_code == 4, "intrp_fused_negative: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_negative.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_p0_shape_1[0]) == 512, "Argument intrp_fused_negative.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_p0_shape[0])"
    if not T.isnullptr(intrp_fused_negative_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_p0_strides_1[0]), "intrp_fused_negative.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_negative.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_negative.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_negative, 0, 4, "int32"), "intrp_fused_negative.T_negative.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_negative, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_negative, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_negative, 0, 7, "uint16") == T.uint16(1), "intrp_fused_negative.T_negative.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_negative_T_negative_shape_1[0]) == 512, "Argument intrp_fused_negative.T_negative.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_negative_T_negative_shape[0])"
    if not T.isnullptr(intrp_fused_negative_T_negative_strides):
        assert 1 == T.Cast("int32", intrp_fused_negative_T_negative_strides_1[0]), "intrp_fused_negative.T_negative.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, "uint64"), "Argument intrp_fused_negative.T_negative.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_negative, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_negative, 0, 10, "int32") == 1, "Argument intrp_fused_negative.T_negative.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_negative, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_negative, 0, 9, "int32"), "Argument intrp_fused_negative.T_negative.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_negative, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_negative_2 = T.decl_buffer((512,), data=T_negative_1)
    with T.attr(0, "compute_scope", "intrp_fused_negative_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_negative_2[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16) - p0_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_multiply_2 = T.decl_buffer((512,), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_multiply_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] * p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_add(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_add: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_add_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_add: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_add_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_add_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p0_shape)
    intrp_fused_add_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_add_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_add_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_add_p1_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_p1_shape)
    intrp_fused_add_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_add_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_p1_strides)
    T_add_1: T.handle("float32") = T.tvm_struct_get(T_add, 0, 1, "handle")
    T.attr(T_add_1, "storage_alignment", 64)
    intrp_fused_add_T_add_shape: T.handle("int64") = T.tvm_struct_get(T_add, 0, 2, "handle")
    intrp_fused_add_T_add_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_add_T_add_shape)
    intrp_fused_add_T_add_strides: T.handle("int64") = T.tvm_struct_get(T_add, 0, 3, "handle")
    intrp_fused_add_T_add_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_add_T_add_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_add: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_add: Expect arg[1] to be pointer"
    assert T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, "intrp_fused_add: Expect arg[2] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_add.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p0_shape_1[0]) == 512, "Argument intrp_fused_add.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p0_shape[0])"
    if not T.isnullptr(intrp_fused_add_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p0_strides_1[0]), "intrp_fused_add.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_add.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_add.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_add.p1.ndim is expected to equal 1"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_p1_shape_1[0]) == 512, "Argument intrp_fused_add.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_p1_shape[0])"
    if not T.isnullptr(intrp_fused_add_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_p1_strides_1[0]), "intrp_fused_add.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_add.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_add.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_add.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_add, 0, 4, "int32"), "intrp_fused_add.T_add.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_add, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, "uint16") == T.uint16(1), "intrp_fused_add.T_add.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_add_T_add_shape_1[0]) == 512, "Argument intrp_fused_add.T_add.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_add_T_add_shape[0])"
    if not T.isnullptr(intrp_fused_add_T_add_strides):
        assert 1 == T.Cast("int32", intrp_fused_add_T_add_strides_1[0]), "intrp_fused_add.T_add.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, "uint64"), "Argument intrp_fused_add.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_add, 0, 10, "int32") == 1, "Argument intrp_fused_add.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_add, 0, 9, "int32"), "Argument intrp_fused_add.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    p1_2 = T.decl_buffer((512,), data=p1_1)
    T_add_2 = T.decl_buffer((512,), data=T_add_1)
    with T.attr(0, "compute_scope", "intrp_fused_add_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            T_add_2[cse_var_1:cse_var_1 + 16] = p0_2[cse_var_1:cse_var_1 + 16] + p1_2[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 3, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 3, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((3,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        p0_3 = T.Buffer((3,), data=p0_1)
        T_squeeze_2[0:3] = p0_3[0:3]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((3, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(3):
            T_expand_dims_3 = T.Buffer((3,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 3, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 3, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 3, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((3, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((3, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(3):
            T_divide_3 = T.Buffer((3,), data=T_divide_1)
            p0_3 = T.Buffer((3,), data=p0_1)
            p1_3 = T.Buffer((3,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 3, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 7, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 7, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 7 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 49 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 147 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 7, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 7, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 7 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 49 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 147 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 3, 7, 7), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 3, 7, 7), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            for ax2 in range(7):
                cse_var_1: T.int32 = ax0_ax1_fused * 49 + ax2 * 7
                T_multiply_3 = T.Buffer((9408,), data=T_multiply_1)
                p0_3 = T.Buffer((9408,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 7] = p0_3[cse_var_1:cse_var_1 + 7] * T.Broadcast(p1_3[T.Div(ax0_ax1_fused, 3)], 7)
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 3, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((3,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((3, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(3):
            T_expand_dims_3 = T.Buffer((3,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 3, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 7, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 7, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 7 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 49 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 147 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 3, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 7, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 7, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 7 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 7 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 49 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 147 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 3, 7, 7), data=p0_1)
    p1_2 = T.decl_buffer((3, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 3, 7, 7), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(192):
            for ax2 in range(7):
                cse_var_1: T.int32 = ax0_ax1_fused * 49 + ax2 * 7
                T_multiply_3 = T.Buffer((9408,), data=T_multiply_1)
                p0_3 = T.Buffer((9408,), data=p0_1)
                p1_3 = T.Buffer((3,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 7] = p0_3[cse_var_1:cse_var_1 + 7] * T.Broadcast(p1_3[T.truncmod(ax0_ax1_fused, 3)], 7)
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 64, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((64, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_divide_3 = T.Buffer((64,), data=T_divide_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            p1_3 = T.Buffer((64,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:52] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(4096):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((36864,), data=T_multiply_1)
                p0_3 = T.Buffer((36864,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 6)], 3)
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(4096):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((36864,), data=T_multiply_1)
                p0_3 = T.Buffer((36864,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 63)], 3)
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 1, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 1, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 64 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 64 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 64, 1, 1), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(4096):
            T_multiply_3 = T.Buffer((4096,), data=T_multiply_1)
            p0_3 = T.Buffer((4096,), data=p0_1)
            p1_3 = T.Buffer((64,), data=p1_1)
            T_multiply_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] * p1_3[T.bitwise_and(ax0_ax1_fused, 63)]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 64, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((64, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_divide_3 = T.Buffer((64,), data=T_divide_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            p1_3 = T.Buffer((64,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(4096):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((36864,), data=T_multiply_1)
                p0_3 = T.Buffer((36864,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 6)], 3)
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 64, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((64, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(4096):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((36864,), data=T_multiply_1)
                p0_3 = T.Buffer((36864,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 63)], 3)
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 64, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 64, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((64,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(4):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((64,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 64, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 64, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 64, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((64, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_divide_3 = T.Buffer((64,), data=T_divide_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            p1_3 = T.Buffer((64,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 128, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 128, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((128,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((128,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:53] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((128, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(8192):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((73728,), data=T_multiply_1)
                p0_3 = T.Buffer((73728,), data=p0_1)
                p1_3 = T.Buffer((128,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 6)], 3)
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 64, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((128, 64, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(8192):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((73728,), data=T_multiply_1)
                p0_3 = T.Buffer((73728,), data=p0_1)
                p1_3 = T.Buffer((64,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 63)], 3)
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 64, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 1, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 1, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 64 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 64, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 64, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 64 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 64, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((64, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((128, 64, 1, 1), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(8192):
            T_multiply_3 = T.Buffer((8192,), data=T_multiply_1)
            p0_3 = T.Buffer((8192,), data=p0_1)
            p1_3 = T.Buffer((64,), data=p1_1)
            T_multiply_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] * p1_3[T.bitwise_and(ax0_ax1_fused, 63)]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 128, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 128, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((128,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((128,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 128, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((128, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_divide_3 = T.Buffer((128,), data=T_divide_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            p1_3 = T.Buffer((128,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 128, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 128, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((128,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((128,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 128, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 128, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((128, 128, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(16384):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((147456,), data=T_multiply_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                p1_3 = T.Buffer((128,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 7)], 3)
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 128, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 128, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 128, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((128, 128, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(16384):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((147456,), data=T_multiply_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                p1_3 = T.Buffer((128,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 127)], 3)
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 128, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 128, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((128,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(8):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((128,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 128, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 128, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 128, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((128, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_divide_3 = T.Buffer((128,), data=T_divide_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            p1_3 = T.Buffer((128,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 256, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 256, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((256,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((256,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:54] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 128, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 128, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((256, 128, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(32768):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((294912,), data=T_multiply_1)
                p0_3 = T.Buffer((294912,), data=p0_1)
                p1_3 = T.Buffer((256,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 7)], 3)
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 128, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 128, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((256, 128, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(32768):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((294912,), data=T_multiply_1)
                p0_3 = T.Buffer((294912,), data=p0_1)
                p1_3 = T.Buffer((128,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 127)], 3)
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 128, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 1, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 1, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 128 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 128, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 128, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 128 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 128, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((128, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((256, 128, 1, 1), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(32768):
            T_multiply_3 = T.Buffer((32768,), data=T_multiply_1)
            p0_3 = T.Buffer((32768,), data=p0_1)
            p1_3 = T.Buffer((128,), data=p1_1)
            T_multiply_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] * p1_3[T.bitwise_and(ax0_ax1_fused, 127)]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 256, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 256, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((256,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((256,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 256, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((256, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_divide_3 = T.Buffer((256,), data=T_divide_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            p1_3 = T.Buffer((256,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 256, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 256, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((256,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((256,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 256, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 256, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((256, 256, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(65536):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((589824,), data=T_multiply_1)
                p0_3 = T.Buffer((589824,), data=p0_1)
                p1_3 = T.Buffer((256,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 8)], 3)
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 256, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 256, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 256, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((256, 256, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(65536):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((589824,), data=T_multiply_1)
                p0_3 = T.Buffer((589824,), data=p0_1)
                p1_3 = T.Buffer((256,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 255)], 3)
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 256, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 256, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((256,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(16):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((256,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 256, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 256, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 256, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((256, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_divide_3 = T.Buffer((256,), data=T_divide_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            p1_3 = T.Buffer((256,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 512, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 512, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((512,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((512,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:55] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 256, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 256, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((512, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((512, 256, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(131072):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((1179648,), data=T_multiply_1)
                p0_3 = T.Buffer((1179648,), data=p0_1)
                p1_3 = T.Buffer((512,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 8)], 3)
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 256, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 256, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((512, 256, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(131072):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((1179648,), data=T_multiply_1)
                p0_3 = T.Buffer((1179648,), data=p0_1)
                p1_3 = T.Buffer((256,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 255)], 3)
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 256, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 1, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 1, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 256 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 256, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 256, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 1, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 256 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 256, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((256, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((512, 256, 1, 1), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(131072):
            T_multiply_3 = T.Buffer((131072,), data=T_multiply_1)
            p0_3 = T.Buffer((131072,), data=p0_1)
            p1_3 = T.Buffer((256,), data=p1_1)
            T_multiply_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] * p1_3[T.bitwise_and(ax0_ax1_fused, 255)]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 512, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 512, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((512,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((512,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_divide(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_divide: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_divide_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_divide: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_divide_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_divide_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p0_shape)
    intrp_fused_divide_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_divide_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_divide_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_divide_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_p1_shape)
    intrp_fused_divide_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_divide_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_p1_strides)
    T_divide_1: T.handle("float32") = T.tvm_struct_get(T_divide, 0, 1, "handle")
    T.attr(T_divide_1, "storage_alignment", 64)
    intrp_fused_divide_T_divide_shape: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 2, "handle")
    intrp_fused_divide_T_divide_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_divide_T_divide_shape)
    intrp_fused_divide_T_divide_strides: T.handle("int64") = T.tvm_struct_get(T_divide, 0, 3, "handle")
    intrp_fused_divide_T_divide_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_divide_T_divide_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_divide: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_divide: Expect arg[1] to be pointer"
    assert T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, "intrp_fused_divide: Expect arg[2] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_divide.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[0]) == 512, "Argument intrp_fused_divide.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[1]) == 1, "Argument intrp_fused_divide.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p0_shape_1[2]) == 1, "Argument intrp_fused_divide.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p0_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p0_strides_1[0]), "intrp_fused_divide.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_divide.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_divide.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[0]) == 512, "Argument intrp_fused_divide.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[1]) == 1, "Argument intrp_fused_divide.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_p1_shape_1[2]) == 1, "Argument intrp_fused_divide.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_p1_shape[2])"
    if not T.isnullptr(intrp_fused_divide_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_p1_strides_1[0]), "intrp_fused_divide.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_divide.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_divide.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_divide.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_divide, 0, 4, "int32"), "intrp_fused_divide.T_divide.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_divide, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, "uint16") == T.uint16(1), "intrp_fused_divide.T_divide.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[0]) == 512, "Argument intrp_fused_divide.T_divide.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[0])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[1]) == 1, "Argument intrp_fused_divide.T_divide.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[1])"
    assert T.Cast("int32", intrp_fused_divide_T_divide_shape_1[2]) == 1, "Argument intrp_fused_divide.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_divide_T_divide_shape[2])"
    if not T.isnullptr(intrp_fused_divide_T_divide_strides):
        assert 1 == T.Cast("int32", intrp_fused_divide_T_divide_strides_1[0]), "intrp_fused_divide.T_divide.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, "uint64"), "Argument intrp_fused_divide.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_divide, 0, 10, "int32") == 1, "Argument intrp_fused_divide.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_divide, 0, 9, "int32"), "Argument intrp_fused_divide.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    p1_2 = T.decl_buffer((512, 1, 1), data=p1_1)
    T_divide_2 = T.decl_buffer((512, 1, 1), data=T_divide_1)
    with T.attr(0, "compute_scope", "intrp_fused_divide_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_divide_3 = T.Buffer((512,), data=T_divide_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            p1_3 = T.Buffer((512,), data=p1_1)
            T_divide_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused] / p1_3[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_squeeze(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_squeeze: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_squeeze_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_squeeze: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_squeeze_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_squeeze_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_squeeze_p0_shape)
    intrp_fused_squeeze_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_squeeze_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_squeeze_1: T.handle("float32") = T.tvm_struct_get(T_squeeze, 0, 1, "handle")
    T.attr(T_squeeze_1, "storage_alignment", 64)
    intrp_fused_squeeze_T_squeeze_shape: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 2, "handle")
    intrp_fused_squeeze_T_squeeze_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_squeeze_T_squeeze_shape)
    intrp_fused_squeeze_T_squeeze_strides: T.handle("int64") = T.tvm_struct_get(T_squeeze, 0, 3, "handle")
    intrp_fused_squeeze_T_squeeze_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_squeeze_T_squeeze_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_squeeze: Expect arg[0] to be pointer"
    assert T_squeeze_code == 3 or T_squeeze_code == 13 or T_squeeze_code == 7 or T_squeeze_code == 4, "intrp_fused_squeeze: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_squeeze.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[0]) == 512, "Argument intrp_fused_squeeze.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[1]) == 1, "Argument intrp_fused_squeeze.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_squeeze_p0_shape_1[2]) == 1, "Argument intrp_fused_squeeze.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_squeeze_p0_shape[2])"
    if not T.isnullptr(intrp_fused_squeeze_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_p0_strides_1[0]), "intrp_fused_squeeze.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_squeeze.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(T_squeeze, 0, 4, "int32"), "intrp_fused_squeeze.T_squeeze.ndim is expected to equal 1"
    assert T.tvm_struct_get(T_squeeze, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_squeeze, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_squeeze, 0, 7, "uint16") == T.uint16(1), "intrp_fused_squeeze.T_squeeze.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_squeeze_T_squeeze_shape_1[0]) == 512, "Argument intrp_fused_squeeze.T_squeeze.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_squeeze_T_squeeze_shape[0])"
    if not T.isnullptr(intrp_fused_squeeze_T_squeeze_strides):
        assert 1 == T.Cast("int32", intrp_fused_squeeze_T_squeeze_strides_1[0]), "intrp_fused_squeeze.T_squeeze.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, "uint64"), "Argument intrp_fused_squeeze.T_squeeze.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_squeeze, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_squeeze, 0, 10, "int32") == 1, "Argument intrp_fused_squeeze.T_squeeze.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_squeeze, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_squeeze, 0, 9, "int32"), "Argument intrp_fused_squeeze.T_squeeze.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_squeeze, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_squeeze_2 = T.decl_buffer((512,), data=T_squeeze_1)
    with T.attr(0, "compute_scope", "intrp_fused_squeeze_compute_"):
        for ax0_outer in T.parallel(32):
            cse_var_1: T.int32 = ax0_outer * 16
            p0_3 = T.Buffer((512,), data=p0_1)
            T_squeeze_2[cse_var_1:cse_var_1 + 16] = p0_3[cse_var_1:cse_var_1 + 16]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 512, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 4"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[3]) == 1, "Argument intrp_fused_multiply.p1.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 512, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((512, 1, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((512, 512, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(262144):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((2359296,), data=T_multiply_1)
                p0_3 = T.Buffer((2359296,), data=p0_1)
                p1_3 = T.Buffer((512,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.shift_right(ax0_ax1_fused, 9)], 3)
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 3"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[0]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_2[ax0_ax1_fused]
    T.ret(0)
[23:07:56] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_multiply(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 3, "intrp_fused_multiply: num_args should be 3"
    arg_type_ids_1 = T.decl_buffer((3,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    p1_code: T.int32 = arg_type_ids_1[1]
    T_multiply_code: T.int32 = arg_type_ids_1[2]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    p1: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    T_multiply: T.handle = T.tvm_struct_get(args, 2, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_multiply_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_multiply_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_p0_shape)
    intrp_fused_multiply_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_multiply_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    p1_1: T.handle("float32") = T.tvm_struct_get(p1, 0, 1, "handle")
    T.attr(p1_1, "storage_alignment", 64)
    intrp_fused_multiply_p1_shape: T.handle("int64") = T.tvm_struct_get(p1, 0, 2, "handle")
    intrp_fused_multiply_p1_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_multiply_p1_shape)
    intrp_fused_multiply_p1_strides: T.handle("int64") = T.tvm_struct_get(p1, 0, 3, "handle")
    intrp_fused_multiply_p1_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_p1_strides)
    T_multiply_1: T.handle("float32") = T.tvm_struct_get(T_multiply, 0, 1, "handle")
    T.attr(T_multiply_1, "storage_alignment", 64)
    intrp_fused_multiply_T_multiply_shape: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 2, "handle")
    intrp_fused_multiply_T_multiply_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_multiply_T_multiply_shape)
    intrp_fused_multiply_T_multiply_strides: T.handle("int64") = T.tvm_struct_get(T_multiply, 0, 3, "handle")
    intrp_fused_multiply_T_multiply_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_multiply_T_multiply_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_multiply: Expect arg[0] to be pointer"
    assert p1_code == 3 or p1_code == 13 or p1_code == 7 or p1_code == 4, "intrp_fused_multiply: Expect arg[1] to be pointer"
    assert T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, "intrp_fused_multiply: Expect arg[2] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_multiply.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[0]) == 512, "Argument intrp_fused_multiply.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[1]) == 512, "Argument intrp_fused_multiply.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[2]) == 3, "Argument intrp_fused_multiply.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_p0_shape_1[3]) == 3, "Argument intrp_fused_multiply.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_p0_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_multiply_p0_strides_1[0]), "intrp_fused_multiply.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_multiply.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p1, 0, 4, "int32"), "intrp_fused_multiply.p1.ndim is expected to equal 3"
    assert T.tvm_struct_get(p1, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p1, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p1, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.p1.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[0]) == 512, "Argument intrp_fused_multiply.p1.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[1]) == 1, "Argument intrp_fused_multiply.p1.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_p1_shape_1[2]) == 1, "Argument intrp_fused_multiply.p1.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_multiply_p1_shape[2])"
    if not T.isnullptr(intrp_fused_multiply_p1_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_p1_strides_1[0]), "intrp_fused_multiply.p1.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p1, 0, 8, "uint64"), "Argument intrp_fused_multiply.p1.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p1, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p1, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.p1.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p1, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(p1, 0, 9, "int32"), "Argument intrp_fused_multiply.p1.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(p1, 0, 9, \"int32\")"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_multiply, 0, 4, "int32"), "intrp_fused_multiply.T_multiply.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_multiply, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, "uint16") == T.uint16(1), "intrp_fused_multiply.T_multiply.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[0]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[0])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[1]) == 512, "Argument intrp_fused_multiply.T_multiply.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[1])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[2]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[2])"
    assert T.Cast("int32", intrp_fused_multiply_T_multiply_shape_1[3]) == 3, "Argument intrp_fused_multiply.T_multiply.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_multiply_T_multiply_shape[3])"
    if not T.isnullptr(intrp_fused_multiply_T_multiply_strides):
        assert 1 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_multiply_T_multiply_strides_1[0]), "intrp_fused_multiply.T_multiply.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, "uint64"), "Argument intrp_fused_multiply.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_multiply, 0, 10, "int32") == 1, "Argument intrp_fused_multiply.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_multiply, 0, 9, "int32"), "Argument intrp_fused_multiply.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 512, 3, 3), data=p0_1)
    p1_2 = T.decl_buffer((512, 1, 1), data=p1_1)
    T_multiply_2 = T.decl_buffer((512, 512, 3, 3), data=T_multiply_1)
    with T.attr(0, "compute_scope", "intrp_fused_multiply_compute_"):
        for ax0_ax1_fused in T.parallel(262144):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 9 + ax2 * 3
                T_multiply_3 = T.Buffer((2359296,), data=T_multiply_1)
                p0_3 = T.Buffer((2359296,), data=p0_1)
                p1_3 = T.Buffer((512,), data=p1_1)
                T_multiply_3[cse_var_1:cse_var_1 + 3] = p0_3[cse_var_1:cse_var_1 + 3] * T.Broadcast(p1_3[T.bitwise_and(ax0_ax1_fused, 511)], 3)
    T.ret(0)
[23:07:58] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:07:58] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:07:58] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((6, 6, 64, 64), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(64):
            for ci in range(64):
                cse_var_45: T.int32 = co * 64 + ci
                cse_var_44: T.int32 = co * 576 + ci * 9
                cse_var_43: T.int32 = cse_var_45 + 98304
                cse_var_42: T.int32 = cse_var_45 + 94208
                cse_var_41: T.int32 = cse_var_45 + 90112
                cse_var_40: T.int32 = cse_var_45 + 86016
                cse_var_39: T.int32 = cse_var_45 + 81920
                cse_var_38: T.int32 = cse_var_45 + 8192
                cse_var_37: T.int32 = cse_var_45 + 77824
                cse_var_36: T.int32 = cse_var_45 + 73728
                cse_var_35: T.int32 = cse_var_45 + 69632
                cse_var_34: T.int32 = cse_var_45 + 65536
                cse_var_33: T.int32 = cse_var_45 + 61440
                cse_var_32: T.int32 = cse_var_45 + 57344
                cse_var_31: T.int32 = cse_var_45 + 53248
                cse_var_30: T.int32 = cse_var_45 + 49152
                cse_var_29: T.int32 = cse_var_45 + 45056
                cse_var_28: T.int32 = cse_var_45 + 40960
                cse_var_27: T.int32 = cse_var_45 + 4096
                cse_var_26: T.int32 = cse_var_45 + 36864
                cse_var_25: T.int32 = cse_var_45 + 32768
                cse_var_24: T.int32 = cse_var_45 + 28672
                cse_var_23: T.int32 = cse_var_45 + 24576
                cse_var_22: T.int32 = cse_var_45 + 20480
                cse_var_21: T.int32 = cse_var_45 + 16384
                cse_var_20: T.int32 = cse_var_45 + 143360
                cse_var_19: T.int32 = cse_var_45 + 139264
                cse_var_18: T.int32 = cse_var_45 + 135168
                cse_var_17: T.int32 = cse_var_45 + 131072
                cse_var_16: T.int32 = cse_var_45 + 126976
                cse_var_15: T.int32 = cse_var_45 + 122880
                cse_var_14: T.int32 = cse_var_45 + 12288
                cse_var_13: T.int32 = cse_var_45 + 118784
                cse_var_12: T.int32 = cse_var_45 + 114688
                cse_var_11: T.int32 = cse_var_45 + 110592
                cse_var_10: T.int32 = cse_var_45 + 106496
                cse_var_9: T.int32 = cse_var_45 + 102400
                cse_var_8: T.int32 = cse_var_44 + 8
                cse_var_7: T.int32 = cse_var_44 + 7
                cse_var_6: T.int32 = cse_var_44 + 6
                cse_var_5: T.int32 = cse_var_44 + 5
                cse_var_4: T.int32 = cse_var_44 + 4
                cse_var_3: T.int32 = cse_var_44 + 3
                cse_var_2: T.int32 = cse_var_44 + 2
                cse_var_1: T.int32 = cse_var_44 + 1
                transform_weight_3 = T.Buffer((147456,), data=transform_weight_1)
                transform_weight_3[cse_var_45] = T.float32(0)
                transform_weight_3[cse_var_27] = T.float32(0)
                transform_weight_3[cse_var_38] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_24] = T.float32(0)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_26] = T.float32(0)
                transform_weight_3[cse_var_28] = T.float32(0)
                transform_weight_3[cse_var_29] = T.float32(0)
                transform_weight_3[cse_var_30] = T.float32(0)
                transform_weight_3[cse_var_31] = T.float32(0)
                transform_weight_3[cse_var_32] = T.float32(0)
                transform_weight_3[cse_var_33] = T.float32(0)
                transform_weight_3[cse_var_34] = T.float32(0)
                transform_weight_3[cse_var_35] = T.float32(0)
                transform_weight_3[cse_var_36] = T.float32(0)
                transform_weight_3[cse_var_37] = T.float32(0)
                transform_weight_3[cse_var_39] = T.float32(0)
                transform_weight_3[cse_var_40] = T.float32(0)
                transform_weight_3[cse_var_41] = T.float32(0)
                transform_weight_3[cse_var_42] = T.float32(0)
                transform_weight_3[cse_var_43] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                p0_3 = T.Buffer((36864,), data=p0_1)
                transform_weight_3[cse_var_45] = transform_weight_3[cse_var_45] + p0_3[cse_var_44]
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.53333336114883423), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.13333334028720856), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.26666668057441711), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.26666668057441711), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = transform_weight_3[cse_var_22] + p0_3[cse_var_2]
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-1.0666667222976685), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.066666670143604279), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.53333336114883423), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.13333334028720856), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.53333336114883423), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.13333334028720856), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.26666668057441711), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.26666668057441711), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-1.0666667222976685), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.066666670143604279), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.53333336114883423), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.13333334028720856), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_8]
    T.ret(0)
[23:07:59] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 6, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 6, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 64, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 64, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((6, 6, 64, 64), data=p0_1)
    T_transpose_2 = T.decl_buffer((6, 6, 64, 64), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(36):
            for ax2, ax3_outer in T.grid(64, 4):
                cse_var_1: T.int32 = ax0_ax1_fused * 4096
                T_transpose_3 = T.Buffer((147456,), data=T_transpose_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 64 + ax3_outer * 16:cse_var_1 + ax2 * 64 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 1024 + ax2:cse_var_1 + ax3_outer * 1024 + ax2 + 1024:64]
    T.ret(0)
[23:07:59] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:07:59] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((6, 6, 64, 64), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(64):
            for ci in range(64):
                cse_var_45: T.int32 = co * 64 + ci
                cse_var_44: T.int32 = co * 576 + ci * 9
                cse_var_43: T.int32 = cse_var_45 + 98304
                cse_var_42: T.int32 = cse_var_45 + 94208
                cse_var_41: T.int32 = cse_var_45 + 90112
                cse_var_40: T.int32 = cse_var_45 + 86016
                cse_var_39: T.int32 = cse_var_45 + 81920
                cse_var_38: T.int32 = cse_var_45 + 8192
                cse_var_37: T.int32 = cse_var_45 + 77824
                cse_var_36: T.int32 = cse_var_45 + 73728
                cse_var_35: T.int32 = cse_var_45 + 69632
                cse_var_34: T.int32 = cse_var_45 + 65536
                cse_var_33: T.int32 = cse_var_45 + 61440
                cse_var_32: T.int32 = cse_var_45 + 57344
                cse_var_31: T.int32 = cse_var_45 + 53248
                cse_var_30: T.int32 = cse_var_45 + 49152
                cse_var_29: T.int32 = cse_var_45 + 45056
                cse_var_28: T.int32 = cse_var_45 + 40960
                cse_var_27: T.int32 = cse_var_45 + 4096
                cse_var_26: T.int32 = cse_var_45 + 36864
                cse_var_25: T.int32 = cse_var_45 + 32768
                cse_var_24: T.int32 = cse_var_45 + 28672
                cse_var_23: T.int32 = cse_var_45 + 24576
                cse_var_22: T.int32 = cse_var_45 + 20480
                cse_var_21: T.int32 = cse_var_45 + 16384
                cse_var_20: T.int32 = cse_var_45 + 143360
                cse_var_19: T.int32 = cse_var_45 + 139264
                cse_var_18: T.int32 = cse_var_45 + 135168
                cse_var_17: T.int32 = cse_var_45 + 131072
                cse_var_16: T.int32 = cse_var_45 + 126976
                cse_var_15: T.int32 = cse_var_45 + 122880
                cse_var_14: T.int32 = cse_var_45 + 12288
                cse_var_13: T.int32 = cse_var_45 + 118784
                cse_var_12: T.int32 = cse_var_45 + 114688
                cse_var_11: T.int32 = cse_var_45 + 110592
                cse_var_10: T.int32 = cse_var_45 + 106496
                cse_var_9: T.int32 = cse_var_45 + 102400
                cse_var_8: T.int32 = cse_var_44 + 8
                cse_var_7: T.int32 = cse_var_44 + 7
                cse_var_6: T.int32 = cse_var_44 + 6
                cse_var_5: T.int32 = cse_var_44 + 5
                cse_var_4: T.int32 = cse_var_44 + 4
                cse_var_3: T.int32 = cse_var_44 + 3
                cse_var_2: T.int32 = cse_var_44 + 2
                cse_var_1: T.int32 = cse_var_44 + 1
                transform_weight_3 = T.Buffer((147456,), data=transform_weight_1)
                transform_weight_3[cse_var_45] = T.float32(0)
                transform_weight_3[cse_var_27] = T.float32(0)
                transform_weight_3[cse_var_38] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_24] = T.float32(0)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_26] = T.float32(0)
                transform_weight_3[cse_var_28] = T.float32(0)
                transform_weight_3[cse_var_29] = T.float32(0)
                transform_weight_3[cse_var_30] = T.float32(0)
                transform_weight_3[cse_var_31] = T.float32(0)
                transform_weight_3[cse_var_32] = T.float32(0)
                transform_weight_3[cse_var_33] = T.float32(0)
                transform_weight_3[cse_var_34] = T.float32(0)
                transform_weight_3[cse_var_35] = T.float32(0)
                transform_weight_3[cse_var_36] = T.float32(0)
                transform_weight_3[cse_var_37] = T.float32(0)
                transform_weight_3[cse_var_39] = T.float32(0)
                transform_weight_3[cse_var_40] = T.float32(0)
                transform_weight_3[cse_var_41] = T.float32(0)
                transform_weight_3[cse_var_42] = T.float32(0)
                transform_weight_3[cse_var_43] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                p0_3 = T.Buffer((36864,), data=p0_1)
                transform_weight_3[cse_var_45] = transform_weight_3[cse_var_45] + p0_3[cse_var_44]
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.53333336114883423), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.13333334028720856), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.26666668057441711), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.26666668057441711), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = transform_weight_3[cse_var_22] + p0_3[cse_var_2]
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-1.0666667222976685), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.066666670143604279), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.53333336114883423), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.13333334028720856), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.53333336114883423), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.13333334028720856), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.26666668057441711), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.26666668057441711), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-1.0666667222976685), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.066666670143604279), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.53333336114883423), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.13333334028720856), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_8]
    T.ret(0)
[23:07:59] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 6, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 6, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 64, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 64, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((6, 6, 64, 64), data=p0_1)
    T_transpose_2 = T.decl_buffer((6, 6, 64, 64), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(36):
            for ax2, ax3_outer in T.grid(64, 4):
                cse_var_1: T.int32 = ax0_ax1_fused * 4096
                T_transpose_3 = T.Buffer((147456,), data=T_transpose_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 64 + ax3_outer * 16:cse_var_1 + ax2 * 64 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 1024 + ax2:cse_var_1 + ax3_outer * 1024 + ax2 + 1024:64]
    T.ret(0)
[23:07:59] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:00] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((6, 6, 64, 64), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(64):
            for ci in range(64):
                cse_var_45: T.int32 = co * 64 + ci
                cse_var_44: T.int32 = co * 576 + ci * 9
                cse_var_43: T.int32 = cse_var_45 + 98304
                cse_var_42: T.int32 = cse_var_45 + 94208
                cse_var_41: T.int32 = cse_var_45 + 90112
                cse_var_40: T.int32 = cse_var_45 + 86016
                cse_var_39: T.int32 = cse_var_45 + 81920
                cse_var_38: T.int32 = cse_var_45 + 8192
                cse_var_37: T.int32 = cse_var_45 + 77824
                cse_var_36: T.int32 = cse_var_45 + 73728
                cse_var_35: T.int32 = cse_var_45 + 69632
                cse_var_34: T.int32 = cse_var_45 + 65536
                cse_var_33: T.int32 = cse_var_45 + 61440
                cse_var_32: T.int32 = cse_var_45 + 57344
                cse_var_31: T.int32 = cse_var_45 + 53248
                cse_var_30: T.int32 = cse_var_45 + 49152
                cse_var_29: T.int32 = cse_var_45 + 45056
                cse_var_28: T.int32 = cse_var_45 + 40960
                cse_var_27: T.int32 = cse_var_45 + 4096
                cse_var_26: T.int32 = cse_var_45 + 36864
                cse_var_25: T.int32 = cse_var_45 + 32768
                cse_var_24: T.int32 = cse_var_45 + 28672
                cse_var_23: T.int32 = cse_var_45 + 24576
                cse_var_22: T.int32 = cse_var_45 + 20480
                cse_var_21: T.int32 = cse_var_45 + 16384
                cse_var_20: T.int32 = cse_var_45 + 143360
                cse_var_19: T.int32 = cse_var_45 + 139264
                cse_var_18: T.int32 = cse_var_45 + 135168
                cse_var_17: T.int32 = cse_var_45 + 131072
                cse_var_16: T.int32 = cse_var_45 + 126976
                cse_var_15: T.int32 = cse_var_45 + 122880
                cse_var_14: T.int32 = cse_var_45 + 12288
                cse_var_13: T.int32 = cse_var_45 + 118784
                cse_var_12: T.int32 = cse_var_45 + 114688
                cse_var_11: T.int32 = cse_var_45 + 110592
                cse_var_10: T.int32 = cse_var_45 + 106496
                cse_var_9: T.int32 = cse_var_45 + 102400
                cse_var_8: T.int32 = cse_var_44 + 8
                cse_var_7: T.int32 = cse_var_44 + 7
                cse_var_6: T.int32 = cse_var_44 + 6
                cse_var_5: T.int32 = cse_var_44 + 5
                cse_var_4: T.int32 = cse_var_44 + 4
                cse_var_3: T.int32 = cse_var_44 + 3
                cse_var_2: T.int32 = cse_var_44 + 2
                cse_var_1: T.int32 = cse_var_44 + 1
                transform_weight_3 = T.Buffer((147456,), data=transform_weight_1)
                transform_weight_3[cse_var_45] = T.float32(0)
                transform_weight_3[cse_var_27] = T.float32(0)
                transform_weight_3[cse_var_38] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_24] = T.float32(0)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_26] = T.float32(0)
                transform_weight_3[cse_var_28] = T.float32(0)
                transform_weight_3[cse_var_29] = T.float32(0)
                transform_weight_3[cse_var_30] = T.float32(0)
                transform_weight_3[cse_var_31] = T.float32(0)
                transform_weight_3[cse_var_32] = T.float32(0)
                transform_weight_3[cse_var_33] = T.float32(0)
                transform_weight_3[cse_var_34] = T.float32(0)
                transform_weight_3[cse_var_35] = T.float32(0)
                transform_weight_3[cse_var_36] = T.float32(0)
                transform_weight_3[cse_var_37] = T.float32(0)
                transform_weight_3[cse_var_39] = T.float32(0)
                transform_weight_3[cse_var_40] = T.float32(0)
                transform_weight_3[cse_var_41] = T.float32(0)
                transform_weight_3[cse_var_42] = T.float32(0)
                transform_weight_3[cse_var_43] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                p0_3 = T.Buffer((36864,), data=p0_1)
                transform_weight_3[cse_var_45] = transform_weight_3[cse_var_45] + p0_3[cse_var_44]
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.53333336114883423), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.13333334028720856), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.26666668057441711), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.26666668057441711), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = transform_weight_3[cse_var_22] + p0_3[cse_var_2]
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-1.0666667222976685), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.066666670143604279), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.53333336114883423), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.13333334028720856), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.53333336114883423), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.13333334028720856), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.26666668057441711), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.26666668057441711), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-1.0666667222976685), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.066666670143604279), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.53333336114883423), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.13333334028720856), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_8]
    T.ret(0)
[23:08:00] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 6, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 6, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 64, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 64, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((6, 6, 64, 64), data=p0_1)
    T_transpose_2 = T.decl_buffer((6, 6, 64, 64), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(36):
            for ax2, ax3_outer in T.grid(64, 4):
                cse_var_1: T.int32 = ax0_ax1_fused * 4096
                T_transpose_3 = T.Buffer((147456,), data=T_transpose_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 64 + ax3_outer * 16:cse_var_1 + ax2 * 64 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 1024 + ax2:cse_var_1 + ax3_outer * 1024 + ax2 + 1024:64]
    T.ret(0)
[23:08:00] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:00] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 6, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 64, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 64, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((6, 6, 64, 64), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(64):
            for ci in range(64):
                cse_var_45: T.int32 = co * 64 + ci
                cse_var_44: T.int32 = co * 576 + ci * 9
                cse_var_43: T.int32 = cse_var_45 + 98304
                cse_var_42: T.int32 = cse_var_45 + 94208
                cse_var_41: T.int32 = cse_var_45 + 90112
                cse_var_40: T.int32 = cse_var_45 + 86016
                cse_var_39: T.int32 = cse_var_45 + 81920
                cse_var_38: T.int32 = cse_var_45 + 8192
                cse_var_37: T.int32 = cse_var_45 + 77824
                cse_var_36: T.int32 = cse_var_45 + 73728
                cse_var_35: T.int32 = cse_var_45 + 69632
                cse_var_34: T.int32 = cse_var_45 + 65536
                cse_var_33: T.int32 = cse_var_45 + 61440
                cse_var_32: T.int32 = cse_var_45 + 57344
                cse_var_31: T.int32 = cse_var_45 + 53248
                cse_var_30: T.int32 = cse_var_45 + 49152
                cse_var_29: T.int32 = cse_var_45 + 45056
                cse_var_28: T.int32 = cse_var_45 + 40960
                cse_var_27: T.int32 = cse_var_45 + 4096
                cse_var_26: T.int32 = cse_var_45 + 36864
                cse_var_25: T.int32 = cse_var_45 + 32768
                cse_var_24: T.int32 = cse_var_45 + 28672
                cse_var_23: T.int32 = cse_var_45 + 24576
                cse_var_22: T.int32 = cse_var_45 + 20480
                cse_var_21: T.int32 = cse_var_45 + 16384
                cse_var_20: T.int32 = cse_var_45 + 143360
                cse_var_19: T.int32 = cse_var_45 + 139264
                cse_var_18: T.int32 = cse_var_45 + 135168
                cse_var_17: T.int32 = cse_var_45 + 131072
                cse_var_16: T.int32 = cse_var_45 + 126976
                cse_var_15: T.int32 = cse_var_45 + 122880
                cse_var_14: T.int32 = cse_var_45 + 12288
                cse_var_13: T.int32 = cse_var_45 + 118784
                cse_var_12: T.int32 = cse_var_45 + 114688
                cse_var_11: T.int32 = cse_var_45 + 110592
                cse_var_10: T.int32 = cse_var_45 + 106496
                cse_var_9: T.int32 = cse_var_45 + 102400
                cse_var_8: T.int32 = cse_var_44 + 8
                cse_var_7: T.int32 = cse_var_44 + 7
                cse_var_6: T.int32 = cse_var_44 + 6
                cse_var_5: T.int32 = cse_var_44 + 5
                cse_var_4: T.int32 = cse_var_44 + 4
                cse_var_3: T.int32 = cse_var_44 + 3
                cse_var_2: T.int32 = cse_var_44 + 2
                cse_var_1: T.int32 = cse_var_44 + 1
                transform_weight_3 = T.Buffer((147456,), data=transform_weight_1)
                transform_weight_3[cse_var_45] = T.float32(0)
                transform_weight_3[cse_var_27] = T.float32(0)
                transform_weight_3[cse_var_38] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_24] = T.float32(0)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_26] = T.float32(0)
                transform_weight_3[cse_var_28] = T.float32(0)
                transform_weight_3[cse_var_29] = T.float32(0)
                transform_weight_3[cse_var_30] = T.float32(0)
                transform_weight_3[cse_var_31] = T.float32(0)
                transform_weight_3[cse_var_32] = T.float32(0)
                transform_weight_3[cse_var_33] = T.float32(0)
                transform_weight_3[cse_var_34] = T.float32(0)
                transform_weight_3[cse_var_35] = T.float32(0)
                transform_weight_3[cse_var_36] = T.float32(0)
                transform_weight_3[cse_var_37] = T.float32(0)
                transform_weight_3[cse_var_39] = T.float32(0)
                transform_weight_3[cse_var_40] = T.float32(0)
                transform_weight_3[cse_var_41] = T.float32(0)
                transform_weight_3[cse_var_42] = T.float32(0)
                transform_weight_3[cse_var_43] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                p0_3 = T.Buffer((36864,), data=p0_1)
                transform_weight_3[cse_var_45] = transform_weight_3[cse_var_45] + p0_3[cse_var_44]
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(-1.0666667222976685), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(-1.0666667222976685), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44], T.float32(0.066666670143604279), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_44] * T.float32(0.066666670143604279), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.53333336114883423), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.13333334028720856), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(-1.0666667222976685), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.066666670143604279), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_27])
                transform_weight_3[cse_var_38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_38])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.26666668057441711), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.26666668057441711), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = transform_weight_3[cse_var_22] + p0_3[cse_var_2]
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(-1.0666667222976685), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(-1.0666667222976685), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.066666670143604279), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.066666670143604279), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.53333336114883423), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.53333336114883423), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.13333334028720856), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.13333334028720856), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.53333336114883423), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.13333334028720856), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.53333336114883423), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.53333336114883423), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.13333334028720856), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.13333334028720856), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_30])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(-1.0666667222976685), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.3333333432674408), T.float32(0.066666670143604279), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.26666668057441711), transform_weight_3[cse_var_36])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(-0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.26666668057441711), transform_weight_3[cse_var_43])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(-1.0666667222976685), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.26666668057441711), T.float32(0.066666670143604279), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(-1.0666667222976685), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.066666670143604279), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.53333336114883423), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.3333333432674408), T.float32(-0.13333334028720856), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(-0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.53333336114883423), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.26666668057441711), T.float32(-0.13333334028720856), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.53333336114883423), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.13333334028720856), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_24])
                transform_weight_3[cse_var_25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_25])
                transform_weight_3[cse_var_26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_26])
                transform_weight_3[cse_var_28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_28])
                transform_weight_3[cse_var_29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_29])
                transform_weight_3[cse_var_31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.3333333432674408), transform_weight_3[cse_var_31])
                transform_weight_3[cse_var_32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.3333333432674408), transform_weight_3[cse_var_32])
                transform_weight_3[cse_var_33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(-0.26666668057441711), transform_weight_3[cse_var_33])
                transform_weight_3[cse_var_34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.3333333432674408), T.float32(0.26666668057441711), transform_weight_3[cse_var_34])
                transform_weight_3[cse_var_35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_35])
                transform_weight_3[cse_var_37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_37])
                transform_weight_3[cse_var_39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_39])
                transform_weight_3[cse_var_40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_40])
                transform_weight_3[cse_var_41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(-0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_41])
                transform_weight_3[cse_var_42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_42])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.3333333432674408), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.3333333432674408), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(-0.26666668057441711), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.26666668057441711), T.float32(0.26666668057441711), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.3333333432674408), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.3333333432674408), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(-0.26666668057441711), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.26666668057441711), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_8]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 6, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 6, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 64, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 64, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 6, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 6 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 64, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 64 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 4096 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 24576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((6, 6, 64, 64), data=p0_1)
    T_transpose_2 = T.decl_buffer((6, 6, 64, 64), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(36):
            for ax2, ax3_outer in T.grid(64, 4):
                cse_var_1: T.int32 = ax0_ax1_fused * 4096
                T_transpose_3 = T.Buffer((147456,), data=T_transpose_1)
                p0_3 = T.Buffer((147456,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 64 + ax3_outer * 16:cse_var_1 + ax2 * 64 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 1024 + ax2:cse_var_1 + ax3_outer * 1024 + ax2 + 1024:64]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 64, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 64, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 64 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((64, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 64, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(64):
            T_expand_dims_3 = T.Buffer((64,), data=T_expand_dims_1)
            p0_3 = T.Buffer((64,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 128, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 128, 128), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(128):
            for ci in range(128):
                cse_var_25: T.int32 = co * 128 + ci
                cse_var_24: T.int32 = co * 1152 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 98304
                cse_var_22: T.int32 = cse_var_25 + 81920
                cse_var_21: T.int32 = cse_var_25 + 65536
                cse_var_20: T.int32 = cse_var_25 + 49152
                cse_var_19: T.int32 = cse_var_25 + 32768
                cse_var_18: T.int32 = cse_var_25 + 245760
                cse_var_17: T.int32 = cse_var_25 + 229376
                cse_var_16: T.int32 = cse_var_25 + 212992
                cse_var_15: T.int32 = cse_var_25 + 196608
                cse_var_14: T.int32 = cse_var_25 + 180224
                cse_var_13: T.int32 = cse_var_25 + 163840
                cse_var_12: T.int32 = cse_var_25 + 16384
                cse_var_11: T.int32 = cse_var_25 + 147456
                cse_var_10: T.int32 = cse_var_25 + 131072
                cse_var_9: T.int32 = cse_var_25 + 114688
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((262144,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                p0_3 = T.Buffer((147456,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_2]
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_8]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 128, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 128, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 128, 128), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 128, 128), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(128, 8):
                cse_var_1: T.int32 = ax0_ax1_fused * 16384
                T_transpose_3 = T.Buffer((262144,), data=T_transpose_1)
                p0_3 = T.Buffer((262144,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 128 + ax3_outer * 16:cse_var_1 + ax2 * 128 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 2048 + ax2:cse_var_1 + ax3_outer * 2048 + ax2 + 2048:128]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 128, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 128, 128), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(128):
            for ci in range(128):
                cse_var_25: T.int32 = co * 128 + ci
                cse_var_24: T.int32 = co * 1152 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 98304
                cse_var_22: T.int32 = cse_var_25 + 81920
                cse_var_21: T.int32 = cse_var_25 + 65536
                cse_var_20: T.int32 = cse_var_25 + 49152
                cse_var_19: T.int32 = cse_var_25 + 32768
                cse_var_18: T.int32 = cse_var_25 + 245760
                cse_var_17: T.int32 = cse_var_25 + 229376
                cse_var_16: T.int32 = cse_var_25 + 212992
                cse_var_15: T.int32 = cse_var_25 + 196608
                cse_var_14: T.int32 = cse_var_25 + 180224
                cse_var_13: T.int32 = cse_var_25 + 163840
                cse_var_12: T.int32 = cse_var_25 + 16384
                cse_var_11: T.int32 = cse_var_25 + 147456
                cse_var_10: T.int32 = cse_var_25 + 131072
                cse_var_9: T.int32 = cse_var_25 + 114688
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((262144,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                p0_3 = T.Buffer((147456,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_2]
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_8]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 128, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 128, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 128, 128), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 128, 128), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(128, 8):
                cse_var_1: T.int32 = ax0_ax1_fused * 16384
                T_transpose_3 = T.Buffer((262144,), data=T_transpose_1)
                p0_3 = T.Buffer((262144,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 128 + ax3_outer * 16:cse_var_1 + ax2 * 128 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 2048 + ax2:cse_var_1 + ax3_outer * 2048 + ax2 + 2048:128]
    T.ret(0)
[23:08:01] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 1152 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 128, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 128, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 128, 128), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(128):
            for ci in range(128):
                cse_var_25: T.int32 = co * 128 + ci
                cse_var_24: T.int32 = co * 1152 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 98304
                cse_var_22: T.int32 = cse_var_25 + 81920
                cse_var_21: T.int32 = cse_var_25 + 65536
                cse_var_20: T.int32 = cse_var_25 + 49152
                cse_var_19: T.int32 = cse_var_25 + 32768
                cse_var_18: T.int32 = cse_var_25 + 245760
                cse_var_17: T.int32 = cse_var_25 + 229376
                cse_var_16: T.int32 = cse_var_25 + 212992
                cse_var_15: T.int32 = cse_var_25 + 196608
                cse_var_14: T.int32 = cse_var_25 + 180224
                cse_var_13: T.int32 = cse_var_25 + 163840
                cse_var_12: T.int32 = cse_var_25 + 16384
                cse_var_11: T.int32 = cse_var_25 + 147456
                cse_var_10: T.int32 = cse_var_25 + 131072
                cse_var_9: T.int32 = cse_var_25 + 114688
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((262144,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                p0_3 = T.Buffer((147456,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_2]
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = transform_weight_3[cse_var_15] + p0_3[cse_var_6]
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_23])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_8]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 128, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 128, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 128, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 128 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 16384 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 128, 128), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 128, 128), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(128, 8):
                cse_var_1: T.int32 = ax0_ax1_fused * 16384
                T_transpose_3 = T.Buffer((262144,), data=T_transpose_1)
                p0_3 = T.Buffer((262144,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 128 + ax3_outer * 16:cse_var_1 + ax2 * 128 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 2048 + ax2:cse_var_1 + ax3_outer * 2048 + ax2 + 2048:128]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 128, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 128, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 128 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((128, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 128, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(128):
            T_expand_dims_3 = T.Buffer((128,), data=T_expand_dims_1)
            p0_3 = T.Buffer((128,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 256, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 256, 256), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(256):
            for ci in range(256):
                cse_var_25: T.int32 = co * 256 + ci
                cse_var_24: T.int32 = co * 2304 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 983040
                cse_var_22: T.int32 = cse_var_25 + 917504
                cse_var_21: T.int32 = cse_var_25 + 851968
                cse_var_20: T.int32 = cse_var_25 + 786432
                cse_var_19: T.int32 = cse_var_25 + 720896
                cse_var_18: T.int32 = cse_var_25 + 655360
                cse_var_17: T.int32 = cse_var_25 + 65536
                cse_var_16: T.int32 = cse_var_25 + 589824
                cse_var_15: T.int32 = cse_var_25 + 524288
                cse_var_14: T.int32 = cse_var_25 + 458752
                cse_var_13: T.int32 = cse_var_25 + 393216
                cse_var_12: T.int32 = cse_var_25 + 327680
                cse_var_11: T.int32 = cse_var_25 + 262144
                cse_var_10: T.int32 = cse_var_25 + 196608
                cse_var_9: T.int32 = cse_var_25 + 131072
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((1048576,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                p0_3 = T.Buffer((589824,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = transform_weight_3[cse_var_10] + p0_3[cse_var_2]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_6]
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_8]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 256, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 256, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 256, 256), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 256, 256), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(256, 16):
                cse_var_1: T.int32 = ax0_ax1_fused * 65536
                T_transpose_3 = T.Buffer((1048576,), data=T_transpose_1)
                p0_3 = T.Buffer((1048576,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 256 + ax3_outer * 16:cse_var_1 + ax2 * 256 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 4096 + ax2:cse_var_1 + ax3_outer * 4096 + ax2 + 4096:256]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 256, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 256, 256), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(256):
            for ci in range(256):
                cse_var_25: T.int32 = co * 256 + ci
                cse_var_24: T.int32 = co * 2304 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 983040
                cse_var_22: T.int32 = cse_var_25 + 917504
                cse_var_21: T.int32 = cse_var_25 + 851968
                cse_var_20: T.int32 = cse_var_25 + 786432
                cse_var_19: T.int32 = cse_var_25 + 720896
                cse_var_18: T.int32 = cse_var_25 + 655360
                cse_var_17: T.int32 = cse_var_25 + 65536
                cse_var_16: T.int32 = cse_var_25 + 589824
                cse_var_15: T.int32 = cse_var_25 + 524288
                cse_var_14: T.int32 = cse_var_25 + 458752
                cse_var_13: T.int32 = cse_var_25 + 393216
                cse_var_12: T.int32 = cse_var_25 + 327680
                cse_var_11: T.int32 = cse_var_25 + 262144
                cse_var_10: T.int32 = cse_var_25 + 196608
                cse_var_9: T.int32 = cse_var_25 + 131072
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((1048576,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                p0_3 = T.Buffer((589824,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = transform_weight_3[cse_var_10] + p0_3[cse_var_2]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_6]
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_8]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 256, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 256, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 256, 256), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 256, 256), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(256, 16):
                cse_var_1: T.int32 = ax0_ax1_fused * 65536
                T_transpose_3 = T.Buffer((1048576,), data=T_transpose_1)
                p0_3 = T.Buffer((1048576,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 256 + ax3_outer * 16:cse_var_1 + ax2 * 256 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 4096 + ax2:cse_var_1 + ax3_outer * 4096 + ax2 + 4096:256]
    T.ret(0)
[23:08:02] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 2304 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 256, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 256, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 256, 256), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(256):
            for ci in range(256):
                cse_var_25: T.int32 = co * 256 + ci
                cse_var_24: T.int32 = co * 2304 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 983040
                cse_var_22: T.int32 = cse_var_25 + 917504
                cse_var_21: T.int32 = cse_var_25 + 851968
                cse_var_20: T.int32 = cse_var_25 + 786432
                cse_var_19: T.int32 = cse_var_25 + 720896
                cse_var_18: T.int32 = cse_var_25 + 655360
                cse_var_17: T.int32 = cse_var_25 + 65536
                cse_var_16: T.int32 = cse_var_25 + 589824
                cse_var_15: T.int32 = cse_var_25 + 524288
                cse_var_14: T.int32 = cse_var_25 + 458752
                cse_var_13: T.int32 = cse_var_25 + 393216
                cse_var_12: T.int32 = cse_var_25 + 327680
                cse_var_11: T.int32 = cse_var_25 + 262144
                cse_var_10: T.int32 = cse_var_25 + 196608
                cse_var_9: T.int32 = cse_var_25 + 131072
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((1048576,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                p0_3 = T.Buffer((589824,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = transform_weight_3[cse_var_10] + p0_3[cse_var_2]
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_20] = transform_weight_3[cse_var_20] + p0_3[cse_var_6]
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_18])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_21])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_8]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 256, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 256, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 256, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 256 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 65536 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 256, 256), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 256, 256), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(256, 16):
                cse_var_1: T.int32 = ax0_ax1_fused * 65536
                T_transpose_3 = T.Buffer((1048576,), data=T_transpose_1)
                p0_3 = T.Buffer((1048576,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 256 + ax3_outer * 16:cse_var_1 + ax2 * 256 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 4096 + ax2:cse_var_1 + ax3_outer * 4096 + ax2 + 4096:256]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 256, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 256, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 256 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((256, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 256, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(256):
            T_expand_dims_3 = T.Buffer((256,), data=T_expand_dims_1)
            p0_3 = T.Buffer((256,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 512, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 512, 512), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(512):
            for ci in range(512):
                cse_var_25: T.int32 = co * 512 + ci
                cse_var_24: T.int32 = co * 4608 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 786432
                cse_var_22: T.int32 = cse_var_25 + 524288
                cse_var_21: T.int32 = cse_var_25 + 3932160
                cse_var_20: T.int32 = cse_var_25 + 3670016
                cse_var_19: T.int32 = cse_var_25 + 3407872
                cse_var_18: T.int32 = cse_var_25 + 3145728
                cse_var_17: T.int32 = cse_var_25 + 2883584
                cse_var_16: T.int32 = cse_var_25 + 2621440
                cse_var_15: T.int32 = cse_var_25 + 262144
                cse_var_14: T.int32 = cse_var_25 + 2359296
                cse_var_13: T.int32 = cse_var_25 + 2097152
                cse_var_12: T.int32 = cse_var_25 + 1835008
                cse_var_11: T.int32 = cse_var_25 + 1572864
                cse_var_10: T.int32 = cse_var_25 + 1310720
                cse_var_9: T.int32 = cse_var_25 + 1048576
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((4194304,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                p0_3 = T.Buffer((2359296,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_2]
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_6]
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_21] = transform_weight_3[cse_var_21] + p0_3[cse_var_8]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 512, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 512, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 512, 512), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 512, 512), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(512, 32):
                cse_var_1: T.int32 = ax0_ax1_fused * 262144
                T_transpose_3 = T.Buffer((4194304,), data=T_transpose_1)
                p0_3 = T.Buffer((4194304,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 512 + ax3_outer * 16:cse_var_1 + ax2 * 512 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 8192 + ax2:cse_var_1 + ax3_outer * 8192 + ax2 + 8192:512]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 512, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 512, 512), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(512):
            for ci in range(512):
                cse_var_25: T.int32 = co * 512 + ci
                cse_var_24: T.int32 = co * 4608 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 786432
                cse_var_22: T.int32 = cse_var_25 + 524288
                cse_var_21: T.int32 = cse_var_25 + 3932160
                cse_var_20: T.int32 = cse_var_25 + 3670016
                cse_var_19: T.int32 = cse_var_25 + 3407872
                cse_var_18: T.int32 = cse_var_25 + 3145728
                cse_var_17: T.int32 = cse_var_25 + 2883584
                cse_var_16: T.int32 = cse_var_25 + 2621440
                cse_var_15: T.int32 = cse_var_25 + 262144
                cse_var_14: T.int32 = cse_var_25 + 2359296
                cse_var_13: T.int32 = cse_var_25 + 2097152
                cse_var_12: T.int32 = cse_var_25 + 1835008
                cse_var_11: T.int32 = cse_var_25 + 1572864
                cse_var_10: T.int32 = cse_var_25 + 1310720
                cse_var_9: T.int32 = cse_var_25 + 1048576
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((4194304,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                p0_3 = T.Buffer((2359296,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_2]
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_6]
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_21] = transform_weight_3[cse_var_21] + p0_3[cse_var_8]
    T.ret(0)
[23:08:03] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 512, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 512, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 512, 512), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 512, 512), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(512, 32):
                cse_var_1: T.int32 = ax0_ax1_fused * 262144
                T_transpose_3 = T.Buffer((4194304,), data=T_transpose_1)
                p0_3 = T.Buffer((4194304,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 512 + ax3_outer * 16:cse_var_1 + ax2 * 512 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 8192 + ax2:cse_var_1 + ax3_outer * 8192 + ax2 + 8192:512]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_nn_contrib_conv2d_winograd_weight_transform(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    transform_weight_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    transform_weight: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    transform_weight_1: T.handle("float32") = T.tvm_struct_get(transform_weight, 0, 1, "handle")
    T.attr(transform_weight_1, "storage_alignment", 64)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 2, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape)
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides: T.handle("int64") = T.tvm_struct_get(transform_weight, 0, 3, "handle")
    intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[0] to be pointer"
    assert transform_weight_code == 3 or transform_weight_code == 13 or transform_weight_code == 7 or transform_weight_code == 4, "intrp_fused_nn_contrib_conv2d_winograd_weight_transform: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[0]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[1]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[2]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[2] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape_1[3]) == 3, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.shape[3] has an unsatisfied constraint: 3 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[3]) and 3 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[2]) and 9 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[1]) and 4608 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_p0_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(transform_weight, 0, 4, "int32"), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.ndim is expected to equal 4"
    assert T.tvm_struct_get(transform_weight, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(transform_weight, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(transform_weight, 0, 7, "uint16") == T.uint16(1), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[0]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[0])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[1]) == 4, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[1])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[2]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[2])"
    assert T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape_1[3]) == 512, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_shape[3])"
    if not T.isnullptr(intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides):
        assert 1 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_nn_contrib_conv2d_winograd_weight_transform_transform_weight_strides_1[0]), "intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, "uint64"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(transform_weight, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(transform_weight, 0, 10, "int32") == 1, "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(transform_weight, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(transform_weight, 0, 9, "int32"), "Argument intrp_fused_nn_contrib_conv2d_winograd_weight_transform.transform_weight.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(transform_weight, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 512, 3, 3), data=p0_1)
    transform_weight_2 = T.decl_buffer((4, 4, 512, 512), data=transform_weight_1)
    with T.attr(0, "compute_scope", "intrp_fused_nn_contrib_conv2d_winograd_weight_transform_compute_"):
        for co in T.parallel(512):
            for ci in range(512):
                cse_var_25: T.int32 = co * 512 + ci
                cse_var_24: T.int32 = co * 4608 + ci * 9
                cse_var_23: T.int32 = cse_var_25 + 786432
                cse_var_22: T.int32 = cse_var_25 + 524288
                cse_var_21: T.int32 = cse_var_25 + 3932160
                cse_var_20: T.int32 = cse_var_25 + 3670016
                cse_var_19: T.int32 = cse_var_25 + 3407872
                cse_var_18: T.int32 = cse_var_25 + 3145728
                cse_var_17: T.int32 = cse_var_25 + 2883584
                cse_var_16: T.int32 = cse_var_25 + 2621440
                cse_var_15: T.int32 = cse_var_25 + 262144
                cse_var_14: T.int32 = cse_var_25 + 2359296
                cse_var_13: T.int32 = cse_var_25 + 2097152
                cse_var_12: T.int32 = cse_var_25 + 1835008
                cse_var_11: T.int32 = cse_var_25 + 1572864
                cse_var_10: T.int32 = cse_var_25 + 1310720
                cse_var_9: T.int32 = cse_var_25 + 1048576
                cse_var_8: T.int32 = cse_var_24 + 8
                cse_var_7: T.int32 = cse_var_24 + 7
                cse_var_6: T.int32 = cse_var_24 + 6
                cse_var_5: T.int32 = cse_var_24 + 5
                cse_var_4: T.int32 = cse_var_24 + 4
                cse_var_3: T.int32 = cse_var_24 + 3
                cse_var_2: T.int32 = cse_var_24 + 2
                cse_var_1: T.int32 = cse_var_24 + 1
                transform_weight_3 = T.Buffer((4194304,), data=transform_weight_1)
                transform_weight_3[cse_var_25] = T.float32(0)
                transform_weight_3[cse_var_15] = T.float32(0)
                transform_weight_3[cse_var_22] = T.float32(0)
                transform_weight_3[cse_var_23] = T.float32(0)
                transform_weight_3[cse_var_9] = T.float32(0)
                transform_weight_3[cse_var_10] = T.float32(0)
                transform_weight_3[cse_var_11] = T.float32(0)
                transform_weight_3[cse_var_12] = T.float32(0)
                transform_weight_3[cse_var_13] = T.float32(0)
                transform_weight_3[cse_var_14] = T.float32(0)
                transform_weight_3[cse_var_16] = T.float32(0)
                transform_weight_3[cse_var_17] = T.float32(0)
                transform_weight_3[cse_var_18] = T.float32(0)
                transform_weight_3[cse_var_19] = T.float32(0)
                transform_weight_3[cse_var_20] = T.float32(0)
                transform_weight_3[cse_var_21] = T.float32(0)
                p0_3 = T.Buffer((2359296,), data=p0_1)
                transform_weight_3[cse_var_25] = transform_weight_3[cse_var_25] + p0_3[cse_var_24]
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_24] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(-0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_1] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_15])
                transform_weight_3[cse_var_22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_22])
                transform_weight_3[cse_var_23] = transform_weight_3[cse_var_23] + p0_3[cse_var_2]
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_2], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(-0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_3] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_4] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(-0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(-0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_5], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_9])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_13])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_18] = transform_weight_3[cse_var_18] + p0_3[cse_var_6]
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_6], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(-0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(-0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_7], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_10])
                transform_weight_3[cse_var_11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_11])
                transform_weight_3[cse_var_12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_12])
                transform_weight_3[cse_var_14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_14])
                transform_weight_3[cse_var_16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8] * T.float32(0.5), T.float32(0.5), transform_weight_3[cse_var_16])
                transform_weight_3[cse_var_17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_17])
                transform_weight_3[cse_var_19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_19])
                transform_weight_3[cse_var_20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_3[cse_var_8], T.float32(0.5), transform_weight_3[cse_var_20])
                transform_weight_3[cse_var_21] = transform_weight_3[cse_var_21] + p0_3[cse_var_8]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_transpose(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_transpose: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_transpose_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_transpose: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_transpose_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_transpose_p0_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_p0_shape)
    intrp_fused_transpose_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_transpose_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_transpose_1: T.handle("float32") = T.tvm_struct_get(T_transpose, 0, 1, "handle")
    T.attr(T_transpose_1, "storage_alignment", 64)
    intrp_fused_transpose_T_transpose_shape: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 2, "handle")
    intrp_fused_transpose_T_transpose_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_transpose_T_transpose_shape)
    intrp_fused_transpose_T_transpose_strides: T.handle("int64") = T.tvm_struct_get(T_transpose, 0, 3, "handle")
    intrp_fused_transpose_T_transpose_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_transpose_T_transpose_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_transpose: Expect arg[0] to be pointer"
    assert T_transpose_code == 3 or T_transpose_code == 13 or T_transpose_code == 7 or T_transpose_code == 4, "intrp_fused_transpose: Expect arg[1] to be pointer"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_transpose.p0.ndim is expected to equal 4"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[0]) == 4, "Argument intrp_fused_transpose.p0.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[1]) == 4, "Argument intrp_fused_transpose.p0.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[2]) == 512, "Argument intrp_fused_transpose.p0.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_p0_shape_1[3]) == 512, "Argument intrp_fused_transpose.p0.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_p0_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_p0_strides_1[0]), "intrp_fused_transpose.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_transpose.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_transpose, 0, 4, "int32"), "intrp_fused_transpose.T_transpose.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_transpose, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_transpose, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_transpose, 0, 7, "uint16") == T.uint16(1), "intrp_fused_transpose.T_transpose.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[0]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[0] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[0])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[1]) == 4, "Argument intrp_fused_transpose.T_transpose.shape[1] has an unsatisfied constraint: 4 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[1])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[2]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[2] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[2])"
    assert T.Cast("int32", intrp_fused_transpose_T_transpose_shape_1[3]) == 512, "Argument intrp_fused_transpose.T_transpose.shape[3] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_transpose_T_transpose_shape[3])"
    if not T.isnullptr(intrp_fused_transpose_T_transpose_strides):
        assert 1 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[3]) and 512 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[2]) and 262144 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[1]) and 1048576 == T.Cast("int32", intrp_fused_transpose_T_transpose_strides_1[0]), "intrp_fused_transpose.T_transpose.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, "uint64"), "Argument intrp_fused_transpose.T_transpose.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_transpose, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_transpose, 0, 10, "int32") == 1, "Argument intrp_fused_transpose.T_transpose.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_transpose, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_transpose, 0, 9, "int32"), "Argument intrp_fused_transpose.T_transpose.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_transpose, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((4, 4, 512, 512), data=p0_1)
    T_transpose_2 = T.decl_buffer((4, 4, 512, 512), data=T_transpose_1)
    with T.attr(0, "compute_scope", "intrp_fused_transpose_compute_"):
        for ax0_ax1_fused in T.parallel(16):
            for ax2, ax3_outer in T.grid(512, 32):
                cse_var_1: T.int32 = ax0_ax1_fused * 262144
                T_transpose_3 = T.Buffer((4194304,), data=T_transpose_1)
                p0_3 = T.Buffer((4194304,), data=p0_1)
                T_transpose_3[cse_var_1 + ax2 * 512 + ax3_outer * 16:cse_var_1 + ax2 * 512 + ax3_outer * 16 + 16] = p0_3[cse_var_1 + ax3_outer * 8192 + ax2:cse_var_1 + ax3_outer * 8192 + ax2 + 8192:512]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((3,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((4,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert 3 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 3"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 512, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[1]) == 1, "Argument intrp_fused_expand_dims.p0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.p0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[2])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert 4 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 4"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 512, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 512 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[2]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[2] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[2])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[3]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[3] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[3])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((512, 1, 1), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 512, 1, 1), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax0_ax1_fused in T.parallel(512):
            T_expand_dims_3 = T.Buffer((512,), data=T_expand_dims_1)
            p0_3 = T.Buffer((512,), data=p0_1)
            T_expand_dims_3[ax0_ax1_fused] = p0_3[ax0_ax1_fused]
    T.ret(0)
[23:08:04] /src/tvm/src/target/llvm/codegen_llvm.cc:234: Adding PrimFunc CPU:
# from tvm.script import tir as T

@T.prim_func
def intrp_fused_expand_dims(args: T.handle, arg_type_ids: T.handle("int32"), num_args: T.int32, out_ret_value: T.handle("void"), out_ret_tcode: T.handle("int32"), resource_handle: T.handle) -> T.int32:
    T.func_attr({"calling_conv": 1, "from_legacy_te_schedule": T.bool(True), "target": T.target({"keys": ["cpu"], "kind": "llvm", "tag": ""}), "tir.is_entry_func": T.bool(True), "tir.noalias": T.bool(True)})
    assert num_args == 2, "intrp_fused_expand_dims: num_args should be 2"
    arg_type_ids_1 = T.decl_buffer((2,), "int32", data=arg_type_ids)
    p0_code: T.int32 = arg_type_ids_1[0]
    T_expand_dims_code: T.int32 = arg_type_ids_1[1]
    p0: T.handle = T.tvm_struct_get(args, 0, 12, "handle")
    T_expand_dims: T.handle = T.tvm_struct_get(args, 1, 12, "handle")
    p0_1: T.handle("float32") = T.tvm_struct_get(p0, 0, 1, "handle")
    T.attr(p0_1, "storage_alignment", 64)
    intrp_fused_expand_dims_p0_shape: T.handle("int64") = T.tvm_struct_get(p0, 0, 2, "handle")
    intrp_fused_expand_dims_p0_shape_1 = T.decl_buffer((1,), "int64", data=intrp_fused_expand_dims_p0_shape)
    intrp_fused_expand_dims_p0_strides: T.handle("int64") = T.tvm_struct_get(p0, 0, 3, "handle")
    intrp_fused_expand_dims_p0_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_p0_strides)
    dev_id: T.int32 = T.tvm_struct_get(p0, 0, 9, "int32")
    T_expand_dims_1: T.handle("float32") = T.tvm_struct_get(T_expand_dims, 0, 1, "handle")
    T.attr(T_expand_dims_1, "storage_alignment", 64)
    intrp_fused_expand_dims_T_expand_dims_shape: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 2, "handle")
    intrp_fused_expand_dims_T_expand_dims_shape_1 = T.decl_buffer((2,), "int64", data=intrp_fused_expand_dims_T_expand_dims_shape)
    intrp_fused_expand_dims_T_expand_dims_strides: T.handle("int64") = T.tvm_struct_get(T_expand_dims, 0, 3, "handle")
    intrp_fused_expand_dims_T_expand_dims_strides_1 = T.decl_buffer((0,), "int64", data=intrp_fused_expand_dims_T_expand_dims_strides)
    assert p0_code == 3 or p0_code == 13 or p0_code == 7 or p0_code == 4, "intrp_fused_expand_dims: Expect arg[0] to be pointer"
    assert T_expand_dims_code == 3 or T_expand_dims_code == 13 or T_expand_dims_code == 7 or T_expand_dims_code == 4, "intrp_fused_expand_dims: Expect arg[1] to be pointer"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert 1 == T.tvm_struct_get(p0, 0, 4, "int32"), "intrp_fused_expand_dims.p0.ndim is expected to equal 1"
    assert T.tvm_struct_get(p0, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(p0, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(p0, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.p0.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_p0_shape_1[0]) == 1000, "Argument intrp_fused_expand_dims.p0.shape[0] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_p0_shape[0])"
    if not T.isnullptr(intrp_fused_expand_dims_p0_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_p0_strides_1[0]), "intrp_fused_expand_dims.p0.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(p0, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.p0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(p0, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(p0, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.p0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(p0, 0, 10, \"int32\")"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert 2 == T.tvm_struct_get(T_expand_dims, 0, 4, "int32"), "intrp_fused_expand_dims.T_expand_dims.ndim is expected to equal 2"
    assert T.tvm_struct_get(T_expand_dims, 0, 5, "uint8") == T.uint8(2) and T.tvm_struct_get(T_expand_dims, 0, 6, "uint8") == T.uint8(32) and T.tvm_struct_get(T_expand_dims, 0, 7, "uint16") == T.uint16(1), "intrp_fused_expand_dims.T_expand_dims.dtype is expected to be float32"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[0]) == 1, "Argument intrp_fused_expand_dims.T_expand_dims.shape[0] has an unsatisfied constraint: 1 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[0])"
    assert T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_shape_1[1]) == 1000, "Argument intrp_fused_expand_dims.T_expand_dims.shape[1] has an unsatisfied constraint: 1000 == T.Cast(\"int32\", intrp_fused_expand_dims_T_expand_dims_shape[1])"
    if not T.isnullptr(intrp_fused_expand_dims_T_expand_dims_strides):
        assert 1 == T.Cast("int32", intrp_fused_expand_dims_T_expand_dims_strides_1[1]), "intrp_fused_expand_dims.T_expand_dims.strides: expected to be compact array"
        T.evaluate(0)
    assert T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, "uint64"), "Argument intrp_fused_expand_dims.T_expand_dims.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_expand_dims, 0, 8, \"uint64\")"
    assert T.tvm_struct_get(T_expand_dims, 0, 10, "int32") == 1, "Argument intrp_fused_expand_dims.T_expand_dims.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_expand_dims, 0, 10, \"int32\")"
    assert dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, "int32"), "Argument intrp_fused_expand_dims.T_expand_dims.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_expand_dims, 0, 9, \"int32\")"
    p0_2 = T.decl_buffer((1000,), data=p0_1)
    T_expand_dims_2 = T.decl_buffer((1, 1000), data=T_expand_dims_1)
    with T.attr(0, "compute_scope", "intrp_fused_expand_dims_compute_"):
        for ax1_outer, ax1_inner_s in T.grid(63, 16):
            if ax1_outer * 2 + T.shift_right(ax1_inner_s, 3) < 125:
                T_expand_dims_3 = T.Buffer((1000,), data=T_expand_dims_1)
                cse_var_1: T.int32 = ax1_outer * 16 + ax1_inner_s
                T_expand_dims_3[cse_var_1] = p0_2[cse_var_1]
    T.ret(0)
One or more operators have not been tuned. Please tune your model for better performance. Use DEBUG logging level to see more details.
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_add_kernel(T_add: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((3,), data=p1)
    p0_1 = T.decl_buffer((150528,), data=p0)
    T_add_1 = T.decl_buffer((150528,), data=T_add)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(3):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 64 + T.shift_right(blockIdx_x, 2) < 147:
            T_add_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = p0_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] + p1_1[T.Div(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 64 + T.shift_right(blockIdx_x, 2), 49)]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_add_nn_relu_1_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((128,), data=p1)
    p0_1 = T.decl_buffer((100352,), data=p0)
    T_relu_1 = T.decl_buffer((100352,), data=T_relu)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(2):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32 + T.shift_right(blockIdx_x, 3) < 49:
            T_relu_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = T.max(p0_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] + p1_1[T.Div(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 4096 + blockIdx_x * 16 + T.shift_right(threadIdx_x, 4), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_add_nn_relu_2_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((256,), data=p1)
    p0_1 = T.decl_buffer((50176,), data=p0)
    T_relu_1 = T.decl_buffer((50176,), data=T_relu)
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    T_relu_1[blockIdx_x * 256 + threadIdx_x] = T.max(p0_1[blockIdx_x * 256 + threadIdx_x] + p1_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 2), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_add_nn_relu_3_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((512,), data=p1)
    p0_1 = T.decl_buffer((25088,), data=p0)
    T_relu_1 = T.decl_buffer((25088,), data=T_relu)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    T_relu_1[blockIdx_x * 256 + threadIdx_x] = T.max(p0_1[blockIdx_x * 256 + threadIdx_x] + p1_1[T.Div(blockIdx_x * 256 + threadIdx_x, 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((64,), data=p1)
    p0_1 = T.decl_buffer((200704,), data=p0)
    T_relu_1 = T.decl_buffer((200704,), data=T_relu)
    blockIdx_x = T.launch_thread("blockIdx.x", 256)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    for ax0_ax1_fused_ax2_fused_ax3_fused_outer in range(4):
        if ax0_ax1_fused_ax2_fused_ax3_fused_outer * 16 + T.shift_right(blockIdx_x, 4) < 49:
            T_relu_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] = T.max(p0_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536 + blockIdx_x * 256 + threadIdx_x] + p1_1[T.Div(ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024 + blockIdx_x * 4 + T.shift_right(threadIdx_x, 6), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_batch_flatten_kernel(p0: T.handle("float32"), tensor: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p0_1 = T.decl_buffer((512,), data=p0)
    tensor_1 = T.decl_buffer((512,), data=tensor)
    blockIdx_x = T.launch_thread("blockIdx.x", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    tensor_1[blockIdx_x * 256 + threadIdx_x] = p0_1[blockIdx_x * 256 + threadIdx_x]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_1_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((100352,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps < 29 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu < 29, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + eps * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu - 29], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 100352 + nu * 25088 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_1_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((262144,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([128], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(32):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 128 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 4:
                if threadIdx_y_1 < 1:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31) + 384]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        T.tvm_storage_sync("shared")
        for ci_inner in range(4):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1568] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3136] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4704] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 28] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1596] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3164] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4732] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 56] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1624] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3192] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4760] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 84] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1652] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3220] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4788] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 112] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1680] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3248] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4816] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 140] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1708] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3276] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4844] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 168] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1736] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3304] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4872] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1764] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3332] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4900] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 224] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1792] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3360] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4928] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 252] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1820] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3388] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4956] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 280] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1848] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3416] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4984] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 308] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1876] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3444] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5012] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 336] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1904] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3472] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5040] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 364] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1932] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3500] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5068] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_1_kernel_2(T_add: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((100352,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_add_1 = T.decl_buffer((100352,), data=T_add)
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_add_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + ax2_inner * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + ax3_inner] = inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + ax2_inner * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + ax3_inner]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_2_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((50176,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps < 15 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu < 15, p0_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 196 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 28 + eps * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu - 15], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 50176 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_2_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((1048576,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([1024], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 8)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(16):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 56] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 112, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 168] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 168, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 224, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 280] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 280, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 336] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 336, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 392] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 392, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 1792]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 504] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 504, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 560] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 560, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 616] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 616, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 672] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 672, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 728] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 728, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 784] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 784, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 840] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 840, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 896] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 3584]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 952] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 952, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            if threadIdx_y_1 * 7 + threadIdx_x_1 < 16:
                if threadIdx_y_1 < 3:
                    p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 1008] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 1008, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 48]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 56] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 56]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 168] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 168]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 280] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 280]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 392] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 392]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 504] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 504]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 616] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 616]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 728] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 728]
        T.tvm_storage_sync("shared")
        for ci_inner in range(16):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 784] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1568] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2352] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 7] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 791] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1575] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2359] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 14] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 798] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1582] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2366] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 21] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 805] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1589] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2373] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 812] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1596] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2380] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 35] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 819] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1603] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2387] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 42] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 826] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1610] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2394] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 49] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 833] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1617] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2401] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 56] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 840] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1624] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2408] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 63] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 847] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1631] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2415] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 70] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 854] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1638] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2422] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 77] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 861] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1645] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2429] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 84] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 868] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1652] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2436] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 91] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 875] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1659] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2443] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_2_kernel_2(T_add: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((50176,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_add_1 = T.decl_buffer((50176,), data=T_add)
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7)]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 37632]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 150528]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 188160]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_add_1[T.Div(blockIdx_x * 128 + threadIdx_x, 7) * 28 + ax2_inner * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + ax3_inner] = inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 128 + threadIdx_x, 7) * 28 + ax2_inner * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + ax3_inner]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_3_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((25088,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + eps and T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) + T.shift_right(eps, 1) < 4 and 1 <= T.bitwise_and(threadIdx_x, 3) * 2 + nu and T.shift_right(nu, 1) + T.bitwise_and(threadIdx_x, 3) < 4, p0_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + eps * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + nu - 8], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 32768 + nu * 8192 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_3_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((64,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((4194304,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((8,), data=bgemm_local, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([32], "float32", "local")
    p1_shared = T.allocate([512], "float32", "shared")
    data_pack_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 32)
    threadIdx_x = T.launch_thread("threadIdx.x", 2)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    for ci_outer in range(128):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 64] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 64]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 128] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 512]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 192] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 576]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 256] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1024]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 320] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1088]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 384] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1536]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1600]
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            threadIdx_y_2 = T.launch_thread("threadIdx.y", 32)
            threadIdx_x_2 = T.launch_thread("threadIdx.x", 2)
            data_pack_shared_1[threadIdx_y_2 * 2 + threadIdx_x_2] = data_pack_1[blockIdx_z * 8192 + ci_outer * 64 + threadIdx_y_2 * 2 + threadIdx_x_2]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[31])
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 512] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1024] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1536] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 2] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 514] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1026] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1538] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 4] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 516] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1028] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1540] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 6] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 518] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1030] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1542] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 8] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 520] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1032] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1544] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 10] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 522] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1034] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1546] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 12] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 524] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1036] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1548] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 14] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 526] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1038] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1550] = bgemm_local_1[31]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_3_kernel_2(T_add: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((25088,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_add_1 = T.decl_buffer((25088,), data=T_add)
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 24576]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 98304]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 122880]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        if T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + ax2_inner < 7:
            if T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner < 7:
                T_add_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + ax2_inner * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner] = inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + ax2_inner * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((100352,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps < 29 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu < 29, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + eps * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu - 29], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 100352 + nu * 25088 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((262144,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([128], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(32):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 128 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 4:
                if threadIdx_y_1 < 1:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31) + 384]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        T.tvm_storage_sync("shared")
        for ci_inner in range(4):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1568] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3136] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4704] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 28] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1596] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3164] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4732] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 56] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1624] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3192] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4760] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 84] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1652] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3220] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4788] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 112] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1680] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3248] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4816] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 140] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1708] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3276] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4844] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 168] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1736] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3304] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4872] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1764] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3332] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4900] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 224] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1792] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3360] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4928] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 252] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1820] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3388] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4956] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 280] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1848] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3416] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4984] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 308] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1876] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3444] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5012] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 336] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1904] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3472] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5040] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 364] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1932] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3500] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5068] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32"), p3: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p3_1 = T.decl_buffer((128,), data=p3)
    p2_1 = T.decl_buffer((100352,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((100352,), data=T_relu)
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_relu_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + ax2_inner * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + ax3_inner] = T.max(inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + ax2_inner * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + ax3_inner] + p3_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 2), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_2_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((50176,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps < 15 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu < 15, p0_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 196 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 28 + eps * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu - 15], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 50176 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_2_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((1048576,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([1024], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 8)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(16):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 56] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 112, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 168] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 168, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 224, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 280] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 280, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 336] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 336, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 392] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 392, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 1792]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 504] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 504, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 560] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 560, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 616] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 616, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 672] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 672, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 728] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 728, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 784] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 784, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 840] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 840, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 896] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 3584]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 952] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 952, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            if threadIdx_y_1 * 7 + threadIdx_x_1 < 16:
                if threadIdx_y_1 < 3:
                    p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 1008] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 1008, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 48]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 56] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 56]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 168] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 168]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 280] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 280]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 392] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 392]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 504] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 504]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 616] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 616]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 728] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 728]
        T.tvm_storage_sync("shared")
        for ci_inner in range(16):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 784] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1568] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2352] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 7] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 791] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1575] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2359] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 14] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 798] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1582] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2366] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 21] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 805] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1589] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2373] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 812] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1596] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2380] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 35] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 819] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1603] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2387] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 42] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 826] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1610] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2394] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 49] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 833] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1617] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2401] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 56] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 840] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1624] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2408] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 63] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 847] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1631] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2415] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 70] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 854] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1638] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2422] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 77] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 861] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1645] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2429] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 84] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 868] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1652] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2436] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 91] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 875] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1659] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2443] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_2_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32"), p3: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p3_1 = T.decl_buffer((256,), data=p3)
    p2_1 = T.decl_buffer((50176,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((50176,), data=T_relu)
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7)]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 37632]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 150528]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 188160]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_relu_1[T.Div(blockIdx_x * 128 + threadIdx_x, 7) * 28 + ax2_inner * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + ax3_inner] = T.max(inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 128 + threadIdx_x, 7) * 28 + ax2_inner * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + ax3_inner] + p3_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((36,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((200704,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((36,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([36], "float32", "local")
    data_pack_local = T.allocate([36], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(6, 6):
        d_1[eps * 6 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps < 57 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu < 57, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + eps * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu - 57], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[4]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[24]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[28]
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[1]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[4]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[25]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[28]
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[4]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[28]
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[4]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[28]
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[4]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[28]
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[1]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[5]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[25]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[29]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[6]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[24]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[28]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[7]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[10]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[25]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[28]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[10]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[28]
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[28]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[28]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(0.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[25]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[29]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[24]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[28]
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[25]
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[28]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[28]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[28]
    data_pack_local_1[16] = T.float32(0)
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = data_pack_local_1[16] + d_1[28]
    data_pack_local_1[17] = T.float32(0)
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(0.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[25]
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[29]
    data_pack_local_1[18] = T.float32(0)
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[24]
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[28]
    data_pack_local_1[19] = T.float32(0)
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[25]
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[28]
    data_pack_local_1[20] = T.float32(0)
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = data_pack_local_1[20] + d_1[28]
    data_pack_local_1[21] = T.float32(0)
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = data_pack_local_1[21] + d_1[28]
    data_pack_local_1[22] = T.float32(0)
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = data_pack_local_1[22] + d_1[28]
    data_pack_local_1[23] = T.float32(0)
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[25]
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[29]
    data_pack_local_1[24] = T.float32(0)
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[24]
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[28]
    data_pack_local_1[25] = T.float32(0)
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[25]
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[28]
    data_pack_local_1[26] = T.float32(0)
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = data_pack_local_1[26] + d_1[28]
    data_pack_local_1[27] = T.float32(0)
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = data_pack_local_1[27] + d_1[28]
    data_pack_local_1[28] = T.float32(0)
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = data_pack_local_1[28] + d_1[28]
    data_pack_local_1[29] = T.float32(0)
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[25]
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[29]
    data_pack_local_1[30] = T.float32(0)
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[6]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[10]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[24], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[30]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[34]
    data_pack_local_1[31] = T.float32(0)
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[7]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[10]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[31]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[34]
    data_pack_local_1[32] = T.float32(0)
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[10]
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[34]
    data_pack_local_1[33] = T.float32(0)
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[10]
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[34]
    data_pack_local_1[34] = T.float32(0)
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[10]
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[34]
    data_pack_local_1[35] = T.float32(0)
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[7]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[11]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-2), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28] * T.float32(1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[29], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[31]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[34], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[35]
    for eps, nu in T.grid(6, 6):
        data_pack_1[eps * 75264 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 6 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((1568,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((147456,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((64,), data=bgemm_local, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 36)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([256], "float32", "shared")
    data_pack_shared = T.allocate([1568], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 2)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(8):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) + 28, 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 8:
                if threadIdx_y_1 < 2:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31) + 448]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 784] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 784]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 896] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 896]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1008] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1008]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1120] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1120]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1232] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1232]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1344] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1344]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1456] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1456]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 56] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 84] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 112] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 140] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 168] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 224] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 252] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 280] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 308] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 336] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 364] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 392] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 420] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 448] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 476] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 504] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 532] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 560] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 588] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 616] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 644] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 672] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 700] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 728] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 756] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 784] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 812] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 840] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 868] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 896] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 924] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 952] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 980] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1008] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1036] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1064] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1092] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1120] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1148] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1176] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1204] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1232] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1260] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1288] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1316] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1344] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1372] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1400] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1428] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1456] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1484] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1512] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1540] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32"), p3: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p3_1 = T.decl_buffer((64,), data=p3)
    p2_1 = T.decl_buffer((200704,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((16,), data=inverse, scope="local")
    T_relu_1 = T.decl_buffer((200704,), data=T_relu)
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    inverse_2 = T.decl_buffer((16,), data=inverse, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[1])
    inverse_2[2] = T.float32(0)
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[2])
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 62720]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776]
    inverse_2[4] = T.float32(0)
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[4])
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[4])
    inverse_2[5] = T.float32(0)
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[5])
    inverse_2[5] = inverse_2[5] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-2), inverse_2[5])
    inverse_2[6] = T.float32(0)
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[6])
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(4), inverse_2[6])
    inverse_2[7] = T.float32(0)
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-2), inverse_2[7])
    inverse_2[8] = T.float32(0)
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[8])
    inverse_2[9] = T.float32(0)
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-2), inverse_2[9])
    inverse_2[10] = T.float32(0)
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[10])
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(4), inverse_2[10])
    inverse_2[11] = T.float32(0)
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(4), inverse_2[11])
    inverse_2[12] = T.float32(0)
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496]
    inverse_2[13] = T.float32(0)
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-2), inverse_2[13])
    inverse_2[14] = T.float32(0)
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(4), inverse_2[14])
    inverse_2[15] = T.float32(0)
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 439040]
    for ax2_inner, ax3_inner in T.grid(4, 4):
        T_relu_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + ax2_inner * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + ax3_inner] = T.max(inverse_1[ax2_inner * 4 + ax3_inner] + p2_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + ax2_inner * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + ax3_inner] + p3_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 2), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((36,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((200704,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((36,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([36], "float32", "local")
    data_pack_local = T.allocate([36], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(6, 6):
        d_1[eps * 6 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps < 57 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu < 57, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + eps * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu - 57], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[4]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[24]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[28]
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[1]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[4]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[25]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[28]
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[4]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[28]
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[4]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[28]
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[4]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[28]
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[1]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[5]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[25]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[29]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[6]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[24]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[28]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[7]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[10]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[25]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[28]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[10]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[28]
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[28]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[28]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(0.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[25]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[29]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[24]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[28]
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[25]
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[28]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[28]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[28]
    data_pack_local_1[16] = T.float32(0)
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = data_pack_local_1[16] + d_1[28]
    data_pack_local_1[17] = T.float32(0)
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(0.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[25]
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[29]
    data_pack_local_1[18] = T.float32(0)
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[24]
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[28]
    data_pack_local_1[19] = T.float32(0)
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[25]
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[28]
    data_pack_local_1[20] = T.float32(0)
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = data_pack_local_1[20] + d_1[28]
    data_pack_local_1[21] = T.float32(0)
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = data_pack_local_1[21] + d_1[28]
    data_pack_local_1[22] = T.float32(0)
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = data_pack_local_1[22] + d_1[28]
    data_pack_local_1[23] = T.float32(0)
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[25]
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[29]
    data_pack_local_1[24] = T.float32(0)
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[24]
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[28]
    data_pack_local_1[25] = T.float32(0)
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[25]
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[28]
    data_pack_local_1[26] = T.float32(0)
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = data_pack_local_1[26] + d_1[28]
    data_pack_local_1[27] = T.float32(0)
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = data_pack_local_1[27] + d_1[28]
    data_pack_local_1[28] = T.float32(0)
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = data_pack_local_1[28] + d_1[28]
    data_pack_local_1[29] = T.float32(0)
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[25]
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[29]
    data_pack_local_1[30] = T.float32(0)
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[6]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[10]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[24], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[30]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[34]
    data_pack_local_1[31] = T.float32(0)
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[7]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[10]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[31]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[34]
    data_pack_local_1[32] = T.float32(0)
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[10]
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[34]
    data_pack_local_1[33] = T.float32(0)
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[10]
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[34]
    data_pack_local_1[34] = T.float32(0)
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[10]
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[34]
    data_pack_local_1[35] = T.float32(0)
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[7]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[11]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-2), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28] * T.float32(1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[29], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[31]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[34], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[35]
    for eps, nu in T.grid(6, 6):
        data_pack_1[eps * 75264 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 6 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((1568,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((147456,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((64,), data=bgemm_local, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 36)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([256], "float32", "shared")
    data_pack_shared = T.allocate([1568], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 2)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(8):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) + 28, 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 8:
                if threadIdx_y_1 < 2:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31) + 448]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 784] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 784]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 896] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 896]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1008] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1008]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1120] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1120]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1232] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1232]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1344] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1344]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1456] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1456]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 56] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 84] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 112] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 140] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 168] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 224] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 252] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 280] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 308] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 336] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 364] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 392] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 420] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 448] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 476] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 504] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 532] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 560] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 588] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 616] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 644] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 672] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 700] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 728] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 756] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 784] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 812] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 840] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 868] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 896] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 924] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 952] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 980] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1008] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1036] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1064] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1092] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1120] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1148] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1176] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1204] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1232] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1260] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1288] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1316] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1344] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1372] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1400] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1428] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1456] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1484] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1512] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1540] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_kernel_2(T_add: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((200704,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((16,), data=inverse, scope="local")
    T_add_1 = T.decl_buffer((200704,), data=T_add)
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    inverse_2 = T.decl_buffer((16,), data=inverse, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[1])
    inverse_2[2] = T.float32(0)
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[2])
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 62720]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776]
    inverse_2[4] = T.float32(0)
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[4])
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[4])
    inverse_2[5] = T.float32(0)
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[5])
    inverse_2[5] = inverse_2[5] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-2), inverse_2[5])
    inverse_2[6] = T.float32(0)
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[6])
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(4), inverse_2[6])
    inverse_2[7] = T.float32(0)
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-2), inverse_2[7])
    inverse_2[8] = T.float32(0)
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[8])
    inverse_2[9] = T.float32(0)
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-2), inverse_2[9])
    inverse_2[10] = T.float32(0)
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[10])
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(4), inverse_2[10])
    inverse_2[11] = T.float32(0)
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(4), inverse_2[11])
    inverse_2[12] = T.float32(0)
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496]
    inverse_2[13] = T.float32(0)
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-2), inverse_2[13])
    inverse_2[14] = T.float32(0)
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(4), inverse_2[14])
    inverse_2[15] = T.float32(0)
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 439040]
    for ax2_inner, ax3_inner in T.grid(4, 4):
        T_add_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + ax2_inner * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + ax3_inner] = inverse_1[ax2_inner * 4 + ax3_inner] + p2_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + ax2_inner * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + ax3_inner]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_multiply_add_nn_re_a4e88f85cf7823fc__kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((25088,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + eps and T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) + T.shift_right(eps, 1) < 4 and 1 <= T.bitwise_and(threadIdx_x, 3) * 2 + nu and T.shift_right(nu, 1) + T.bitwise_and(threadIdx_x, 3) < 4, p0_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + eps * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + nu - 8], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 32768 + nu * 8192 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_multiply_add_nn_re_a4e88f85cf7823fc__kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((64,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((4194304,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((8,), data=bgemm_local, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([32], "float32", "local")
    p1_shared = T.allocate([512], "float32", "shared")
    data_pack_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 32)
    threadIdx_x = T.launch_thread("threadIdx.x", 2)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    for ci_outer in range(128):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 64] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 64]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 128] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 512]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 192] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 576]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 256] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1024]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 320] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1088]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 384] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1536]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1600]
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            threadIdx_y_2 = T.launch_thread("threadIdx.y", 32)
            threadIdx_x_2 = T.launch_thread("threadIdx.x", 2)
            data_pack_shared_1[threadIdx_y_2 * 2 + threadIdx_x_2] = data_pack_1[blockIdx_z * 8192 + ci_outer * 64 + threadIdx_y_2 * 2 + threadIdx_x_2]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[31])
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 512] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1024] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1536] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 2] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 514] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1026] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1538] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 4] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 516] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1028] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1540] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 6] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 518] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1030] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1542] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 8] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 520] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1032] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1544] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 10] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 522] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1034] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1546] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 12] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 524] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1036] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1548] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 14] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 526] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1038] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1550] = bgemm_local_1[31]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_multiply_add_nn_re_a4e88f85cf7823fc__kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32"), p3: T.handle("float32"), p4: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p4_1 = T.decl_buffer((512,), data=p4)
    p3_1 = T.decl_buffer((512,), data=p3)
    p2_1 = T.decl_buffer((25088,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((25088,), data=T_relu)
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 24576]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 98304]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 122880]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        if T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + ax2_inner < 7:
            if T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner < 7:
                T_relu_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + ax2_inner * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner] = T.max(T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + ax2_inner * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner], p3_1[blockIdx_x * 8 + T.shift_right(threadIdx_x, 4)], p4_1[blockIdx_x * 8 + T.shift_right(threadIdx_x, 4)]), T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((100352,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 2 + eps < 29 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu < 29, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + eps * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + nu - 29], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 100352 + nu * 25088 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    data_pack_1 = T.decl_buffer((401408,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((262144,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([128], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(32):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 128 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 4:
                if threadIdx_y_1 < 1:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 16384 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31) + 384]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 25088 + ci_outer * 784 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        T.tvm_storage_sync("shared")
        for ci_inner in range(4):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 8], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 24], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 28], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 56], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 84], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 112], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 140], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 9], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 32 + threadIdx_y * 2 + 25], data_pack_shared_1[ci_inner * 196 + threadIdx_x + 168], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1568] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3136] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4704] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 28] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1596] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3164] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4732] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 56] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1624] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3192] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4760] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 84] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1652] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3220] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4788] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 112] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1680] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3248] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4816] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 140] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1708] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3276] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4844] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 168] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1736] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3304] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4872] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1764] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3332] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4900] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 224] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1792] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3360] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4928] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 252] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1820] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3388] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4956] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 280] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1848] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3416] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 4984] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 308] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1876] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3444] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5012] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 336] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1904] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3472] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5040] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 364] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 1932] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 3500] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 25088 + blockIdx_y * 6272 + threadIdx_y * 392 + threadIdx_x + 5068] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((100352,), data=T_relu)
    bgemm_1 = T.decl_buffer((401408,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 196)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_relu_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 56 + ax2_inner * 28 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 2 + ax3_inner] = T.max(inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 2), 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((50176,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps and T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 2 + eps < 15 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu < 15, p0_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 196 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 28 + eps * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + nu - 15], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 50176 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    data_pack_1 = T.decl_buffer((200704,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((784,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((1048576,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((56,), data=bgemm_local, scope="local", align=8)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([1024], "float32", "shared")
    data_pack_shared = T.allocate([784], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 8)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(16):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 56] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 112, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 168] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 168, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 224, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 280] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 280, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 336] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 336, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 392] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 392, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 1792]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 504] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 504, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 560] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 560, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 48, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 616] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 616, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 40, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 672] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 672, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 32, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 728] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 728, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 24, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 784] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 784, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 16, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 840] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 840, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 8]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 896] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 3584]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 952] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 952, 6) * 256 + blockIdx_y * 64 + T.bitwise_and(threadIdx_y_1 * 7 + threadIdx_x_1 + 56, 63)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 8)
            T.launch_thread(threadIdx_x_1, 7)
            if threadIdx_y_1 * 7 + threadIdx_x_1 < 16:
                if threadIdx_y_1 < 3:
                    p1_shared_1[threadIdx_y_1 * 7 + threadIdx_x_1 + 1008] = p1_1[blockIdx_z * 65536 + ci_outer * 4096 + T.shift_right(threadIdx_y_1 * 7 + threadIdx_x_1 + 1008, 6) * 256 + blockIdx_y * 64 + threadIdx_y_1 * 7 + threadIdx_x_1 + 48]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 56] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 56]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 168] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 168]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 280] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 280]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 392] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 392]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 504] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 504]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 616] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 616]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 8)
            T.launch_thread(threadIdx_x_2, 7)
            data_pack_shared_1[threadIdx_y_2 * 7 + threadIdx_x_2 + 728] = data_pack_1[blockIdx_z * 12544 + ci_outer * 784 + threadIdx_y_2 * 7 + threadIdx_x_2 + 728]
        T.tvm_storage_sync("shared")
        for ci_inner in range(16):
            bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[0])
            bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[14])
            bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[28])
            bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[42])
            bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[2])
            bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[16])
            bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[30])
            bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[44])
            bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[4])
            bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[18])
            bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[32])
            bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[46])
            bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[6])
            bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[20])
            bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[34])
            bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[48])
            bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[8])
            bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[22])
            bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[36])
            bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[50])
            bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[10])
            bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[24])
            bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[38])
            bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[52])
            bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[12])
            bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 16], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[26])
            bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 32], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[40])
            bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 48], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[54])
            bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[1])
            bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[15])
            bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[29])
            bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x], bgemm_local_1[43])
            bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[3])
            bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[17])
            bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[31])
            bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 7], bgemm_local_1[45])
            bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[5])
            bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[19])
            bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[33])
            bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 14], bgemm_local_1[47])
            bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[7])
            bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[21])
            bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[35])
            bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 21], bgemm_local_1[49])
            bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[9])
            bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[23])
            bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[37])
            bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 28], bgemm_local_1[51])
            bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[11])
            bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[25])
            bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[39])
            bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 35], bgemm_local_1[53])
            bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 1], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[13])
            bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 17], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[27])
            bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 33], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[41])
            bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[ci_inner * 64 + threadIdx_y * 2 + 49], data_pack_shared_1[ci_inner * 49 + threadIdx_x + 42], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 784] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1568] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2352] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 7] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 791] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1575] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2359] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 14] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 798] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1582] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2366] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 21] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 805] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1589] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2373] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 812] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1596] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2380] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 35] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 819] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1603] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2387] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 42] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 826] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1610] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2394] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 49] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 833] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1617] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2401] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 56] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 840] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1624] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2408] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 63] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 847] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1631] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2415] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 70] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 854] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1638] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2422] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 77] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 861] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1645] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2429] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 84] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 868] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1652] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2436] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 91] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 875] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 1659] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 3136 + threadIdx_y * 98 + threadIdx_x + 2443] = bgemm_local_1[55]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((50176,), data=T_relu)
    bgemm_1 = T.decl_buffer((200704,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7)]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 25088]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 37632]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[1] = inverse_2[1] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 50176], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 100352]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 150528]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 62720] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 75264], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 112896], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 125440]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 175616]
    inverse_2[3] = inverse_2[3] + bgemm_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49) * 49 + T.Div(T.truncmod(blockIdx_x * 30 + threadIdx_x, 49), 7) * 7 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) + 188160]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        T_relu_1[T.Div(blockIdx_x * 128 + threadIdx_x, 7) * 28 + ax2_inner * 14 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 7) * 2 + ax3_inner] = T.max(inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[T.Div(blockIdx_x * 128 + threadIdx_x, 49)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((16,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((25088,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((16,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    d = T.allocate([16], "float32", "local")
    data_pack_local = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(4, 4):
        d_1[eps * 4 + nu] = T.if_then_else(1 <= T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + eps and T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) + T.shift_right(eps, 1) < 4 and 1 <= T.bitwise_and(threadIdx_x, 3) * 2 + nu and T.shift_right(nu, 1) + T.bitwise_and(threadIdx_x, 3) < 4, p0_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + eps * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + nu - 8], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(-1), data_pack_local_1[0])
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[2]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[1])
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[1]
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[2]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[3]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[8]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[10]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[9]
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[11]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[4]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[8]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[6]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[5]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[6]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[9]
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-1), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6] * T.float32(-1), T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[12]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[14]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[13]
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[14]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[5] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[15]
    for eps, nu in T.grid(4, 4):
        data_pack_1[eps * 32768 + nu * 8192 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 4 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    data_pack_1 = T.decl_buffer((131072,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((64,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((4194304,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((512,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((8,), data=bgemm_local, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    bgemm_local = T.allocate([32], "float32", "local")
    p1_shared = T.allocate([512], "float32", "shared")
    data_pack_shared = T.allocate([64], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 32)
    threadIdx_x = T.launch_thread("threadIdx.x", 2)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    for ci_outer in range(128):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 64] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 64]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 128] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 512]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 192] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 576]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 256] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1024]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 320] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1088]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 384] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1536]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 32)
            T.launch_thread(threadIdx_x_1, 2)
            p1_shared_1[threadIdx_y_1 * 2 + threadIdx_x_1 + 448] = p1_1[blockIdx_z * 262144 + ci_outer * 2048 + blockIdx_y * 128 + threadIdx_y_1 * 2 + threadIdx_x_1 + 1600]
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            threadIdx_y_2 = T.launch_thread("threadIdx.y", 32)
            threadIdx_x_2 = T.launch_thread("threadIdx.x", 2)
            data_pack_shared_1[threadIdx_y_2 * 2 + threadIdx_x_2] = data_pack_1[blockIdx_z * 8192 + ci_outer * 64 + threadIdx_y_2 * 2 + threadIdx_x_2]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 2], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 4], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 6], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 8], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 10], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 12], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 32], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 64], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 96], data_pack_shared_1[threadIdx_x + 14], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 16], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 18], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 20], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 22], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 24], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 26], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 128], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 160], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 192], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 224], data_pack_shared_1[threadIdx_x + 30], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 32], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 34], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 36], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 38], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 40], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 42], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 44], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 256], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 288], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 320], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 352], data_pack_shared_1[threadIdx_x + 46], bgemm_local_1[31])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 48], bgemm_local_1[24])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 50], bgemm_local_1[25])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 52], bgemm_local_1[26])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 54], bgemm_local_1[27])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[28])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 58], bgemm_local_1[29])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 60], bgemm_local_1[30])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 384], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 416], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 448], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y + 480], data_pack_shared_1[threadIdx_x + 62], bgemm_local_1[31])
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 512] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1024] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1536] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 2] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 514] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1026] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1538] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 4] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 516] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1028] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1540] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 6] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 518] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1030] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1542] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 8] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 520] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1032] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1544] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 10] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 522] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1034] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1546] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 12] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 524] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1036] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1548] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 14] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 526] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1038] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 8192 + blockIdx_y * 2048 + threadIdx_y * 16 + threadIdx_x + 1550] = bgemm_local_1[31]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((512,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    T_relu_1 = T.decl_buffer((25088,), data=T_relu)
    bgemm_1 = T.decl_buffer((131072,), data=bgemm)
    inverse_2 = T.decl_buffer((4,), data=inverse, scope="local", align=16)
    blockIdx_x = T.launch_thread("blockIdx.x", 64)
    inverse = T.allocate([4], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 8192], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 16384]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 24576]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[2] = T.float32(0)
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 32768], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960], T.float32(-1), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 65536]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 98304]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 40960] * T.float32(-1), T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 49152], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 57344], T.float32(-1), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 73728], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 81920]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 90112]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 106496], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 114688]
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 122880]
    for ax2_inner, ax3_inner in T.grid(2, 2):
        if T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 2 + ax2_inner < 7:
            if T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner < 7:
                T_relu_1[blockIdx_x * 392 + T.shift_right(threadIdx_x, 4) * 49 + T.shift_right(T.bitwise_and(threadIdx_x, 15), 2) * 14 + ax2_inner * 7 + T.bitwise_and(threadIdx_x, 3) * 2 + ax3_inner] = T.max(inverse_1[ax2_inner * 2 + ax3_inner] + p2_1[blockIdx_x * 8 + T.shift_right(threadIdx_x, 4)], T.float32(0))
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel(data_pack: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_local = T.handle("float32", "local")
    data_pack_local_1 = T.decl_buffer((36,), data=data_pack_local, scope="local")
    p0_1 = T.decl_buffer((200704,), data=p0)
    d = T.handle("float32", "local")
    d_1 = T.decl_buffer((36,), data=d, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    d = T.allocate([36], "float32", "local")
    data_pack_local = T.allocate([36], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    for eps, nu in T.grid(6, 6):
        d_1[eps * 6 + nu] = T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps and T.Div(T.truncmod(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 98), 7) * 4 + eps < 57 and 1 <= T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu and T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu < 57, p0_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + eps * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + nu - 57], T.float32(0))
    data_pack_local_1[0] = T.float32(0)
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[0]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[4]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[24]
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[0])
    data_pack_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[0])
    data_pack_local_1[0] = data_pack_local_1[0] + d_1[28]
    data_pack_local_1[1] = T.float32(0)
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[1]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[4]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[25]
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[1])
    data_pack_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[1])
    data_pack_local_1[1] = data_pack_local_1[1] + d_1[28]
    data_pack_local_1[2] = T.float32(0)
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[4]
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[2])
    data_pack_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[2])
    data_pack_local_1[2] = data_pack_local_1[2] + d_1[28]
    data_pack_local_1[3] = T.float32(0)
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[4]
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[3])
    data_pack_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[3])
    data_pack_local_1[3] = data_pack_local_1[3] + d_1[28]
    data_pack_local_1[4] = T.float32(0)
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[1], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[4]
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(1.5), T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(1.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[4])
    data_pack_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[4])
    data_pack_local_1[4] = data_pack_local_1[4] + d_1[28]
    data_pack_local_1[5] = T.float32(0)
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[1]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[2], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[3], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[4], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[5]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(1.5), T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(1.5), T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[25]
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[5])
    data_pack_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[5])
    data_pack_local_1[5] = data_pack_local_1[5] + d_1[29]
    data_pack_local_1[6] = T.float32(0)
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[6]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[10]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[24]
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[6])
    data_pack_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[6])
    data_pack_local_1[6] = data_pack_local_1[6] + d_1[28]
    data_pack_local_1[7] = T.float32(0)
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[7]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[10]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[25]
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[7])
    data_pack_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[7])
    data_pack_local_1[7] = data_pack_local_1[7] + d_1[28]
    data_pack_local_1[8] = T.float32(0)
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[10]
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[8])
    data_pack_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[8])
    data_pack_local_1[8] = data_pack_local_1[8] + d_1[28]
    data_pack_local_1[9] = T.float32(0)
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[10]
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[9])
    data_pack_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[9])
    data_pack_local_1[9] = data_pack_local_1[9] + d_1[28]
    data_pack_local_1[10] = T.float32(0)
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[10]
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-2.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-2.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(0.5), T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[10])
    data_pack_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[10])
    data_pack_local_1[10] = data_pack_local_1[10] + d_1[28]
    data_pack_local_1[11] = T.float32(0)
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[7]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[11]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-2.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-2.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-2.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-2.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(0.5), T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(0.5), T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(0.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[25]
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[11])
    data_pack_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[11])
    data_pack_local_1[11] = data_pack_local_1[11] + d_1[29]
    data_pack_local_1[12] = T.float32(0)
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[24]
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[12])
    data_pack_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[12])
    data_pack_local_1[12] = data_pack_local_1[12] + d_1[28]
    data_pack_local_1[13] = T.float32(0)
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[25]
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[13])
    data_pack_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[13])
    data_pack_local_1[13] = data_pack_local_1[13] + d_1[28]
    data_pack_local_1[14] = T.float32(0)
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[14])
    data_pack_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[14])
    data_pack_local_1[14] = data_pack_local_1[14] + d_1[28]
    data_pack_local_1[15] = T.float32(0)
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[15])
    data_pack_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[15])
    data_pack_local_1[15] = data_pack_local_1[15] + d_1[28]
    data_pack_local_1[16] = T.float32(0)
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-1), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(0.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2.5), T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[16])
    data_pack_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[16])
    data_pack_local_1[16] = data_pack_local_1[16] + d_1[28]
    data_pack_local_1[17] = T.float32(0)
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-1), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-1), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-1), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-1), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(0.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(0.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(0.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2.5), T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2.5), T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2.5), T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[25]
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[17])
    data_pack_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[17])
    data_pack_local_1[17] = data_pack_local_1[17] + d_1[29]
    data_pack_local_1[18] = T.float32(0)
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[24]
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[18])
    data_pack_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[18])
    data_pack_local_1[18] = data_pack_local_1[18] + d_1[28]
    data_pack_local_1[19] = T.float32(0)
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[25]
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[19])
    data_pack_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[19])
    data_pack_local_1[19] = data_pack_local_1[19] + d_1[28]
    data_pack_local_1[20] = T.float32(0)
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[20])
    data_pack_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[20])
    data_pack_local_1[20] = data_pack_local_1[20] + d_1[28]
    data_pack_local_1[21] = T.float32(0)
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[21])
    data_pack_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[21])
    data_pack_local_1[21] = data_pack_local_1[21] + d_1[28]
    data_pack_local_1[22] = T.float32(0)
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(-2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(-2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(2), T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(2), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[22])
    data_pack_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[22])
    data_pack_local_1[22] = data_pack_local_1[22] + d_1[28]
    data_pack_local_1[23] = T.float32(0)
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(-2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(-2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(-2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(2), T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(2), T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(2), T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(2), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[25]
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[23])
    data_pack_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[23])
    data_pack_local_1[23] = data_pack_local_1[23] + d_1[29]
    data_pack_local_1[24] = T.float32(0)
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[6], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[24]
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1.5), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2), data_pack_local_1[24])
    data_pack_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(1.5), data_pack_local_1[24])
    data_pack_local_1[24] = data_pack_local_1[24] + d_1[28]
    data_pack_local_1[25] = T.float32(0)
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[25]
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-2.5), data_pack_local_1[25])
    data_pack_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(0.5), data_pack_local_1[25])
    data_pack_local_1[25] = data_pack_local_1[25] + d_1[28]
    data_pack_local_1[26] = T.float32(0)
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-1), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(0.5), data_pack_local_1[26])
    data_pack_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2.5), data_pack_local_1[26])
    data_pack_local_1[26] = data_pack_local_1[26] + d_1[28]
    data_pack_local_1[27] = T.float32(0)
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(-2), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[27])
    data_pack_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(2), data_pack_local_1[27])
    data_pack_local_1[27] = data_pack_local_1[27] + d_1[28]
    data_pack_local_1[28] = T.float32(0)
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7] * T.float32(0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-0.5), T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(0.5), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1), data_pack_local_1[28])
    data_pack_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-0.5), data_pack_local_1[28])
    data_pack_local_1[28] = data_pack_local_1[28] + d_1[28]
    data_pack_local_1[29] = T.float32(0)
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8] * T.float32(0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9] * T.float32(0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10] * T.float32(0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[11], T.float32(0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-0.5), T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-0.5), T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-0.5), T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-0.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[25]
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26], T.float32(-1.5), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27], T.float32(-2), data_pack_local_1[29])
    data_pack_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[29])
    data_pack_local_1[29] = data_pack_local_1[29] + d_1[29]
    data_pack_local_1[30] = T.float32(0)
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[6]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[10]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[12], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[18], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[24], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[30]
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1.5), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2), data_pack_local_1[30])
    data_pack_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(1.5), data_pack_local_1[30])
    data_pack_local_1[30] = data_pack_local_1[30] + d_1[34]
    data_pack_local_1[31] = T.float32(0)
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[7]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[10]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[31]
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-2.5), data_pack_local_1[31])
    data_pack_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(0.5), data_pack_local_1[31])
    data_pack_local_1[31] = data_pack_local_1[31] + d_1[34]
    data_pack_local_1[32] = T.float32(0)
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[10]
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-1), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(0.5), data_pack_local_1[32])
    data_pack_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2.5), data_pack_local_1[32])
    data_pack_local_1[32] = data_pack_local_1[32] + d_1[34]
    data_pack_local_1[33] = T.float32(0)
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[10]
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(-2), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[33])
    data_pack_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(2), data_pack_local_1[33])
    data_pack_local_1[33] = data_pack_local_1[33] + d_1[34]
    data_pack_local_1[34] = T.float32(0)
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[7], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[10]
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13] * T.float32(-1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16], T.float32(-1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19] * T.float32(-2), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22], T.float32(-2), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25] * T.float32(1.5), T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28], T.float32(1.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[31], T.float32(0.5), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1), data_pack_local_1[34])
    data_pack_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-0.5), data_pack_local_1[34])
    data_pack_local_1[34] = data_pack_local_1[34] + d_1[34]
    data_pack_local_1[35] = T.float32(0)
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[7]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[8], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[9], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[10], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[11]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[13], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[14] * T.float32(-1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[15] * T.float32(-1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[16] * T.float32(-1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[17], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[19], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[20] * T.float32(-2), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[21] * T.float32(-2), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[22] * T.float32(-2), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[23], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[25], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[26] * T.float32(1.5), T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[27] * T.float32(1.5), T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[28] * T.float32(1.5), T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[29], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[31]
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[32], T.float32(-1.5), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[33], T.float32(-2), data_pack_local_1[35])
    data_pack_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), d_1[34], T.float32(1.5), data_pack_local_1[35])
    data_pack_local_1[35] = data_pack_local_1[35] + d_1[35]
    for eps, nu in T.grid(6, 6):
        data_pack_1[eps * 75264 + nu * 12544 + blockIdx_x * 128 + threadIdx_x] = data_pack_local_1[eps * 6 + nu]
[23:08:14] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel_1(bgemm: T.handle("float32", "global"), data_pack: T.handle("float32", "global"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    data_pack_1 = T.decl_buffer((451584,), data=data_pack)
    data_pack_shared = T.handle("float32", "shared")
    data_pack_shared_1 = T.decl_buffer((1568,), data=data_pack_shared, scope="shared")
    p1_1 = T.decl_buffer((147456,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    bgemm_local = T.handle("float32", "local")
    bgemm_local_1 = T.decl_buffer((64,), data=bgemm_local, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 36)
    bgemm_local = T.allocate([56], "float32", "local")
    p1_shared = T.allocate([256], "float32", "shared")
    data_pack_shared = T.allocate([1568], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 2)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 4)
    threadIdx_x = T.launch_thread("threadIdx.x", 28)
    bgemm_local_1[0] = T.float32(0)
    bgemm_local_1[8] = T.float32(0)
    bgemm_local_1[16] = T.float32(0)
    bgemm_local_1[24] = T.float32(0)
    bgemm_local_1[32] = T.float32(0)
    bgemm_local_1[40] = T.float32(0)
    bgemm_local_1[48] = T.float32(0)
    bgemm_local_1[1] = T.float32(0)
    bgemm_local_1[9] = T.float32(0)
    bgemm_local_1[17] = T.float32(0)
    bgemm_local_1[25] = T.float32(0)
    bgemm_local_1[33] = T.float32(0)
    bgemm_local_1[41] = T.float32(0)
    bgemm_local_1[49] = T.float32(0)
    bgemm_local_1[2] = T.float32(0)
    bgemm_local_1[10] = T.float32(0)
    bgemm_local_1[18] = T.float32(0)
    bgemm_local_1[26] = T.float32(0)
    bgemm_local_1[34] = T.float32(0)
    bgemm_local_1[42] = T.float32(0)
    bgemm_local_1[50] = T.float32(0)
    bgemm_local_1[3] = T.float32(0)
    bgemm_local_1[11] = T.float32(0)
    bgemm_local_1[19] = T.float32(0)
    bgemm_local_1[27] = T.float32(0)
    bgemm_local_1[35] = T.float32(0)
    bgemm_local_1[43] = T.float32(0)
    bgemm_local_1[51] = T.float32(0)
    bgemm_local_1[4] = T.float32(0)
    bgemm_local_1[12] = T.float32(0)
    bgemm_local_1[20] = T.float32(0)
    bgemm_local_1[28] = T.float32(0)
    bgemm_local_1[36] = T.float32(0)
    bgemm_local_1[44] = T.float32(0)
    bgemm_local_1[52] = T.float32(0)
    bgemm_local_1[5] = T.float32(0)
    bgemm_local_1[13] = T.float32(0)
    bgemm_local_1[21] = T.float32(0)
    bgemm_local_1[29] = T.float32(0)
    bgemm_local_1[37] = T.float32(0)
    bgemm_local_1[45] = T.float32(0)
    bgemm_local_1[53] = T.float32(0)
    bgemm_local_1[6] = T.float32(0)
    bgemm_local_1[14] = T.float32(0)
    bgemm_local_1[22] = T.float32(0)
    bgemm_local_1[30] = T.float32(0)
    bgemm_local_1[38] = T.float32(0)
    bgemm_local_1[46] = T.float32(0)
    bgemm_local_1[54] = T.float32(0)
    bgemm_local_1[7] = T.float32(0)
    bgemm_local_1[15] = T.float32(0)
    bgemm_local_1[23] = T.float32(0)
    bgemm_local_1[31] = T.float32(0)
    bgemm_local_1[39] = T.float32(0)
    bgemm_local_1[47] = T.float32(0)
    bgemm_local_1[55] = T.float32(0)
    for ci_outer in range(8):
        threadIdx_y_1 = T.env_thread("threadIdx.y")
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_1:
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            T.tvm_storage_sync("shared")
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2), 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31)]
        threadIdx_z_1 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 112] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + T.shift_right(threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) + 28, 3) * 64 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1 + 16, 31)]
        with T.launch_thread(threadIdx_z_1, 1):
            T.launch_thread(threadIdx_y_1, 4)
            T.launch_thread(threadIdx_x_1, 28)
            if threadIdx_y_1 * 7 + T.shift_right(threadIdx_x_1, 2) < 8:
                if threadIdx_y_1 < 2:
                    p1_shared_1[threadIdx_y_1 * 28 + threadIdx_x_1 + 224] = p1_1[blockIdx_z * 4096 + ci_outer * 512 + blockIdx_y * 32 + T.bitwise_and(threadIdx_y_1 * 28 + threadIdx_x_1, 31) + 448]
        threadIdx_y_2 = T.env_thread("threadIdx.y")
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        with T.launch_thread("threadIdx.z", 1) as threadIdx_z_2:
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2]
        threadIdx_z_2 = T.env_thread("threadIdx.z")
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 112] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 112]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 224] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 224]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 336] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 336]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 448] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 448]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 560] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 560]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 672] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 672]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 784] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 784]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 896] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 896]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1008] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1008]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1120] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1120]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1232] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1232]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1344] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1344]
        with T.launch_thread(threadIdx_z_2, 1):
            T.launch_thread(threadIdx_y_2, 4)
            T.launch_thread(threadIdx_x_2, 28)
            data_pack_shared_1[threadIdx_y_2 * 28 + threadIdx_x_2 + 1456] = data_pack_1[blockIdx_z * 12544 + ci_outer * 1568 + threadIdx_y_2 * 28 + threadIdx_x_2 + 1456]
        T.tvm_storage_sync("shared")
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 1], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 2], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 3], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 4], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 5], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 6], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 28], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 56], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 84], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 112], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 140], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 7], data_pack_shared_1[threadIdx_x + 168], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 32], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 33], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 34], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 35], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 36], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 37], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 38], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 196], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 224], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 252], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 280], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 308], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 336], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 39], data_pack_shared_1[threadIdx_x + 364], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 64], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 65], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 66], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 67], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 68], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 69], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 70], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 392], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 420], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 448], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 476], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 504], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 532], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 71], data_pack_shared_1[threadIdx_x + 560], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 96], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 97], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 98], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 99], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 100], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 101], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 102], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 588], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 616], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 644], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 672], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 700], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 728], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 103], data_pack_shared_1[threadIdx_x + 756], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 128], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 129], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 130], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 131], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 132], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 133], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 134], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 784], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 812], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 840], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 868], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 896], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 924], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 135], data_pack_shared_1[threadIdx_x + 952], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 160], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 161], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 162], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 163], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 164], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 165], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 166], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 980], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1008], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1036], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1064], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1092], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1120], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 167], data_pack_shared_1[threadIdx_x + 1148], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 192], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 193], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 194], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 195], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 196], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 197], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 198], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1176], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1204], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1232], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1260], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1288], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1316], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 199], data_pack_shared_1[threadIdx_x + 1344], bgemm_local_1[55])
        bgemm_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[0])
        bgemm_local_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[8])
        bgemm_local_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[16])
        bgemm_local_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[24])
        bgemm_local_1[32] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[32])
        bgemm_local_1[40] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[40])
        bgemm_local_1[48] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 224], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[48])
        bgemm_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[1])
        bgemm_local_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[9])
        bgemm_local_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[17])
        bgemm_local_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[25])
        bgemm_local_1[33] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[33])
        bgemm_local_1[41] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[41])
        bgemm_local_1[49] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 225], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[49])
        bgemm_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[2])
        bgemm_local_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[10])
        bgemm_local_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[18])
        bgemm_local_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[26])
        bgemm_local_1[34] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[34])
        bgemm_local_1[42] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[42])
        bgemm_local_1[50] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 226], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[50])
        bgemm_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[3])
        bgemm_local_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[11])
        bgemm_local_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[19])
        bgemm_local_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[27])
        bgemm_local_1[35] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[35])
        bgemm_local_1[43] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[43])
        bgemm_local_1[51] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 227], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[51])
        bgemm_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[4])
        bgemm_local_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[12])
        bgemm_local_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[20])
        bgemm_local_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[28])
        bgemm_local_1[36] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[36])
        bgemm_local_1[44] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[44])
        bgemm_local_1[52] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 228], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[52])
        bgemm_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[5])
        bgemm_local_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[13])
        bgemm_local_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[21])
        bgemm_local_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[29])
        bgemm_local_1[37] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[37])
        bgemm_local_1[45] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[45])
        bgemm_local_1[53] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 229], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[53])
        bgemm_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[6])
        bgemm_local_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[14])
        bgemm_local_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[22])
        bgemm_local_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[30])
        bgemm_local_1[38] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[38])
        bgemm_local_1[46] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[46])
        bgemm_local_1[54] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 230], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[54])
        bgemm_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1372], bgemm_local_1[7])
        bgemm_local_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1400], bgemm_local_1[15])
        bgemm_local_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1428], bgemm_local_1[23])
        bgemm_local_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1456], bgemm_local_1[31])
        bgemm_local_1[39] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1484], bgemm_local_1[39])
        bgemm_local_1[47] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1512], bgemm_local_1[47])
        bgemm_local_1[55] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p1_shared_1[threadIdx_y * 8 + 231], data_pack_shared_1[threadIdx_x + 1540], bgemm_local_1[55])
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x] = bgemm_local_1[0]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 28] = bgemm_local_1[8]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 56] = bgemm_local_1[16]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 84] = bgemm_local_1[24]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 112] = bgemm_local_1[32]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 140] = bgemm_local_1[40]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 168] = bgemm_local_1[48]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 196] = bgemm_local_1[1]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 224] = bgemm_local_1[9]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 252] = bgemm_local_1[17]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 280] = bgemm_local_1[25]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 308] = bgemm_local_1[33]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 336] = bgemm_local_1[41]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 364] = bgemm_local_1[49]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 392] = bgemm_local_1[2]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 420] = bgemm_local_1[10]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 448] = bgemm_local_1[18]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 476] = bgemm_local_1[26]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 504] = bgemm_local_1[34]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 532] = bgemm_local_1[42]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 560] = bgemm_local_1[50]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 588] = bgemm_local_1[3]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 616] = bgemm_local_1[11]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 644] = bgemm_local_1[19]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 672] = bgemm_local_1[27]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 700] = bgemm_local_1[35]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 728] = bgemm_local_1[43]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 756] = bgemm_local_1[51]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 784] = bgemm_local_1[4]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 812] = bgemm_local_1[12]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 840] = bgemm_local_1[20]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 868] = bgemm_local_1[28]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 896] = bgemm_local_1[36]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 924] = bgemm_local_1[44]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 952] = bgemm_local_1[52]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 980] = bgemm_local_1[5]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1008] = bgemm_local_1[13]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1036] = bgemm_local_1[21]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1064] = bgemm_local_1[29]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1092] = bgemm_local_1[37]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1120] = bgemm_local_1[45]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1148] = bgemm_local_1[53]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1176] = bgemm_local_1[6]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1204] = bgemm_local_1[14]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1232] = bgemm_local_1[22]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1260] = bgemm_local_1[30]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1288] = bgemm_local_1[38]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1316] = bgemm_local_1[46]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1344] = bgemm_local_1[54]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1372] = bgemm_local_1[7]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1400] = bgemm_local_1[15]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1428] = bgemm_local_1[23]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1456] = bgemm_local_1[31]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1484] = bgemm_local_1[39]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1512] = bgemm_local_1[47]
    bgemm_1[blockIdx_z * 12544 + blockIdx_y * 6272 + threadIdx_y * 1568 + threadIdx_x + 1540] = bgemm_local_1[55]
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel_2(T_relu: T.handle("float32"), bgemm: T.handle("float32", "global"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    inverse = T.handle("float32", "local")
    inverse_1 = T.decl_buffer((16,), data=inverse, scope="local")
    T_relu_1 = T.decl_buffer((200704,), data=T_relu)
    bgemm_1 = T.decl_buffer((451584,), data=bgemm)
    inverse_2 = T.decl_buffer((16,), data=inverse, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 98)
    inverse = T.allocate([16], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 128)
    inverse_2[0] = T.float32(0)
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688]
    inverse_2[0] = inverse_2[0] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232]
    inverse_2[1] = T.float32(0)
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-2), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[1])
    inverse_2[1] = inverse_2[1] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.5), inverse_2[1])
    inverse_2[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[1])
    inverse_2[2] = T.float32(0)
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(4), inverse_2[2])
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600]
    inverse_2[2] = inverse_2[2] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.25), inverse_2[2])
    inverse_2[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[2])
    inverse_2[3] = T.float32(0)
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 12544], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 25088]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 37632], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 50176], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 62720]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-1), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144]
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(0.125), inverse_2[3])
    inverse_2[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[3])
    inverse_2[3] = inverse_2[3] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776]
    inverse_2[4] = T.float32(0)
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[4])
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[4] = inverse_2[4] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.5), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-2), inverse_2[4])
    inverse_2[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-2), inverse_2[4])
    inverse_2[5] = T.float32(0)
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[5])
    inverse_2[5] = inverse_2[5] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.5), inverse_2[5])
    inverse_2[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-2), inverse_2[5])
    inverse_2[6] = T.float32(0)
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[6])
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[6] = inverse_2[6] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(4), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.25), inverse_2[6])
    inverse_2[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(4), inverse_2[6])
    inverse_2[7] = T.float32(0)
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[7])
    inverse_2[7] = inverse_2[7] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.5), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.5), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.5), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.5), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-2), T.float32(-1), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-2), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-2), T.float32(0.125), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-2), T.float32(-8), inverse_2[7])
    inverse_2[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-2), inverse_2[7])
    inverse_2[8] = T.float32(0)
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[8] = inverse_2[8] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.25), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(4), inverse_2[8])
    inverse_2[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(4), inverse_2[8])
    inverse_2[9] = T.float32(0)
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[9])
    inverse_2[9] = inverse_2[9] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-2), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.5), inverse_2[9])
    inverse_2[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-2), inverse_2[9])
    inverse_2[10] = T.float32(0)
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(4), inverse_2[10])
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[10] = inverse_2[10] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.25), inverse_2[10])
    inverse_2[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(4), inverse_2[10])
    inverse_2[11] = T.float32(0)
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[11])
    inverse_2[11] = inverse_2[11] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.25), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.25), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.25), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.25), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(4), T.float32(-1), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(4), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(4), T.float32(0.125), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(4), T.float32(-8), inverse_2[11])
    inverse_2[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(4), inverse_2[11])
    inverse_2[12] = T.float32(0)
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 75264], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896], T.float32(-1), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440], T.float32(-1), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 150528]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704]
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 225792], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968], T.float32(0.125), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 301056], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688], T.float32(-8), inverse_2[12])
    inverse_2[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232], T.float32(-8), inverse_2[12])
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 376320]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952]
    inverse_2[12] = inverse_2[12] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496]
    inverse_2[13] = T.float32(0)
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-2), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[13])
    inverse_2[13] = inverse_2[13] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.5), inverse_2[13])
    inverse_2[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-2), inverse_2[13])
    inverse_2[14] = T.float32(0)
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(4), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(4), inverse_2[14])
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864]
    inverse_2[14] = inverse_2[14] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.25), inverse_2[14])
    inverse_2[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(4), inverse_2[14])
    inverse_2[15] = T.float32(0)
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 87808] * T.float32(-1), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 100352], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 112896] * T.float32(-1), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 125440] * T.float32(-1), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 137984], T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 163072], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 175616]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 188160], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 200704], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 213248]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 238336] * T.float32(0.125), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 250880], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 263424] * T.float32(0.125), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 275968] * T.float32(0.125), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 288512], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 313600] * T.float32(-8), T.float32(-1), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 326144], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 338688] * T.float32(-8), T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 351232] * T.float32(-8), T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 363776], T.float32(-8), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 388864], T.float32(-1), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 401408]
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 413952], T.float32(0.125), inverse_2[15])
    inverse_2[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), bgemm_1[blockIdx_x * 128 + threadIdx_x + 426496], T.float32(-8), inverse_2[15])
    inverse_2[15] = inverse_2[15] + bgemm_1[blockIdx_x * 128 + threadIdx_x + 439040]
    for ax2_inner, ax3_inner in T.grid(4, 4):
        T_relu_1[T.Div(blockIdx_x * 64 + T.shift_right(threadIdx_x, 1), 7) * 224 + ax2_inner * 56 + T.truncmod(blockIdx_x * 2 + threadIdx_x, 14) * 4 + ax3_inner] = T.max(inverse_1[ax2_inner * 4 + ax3_inner] + p2_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 2), 49)], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_1_kernel(conv2d_nchw: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    conv2d_nchw_1 = T.decl_buffer((100352,), data=conv2d_nchw)
    p1_1 = T.decl_buffer((8192,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((32,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((200704,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((55,), data=pad_temp_shared, scope="shared")
    conv2d_nchw_local = T.handle("float32", "local")
    conv2d_nchw_local_1 = T.decl_buffer((64,), data=conv2d_nchw_local, scope="local", align=32)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw_local = T.allocate([16], "float32", "local")
    pad_temp_shared = T.allocate([55], "float32", "shared")
    p1_shared = T.allocate([32], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 28)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    for ff_c_init, xx_c_init in T.grid(4, 2):
        conv2d_nchw_local_1[ff_c_init * 2 + xx_c_init] = T.float32(0)
        conv2d_nchw_local_1[ff_c_init * 2 + xx_c_init + 8] = T.float32(0)
    for rc_outer in range(64):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            if threadIdx_z_1 * 7 + threadIdx_x_1 < 55:
                pad_temp_shared_1[threadIdx_z_1 * 7 + threadIdx_x_1] = p0_1[rc_outer * 3136 + blockIdx_y * 112 + threadIdx_z_1 * 7 + threadIdx_x_1]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            if T.shift_right(threadIdx_x_1, 2) + threadIdx_z_1 < 8:
                if threadIdx_x_1 < 4:
                    p1_shared_1[threadIdx_z_1 * 4 + threadIdx_x_1] = p1_1[blockIdx_z * 2048 + threadIdx_z_1 * 256 + threadIdx_x_1 * 64 + rc_outer]
        T.tvm_storage_sync("shared")
        for ff_c, xx_c in T.grid(4, 2):
            conv2d_nchw_local_1[ff_c * 2 + xx_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 4 + xx_c * 2], p1_shared_1[threadIdx_z * 4 + ff_c], conv2d_nchw_local_1[ff_c * 2 + xx_c])
            conv2d_nchw_local_1[ff_c * 2 + xx_c + 8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_x * 4 + xx_c * 2 + 28], p1_shared_1[threadIdx_z * 4 + ff_c], conv2d_nchw_local_1[ff_c * 2 + xx_c + 8])
    for ff_inner_inner_inner, xx_inner_inner_inner in T.grid(4, 2):
        conv2d_nchw_1[blockIdx_z * 25088 + threadIdx_z * 3136 + ff_inner_inner_inner * 784 + blockIdx_y * 28 + threadIdx_x * 2 + xx_inner_inner_inner] = conv2d_nchw_local_1[ff_inner_inner_inner * 2 + xx_inner_inner_inner]
        conv2d_nchw_1[blockIdx_z * 25088 + threadIdx_z * 3136 + ff_inner_inner_inner * 784 + blockIdx_y * 28 + threadIdx_x * 2 + xx_inner_inner_inner + 14] = conv2d_nchw_local_1[ff_inner_inner_inner * 2 + xx_inner_inner_inner + 8]
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_2_kernel(conv2d_nchw: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    conv2d_nchw_1 = T.decl_buffer((50176,), data=conv2d_nchw)
    p1_1 = T.decl_buffer((32768,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((32,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((100352,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((162,), data=pad_temp_shared, scope="shared")
    conv2d_nchw_local = T.handle("float32", "local")
    conv2d_nchw_local_1 = T.decl_buffer((1,), data=conv2d_nchw_local, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 16)
    conv2d_nchw_local = T.allocate([8], "float32", "local")
    pad_temp_shared = T.allocate([162], "float32", "shared")
    p1_shared = T.allocate([32], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 7)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 2)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 14)
    conv2d_nchw_local_1[0] = T.float32(0)
    conv2d_nchw_local_1[1] = T.float32(0)
    conv2d_nchw_local_1[2] = T.float32(0)
    conv2d_nchw_local_1[3] = T.float32(0)
    conv2d_nchw_local_1[4] = T.float32(0)
    conv2d_nchw_local_1[5] = T.float32(0)
    conv2d_nchw_local_1[6] = T.float32(0)
    conv2d_nchw_local_1[7] = T.float32(0)
    for rc_outer in range(64):
        with T.launch_thread("threadIdx.z", 2) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 81 + threadIdx_y_1 * 41 + threadIdx_x_1 * 3] = p0_1[rc_outer * 1568 + threadIdx_z_1 * 784 + blockIdx_y * 112 + T.Div(threadIdx_y_1 * 41 + threadIdx_x_1 * 3, 27) * 28 + T.truncmod(threadIdx_y_1 * 14 + threadIdx_x_1 * 3, 27)]
            if T.Div(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 1, 81) + threadIdx_z_1 < 2:
                if threadIdx_z_1 * 81 + threadIdx_y_1 * 41 + threadIdx_x_1 * 3 < 161:
                    if threadIdx_y_1 * 41 + threadIdx_x_1 * 3 < 80:
                        pad_temp_shared_1[threadIdx_z_1 * 81 + threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 1] = p0_1[rc_outer * 1568 + threadIdx_z_1 * 784 + blockIdx_y * 112 + T.Div(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 1, 27) * 28 + T.truncmod(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 1, 27)]
            if T.Div(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 2, 81) + threadIdx_z_1 < 2:
                if threadIdx_z_1 * 81 + threadIdx_y_1 * 41 + threadIdx_x_1 * 3 < 160:
                    if threadIdx_y_1 * 41 + threadIdx_x_1 * 3 < 79:
                        if threadIdx_x_1 < 13:
                            pad_temp_shared_1[threadIdx_z_1 * 81 + threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 2] = p0_1[rc_outer * 1568 + threadIdx_z_1 * 784 + blockIdx_y * 112 + T.Div(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 2, 27) * 28 + T.truncmod(threadIdx_y_1 * 41 + threadIdx_x_1 * 3 + 2, 27)]
        with T.launch_thread("threadIdx.z", 2) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 14)
            if T.shift_right(T.shift_right(threadIdx_x_1, 3) + threadIdx_y_1, 1) + threadIdx_z_1 < 2:
                if T.shift_right(threadIdx_x_1, 3) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 8:
                        p1_shared_1[threadIdx_z_1 * 16 + threadIdx_y_1 * 8 + threadIdx_x_1] = p1_1[blockIdx_z * 2048 + threadIdx_z_1 * 1024 + threadIdx_y_1 * 512 + T.shift_right(threadIdx_x_1, 1) * 128 + rc_outer * 2 + T.bitwise_and(threadIdx_x_1, 1)]
        T.tvm_storage_sync("shared")
        conv2d_nchw_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2], conv2d_nchw_local_1[0])
        conv2d_nchw_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 4], conv2d_nchw_local_1[1])
        conv2d_nchw_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 8], conv2d_nchw_local_1[2])
        conv2d_nchw_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 12], conv2d_nchw_local_1[3])
        conv2d_nchw_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 16], conv2d_nchw_local_1[4])
        conv2d_nchw_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 20], conv2d_nchw_local_1[5])
        conv2d_nchw_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 24], conv2d_nchw_local_1[6])
        conv2d_nchw_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 2 + 28], conv2d_nchw_local_1[7])
        conv2d_nchw_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 1], conv2d_nchw_local_1[0])
        conv2d_nchw_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 5], conv2d_nchw_local_1[1])
        conv2d_nchw_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 9], conv2d_nchw_local_1[2])
        conv2d_nchw_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 13], conv2d_nchw_local_1[3])
        conv2d_nchw_local_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 17], conv2d_nchw_local_1[4])
        conv2d_nchw_local_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 21], conv2d_nchw_local_1[5])
        conv2d_nchw_local_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 25], conv2d_nchw_local_1[6])
        conv2d_nchw_local_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 54 + threadIdx_x * 2 + 81], p1_shared_1[threadIdx_z * 2 + 29], conv2d_nchw_local_1[7])
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x] = conv2d_nchw_local_1[0]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 392] = conv2d_nchw_local_1[1]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 784] = conv2d_nchw_local_1[2]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 1176] = conv2d_nchw_local_1[3]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 1568] = conv2d_nchw_local_1[4]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 1960] = conv2d_nchw_local_1[5]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 2352] = conv2d_nchw_local_1[6]
    conv2d_nchw_1[blockIdx_z * 3136 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x + 2744] = conv2d_nchw_local_1[7]
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_3_kernel(conv2d_nchw: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    conv2d_nchw_1 = T.decl_buffer((25088,), data=conv2d_nchw)
    p1_1 = T.decl_buffer((131072,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((128,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((50176,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((1352,), data=pad_temp_shared, scope="shared")
    conv2d_nchw_local = T.handle("float32", "local")
    conv2d_nchw_local_1 = T.decl_buffer((1,), data=conv2d_nchw_local, scope="local", align=4)
    blockIdx_z = T.launch_thread("blockIdx.z", 32)
    conv2d_nchw_local = T.allocate([4], "float32", "local")
    pad_temp_shared = T.allocate([1352], "float32", "shared")
    p1_shared = T.allocate([128], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 1)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 4)
    threadIdx_y = T.launch_thread("threadIdx.y", 7)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    conv2d_nchw_local_1[0] = T.float32(0)
    conv2d_nchw_local_1[1] = T.float32(0)
    conv2d_nchw_local_1[2] = T.float32(0)
    conv2d_nchw_local_1[3] = T.float32(0)
    for rc_outer in range(32):
        with T.launch_thread("threadIdx.z", 4) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 7)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in T.unroll(7):
                if T.Div(threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 338) + threadIdx_z_1 < 4:
                    if threadIdx_z_1 * 338 + threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 1352:
                        if threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 338:
                            pad_temp_shared_1[threadIdx_z_1 * 338 + threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p0_1[rc_outer * 1568 + threadIdx_z_1 * 392 + T.Div(threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 169) * 196 + T.Div(T.truncmod(threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 169), 13) * 14 + T.truncmod(threadIdx_y_1 * 49 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 13)]
        with T.launch_thread("threadIdx.z", 4) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 7)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            if T.shift_right(threadIdx_y_1 * 5 + threadIdx_x_1, 5) + threadIdx_z_1 < 4:
                if threadIdx_y_1 * 5 + threadIdx_x_1 < 32:
                    if threadIdx_x_1 < 5:
                        p1_shared_1[threadIdx_z_1 * 32 + threadIdx_y_1 * 5 + threadIdx_x_1] = p1_1[blockIdx_z * 4096 + threadIdx_z_1 * 1024 + T.shift_right(threadIdx_y_1 * 5 + threadIdx_x_1, 3) * 256 + rc_outer * 8 + T.bitwise_and(threadIdx_y_1 * 5 + threadIdx_x_1, 7)]
        T.tvm_storage_sync("shared")
        for rc_inner in T.unroll(8):
            conv2d_nchw_local_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 169 + threadIdx_y * 26 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 8 + rc_inner], conv2d_nchw_local_1[0])
            conv2d_nchw_local_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 169 + threadIdx_y * 26 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 8 + rc_inner + 32], conv2d_nchw_local_1[1])
            conv2d_nchw_local_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 169 + threadIdx_y * 26 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 8 + rc_inner + 64], conv2d_nchw_local_1[2])
            conv2d_nchw_local_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 169 + threadIdx_y * 26 + threadIdx_x * 2], p1_shared_1[threadIdx_z * 8 + rc_inner + 96], conv2d_nchw_local_1[3])
    conv2d_nchw_1[blockIdx_z * 784 + threadIdx_z * 49 + threadIdx_y * 7 + threadIdx_x] = conv2d_nchw_local_1[0]
    conv2d_nchw_1[blockIdx_z * 784 + threadIdx_z * 49 + threadIdx_y * 7 + threadIdx_x + 196] = conv2d_nchw_local_1[1]
    conv2d_nchw_1[blockIdx_z * 784 + threadIdx_z * 49 + threadIdx_y * 7 + threadIdx_x + 392] = conv2d_nchw_local_1[2]
    conv2d_nchw_1[blockIdx_z * 784 + threadIdx_z * 49 + threadIdx_y * 7 + threadIdx_x + 588] = conv2d_nchw_local_1[3]
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_1_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((128,), data=p2)
    T_relu_1 = T.decl_buffer((100352,), data=T_relu)
    p1_1 = T.decl_buffer((73728,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1152,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((200704,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((270,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((49,), data=conv2d_nchw, scope="local", align=16)
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw = T.allocate([14], "float32", "local")
    pad_temp_shared = T.allocate([270], "float32", "shared")
    p1_shared = T.allocate([1152], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 4)
    blockIdx_x = T.launch_thread("blockIdx.x", 7)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 4)
    for yy_init in T.unroll(7):
        conv2d_nchw_1[yy_init] = T.float32(0)
        conv2d_nchw_1[yy_init + 7] = T.float32(0)
    for rc_outer in range(32):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 4)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in T.unroll(3):
                if T.Div(threadIdx_x_1, 3) + threadIdx_z_1 < 30:
                    if threadIdx_x_1 < 3:
                        pad_temp_shared_1[threadIdx_z_1 * 9 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = T.if_then_else(1 <= blockIdx_y * 14 + T.truncmod(threadIdx_z_1, 15) and 1 <= blockIdx_x * 8 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, p0_1[T.Div(threadIdx_z_1, 30) * 200704 + rc_outer * 6272 + T.Div(T.truncmod(threadIdx_z_1, 30), 15) * 3136 + blockIdx_y * 784 + T.truncmod(threadIdx_z_1, 15) * 56 + blockIdx_x * 8 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner - 57], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 4)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in T.unroll(9):
                p1_shared_1[threadIdx_z_1 * 36 + threadIdx_x_1 * 9 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 1152 + T.shift_right(threadIdx_x_1, 1) * 576 + rc_outer * 18 + T.bitwise_and(threadIdx_x_1, 1) * 9 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        T.tvm_storage_sync("shared")
        for rc_inner in T.unroll(2):
            for ry_inner in T.unroll(3):
                for rx_inner in T.unroll(3):
                    for yy in T.unroll(7):
                        conv2d_nchw_1[yy] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 135 + yy * 18 + ry_inner * 9 + threadIdx_x * 2 + rx_inner], p1_shared_1[threadIdx_z * 18 + rc_inner * 9 + ry_inner * 3 + rx_inner], conv2d_nchw_1[yy])
                        conv2d_nchw_1[yy + 7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 135 + yy * 18 + ry_inner * 9 + threadIdx_x * 2 + rx_inner], p1_shared_1[threadIdx_z * 18 + rc_inner * 9 + ry_inner * 3 + rx_inner + 576], conv2d_nchw_1[yy + 7])
    for ax2_inner_inner_inner in T.unroll(7):
        T_relu_1[blockIdx_z * 50176 + threadIdx_z * 784 + blockIdx_y * 196 + ax2_inner_inner_inner * 28 + blockIdx_x * 4 + threadIdx_x] = T.max(conv2d_nchw_1[ax2_inner_inner_inner] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
        T_relu_1[blockIdx_z * 50176 + threadIdx_z * 784 + blockIdx_y * 196 + ax2_inner_inner_inner * 28 + blockIdx_x * 4 + threadIdx_x + 25088] = T.max(conv2d_nchw_1[ax2_inner_inner_inner + 7] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_2_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((256,), data=p2)
    T_relu_1 = T.decl_buffer((50176,), data=T_relu)
    p1_1 = T.decl_buffer((294912,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1152,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((100352,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((290,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((49,), data=conv2d_nchw, scope="local", align=16)
    blockIdx_z = T.launch_thread("blockIdx.z", 4)
    conv2d_nchw = T.allocate([14], "float32", "local")
    pad_temp_shared = T.allocate([290], "float32", "shared")
    p1_shared = T.allocate([1152], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 7)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 32)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 2)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[9] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[10] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[11] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[12] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[13] = T.float32(0)
    for rc_outer in range(64):
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 2)
            T.tvm_storage_sync("shared")
            if threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 < 290:
                pad_temp_shared_1[threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3] = T.if_then_else(1 <= blockIdx_y * 4 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3, 145), 29) and 1 <= T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3, 29), p0_1[rc_outer * 1568 + T.Div(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3, 145) * 784 + blockIdx_y * 112 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3, 145), 29) * 28 + T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3, 29) - 29], T.float32(0))
            if threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 < 289:
                pad_temp_shared_1[threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1] = T.if_then_else(1 <= blockIdx_y * 4 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1, 145), 29) and 1 <= T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1, 29), p0_1[rc_outer * 1568 + T.Div(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1, 145) * 784 + blockIdx_y * 112 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1, 145), 29) * 28 + T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 1, 29) - 29], T.float32(0))
            if threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 < 288:
                if T.Div(threadIdx_x_1 * 3 + 2, 5) + threadIdx_y_1 < 2:
                    if threadIdx_x_1 < 1:
                        pad_temp_shared_1[threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2] = T.if_then_else(1 <= blockIdx_y * 4 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2, 145), 29) and 1 <= T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2, 29), p0_1[rc_outer * 1568 + T.Div(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2, 145) * 784 + blockIdx_y * 112 + T.Div(T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2, 145), 29) * 28 + T.truncmod(threadIdx_z_1 * 10 + threadIdx_y_1 * 5 + threadIdx_x_1 * 3 + 2, 29) - 29], T.float32(0))
        with T.launch_thread("threadIdx.z", 32) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 2)
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 1] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 1]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 2] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 2]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 3] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 3]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 4] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 4]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 5] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 5]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 6] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 6]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 7] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 7]
            p1_shared_1[threadIdx_z_1 * 36 + threadIdx_y_1 * 18 + threadIdx_x_1 * 9 + 8] = p1_1[blockIdx_z * 73728 + threadIdx_z_1 * 2304 + threadIdx_y_1 * 1152 + rc_outer * 18 + threadIdx_x_1 * 9 + 8]
        T.tvm_storage_sync("shared")
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 2], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 2], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 4], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 4], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 6], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 6], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 8], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 8], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 10], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 10], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 12], p1_shared_1[threadIdx_z * 18], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 12], p1_shared_1[threadIdx_z * 18 + 576], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 1], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 1], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 3], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 3], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 5], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 5], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 7], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 7], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 9], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 9], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 11], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 11], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 13], p1_shared_1[threadIdx_z * 18 + 1], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 13], p1_shared_1[threadIdx_z * 18 + 577], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 2], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 2], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 4], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 4], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 6], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 6], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 8], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 8], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 10], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 10], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 12], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 12], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 14], p1_shared_1[threadIdx_z * 18 + 2], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 14], p1_shared_1[threadIdx_z * 18 + 578], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 29], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 29], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 31], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 31], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 33], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 33], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 35], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 35], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 37], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 37], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 39], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 39], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 41], p1_shared_1[threadIdx_z * 18 + 3], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 41], p1_shared_1[threadIdx_z * 18 + 579], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 30], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 30], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 32], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 32], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 34], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 34], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 36], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 36], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 38], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 38], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 40], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 40], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 42], p1_shared_1[threadIdx_z * 18 + 4], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 42], p1_shared_1[threadIdx_z * 18 + 580], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 31], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 31], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 33], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 33], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 35], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 35], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 37], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 37], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 39], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 39], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 41], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 41], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 43], p1_shared_1[threadIdx_z * 18 + 5], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 43], p1_shared_1[threadIdx_z * 18 + 581], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 58], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 58], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 60], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 60], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 62], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 62], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 64], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 64], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 66], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 66], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 68], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 68], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 70], p1_shared_1[threadIdx_z * 18 + 6], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 70], p1_shared_1[threadIdx_z * 18 + 582], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 59], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 59], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 61], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 61], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 63], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 63], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 65], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 65], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 67], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 67], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 69], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 69], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 71], p1_shared_1[threadIdx_z * 18 + 7], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 71], p1_shared_1[threadIdx_z * 18 + 583], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 60], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 60], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 62], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 62], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 64], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 64], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 66], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 66], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 68], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 68], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 70], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 70], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 72], p1_shared_1[threadIdx_z * 18 + 8], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 72], p1_shared_1[threadIdx_z * 18 + 584], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 145], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 145], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 147], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 147], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 149], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 149], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 151], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 151], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 153], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 153], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 155], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 155], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 157], p1_shared_1[threadIdx_z * 18 + 9], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 157], p1_shared_1[threadIdx_z * 18 + 585], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 146], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 146], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 148], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 148], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 150], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 150], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 152], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 152], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 154], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 154], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 156], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 156], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 158], p1_shared_1[threadIdx_z * 18 + 10], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 158], p1_shared_1[threadIdx_z * 18 + 586], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 147], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 147], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 149], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 149], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 151], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 151], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 153], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 153], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 155], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 155], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 157], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 157], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 159], p1_shared_1[threadIdx_z * 18 + 11], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 159], p1_shared_1[threadIdx_z * 18 + 587], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 174], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 174], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 176], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 176], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 178], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 178], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 180], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 180], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 182], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 182], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 184], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 184], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 186], p1_shared_1[threadIdx_z * 18 + 12], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 186], p1_shared_1[threadIdx_z * 18 + 588], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 175], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 175], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 177], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 177], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 179], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 179], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 181], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 181], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 183], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 183], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 185], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 185], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 187], p1_shared_1[threadIdx_z * 18 + 13], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 187], p1_shared_1[threadIdx_z * 18 + 589], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 176], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 176], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 178], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 178], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 180], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 180], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 182], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 182], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 184], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 184], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 186], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 186], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 188], p1_shared_1[threadIdx_z * 18 + 14], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 188], p1_shared_1[threadIdx_z * 18 + 590], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 203], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 203], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 205], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 205], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 207], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 207], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 209], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 209], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 211], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 211], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 213], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 213], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 215], p1_shared_1[threadIdx_z * 18 + 15], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 215], p1_shared_1[threadIdx_z * 18 + 591], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 204], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 204], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 206], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 206], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 208], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 208], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 210], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 210], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 212], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 212], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 214], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 214], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 216], p1_shared_1[threadIdx_z * 18 + 16], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 216], p1_shared_1[threadIdx_z * 18 + 592], conv2d_nchw_1[13])
        conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 205], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[0])
        conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 205], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[7])
        conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 207], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[1])
        conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 207], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[8])
        conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 209], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[2])
        conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 209], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[9])
        conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 211], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[3])
        conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 211], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[10])
        conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 213], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[4])
        conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 213], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[11])
        conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 215], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[5])
        conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 215], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[12])
        conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 217], p1_shared_1[threadIdx_z * 18 + 17], conv2d_nchw_1[6])
        conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 58 + threadIdx_x * 14 + 217], p1_shared_1[threadIdx_z * 18 + 593], conv2d_nchw_1[13])
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7] = T.max(conv2d_nchw_1[0] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6272] = T.max(conv2d_nchw_1[7] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 1] = T.max(conv2d_nchw_1[1] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6273] = T.max(conv2d_nchw_1[8] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 2] = T.max(conv2d_nchw_1[2] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6274] = T.max(conv2d_nchw_1[9] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 3] = T.max(conv2d_nchw_1[3] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6275] = T.max(conv2d_nchw_1[10] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 4] = T.max(conv2d_nchw_1[4] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6276] = T.max(conv2d_nchw_1[11] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 5] = T.max(conv2d_nchw_1[5] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6277] = T.max(conv2d_nchw_1[12] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6] = T.max(conv2d_nchw_1[6] + p2_1[blockIdx_z * 64 + threadIdx_z], T.float32(0))
    T_relu_1[blockIdx_z * 12544 + threadIdx_z * 196 + blockIdx_y * 28 + threadIdx_y * 14 + threadIdx_x * 7 + 6278] = T.max(conv2d_nchw_1[13] + p2_1[blockIdx_z * 64 + threadIdx_z + 32], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_3_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((512,), data=p2)
    T_relu_1 = T.decl_buffer((25088,), data=T_relu)
    p1_1 = T.decl_buffer((1179648,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((144,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((50176,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((225,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((7,), data=conv2d_nchw, scope="local", align=16)
    blockIdx_z = T.launch_thread("blockIdx.z", 32)
    conv2d_nchw = T.allocate([7], "float32", "local")
    pad_temp_shared = T.allocate([225], "float32", "shared")
    p1_shared = T.allocate([144], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 1)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 16)
    threadIdx_y = T.launch_thread("threadIdx.y", 1)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    for yy_init in range(7):
        conv2d_nchw_1[yy_init] = T.float32(0)
    for rc_outer in range(256):
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(3):
                if T.Div(threadIdx_x_1, 5) + threadIdx_z_1 < 15:
                    if threadIdx_x_1 < 5:
                        pad_temp_shared_1[threadIdx_z_1 * 15 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = T.if_then_else(1 <= T.truncmod(threadIdx_z_1, 15) and 1 <= threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, p0_1[T.Div(threadIdx_z_1, 15) * 50176 + rc_outer * 196 + T.truncmod(threadIdx_z_1, 15) * 14 + threadIdx_x_1 * 3 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner - 15], T.float32(0))
        with T.launch_thread("threadIdx.z", 16) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 1)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in range(2):
                if T.Div(threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner, 9) + threadIdx_z_1 < 16:
                    if threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 9:
                        p1_shared_1[threadIdx_z_1 * 9 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[blockIdx_z * 36864 + threadIdx_z_1 * 2304 + rc_outer * 9 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        T.tvm_storage_sync("shared")
        for ry_inner, rx_inner, yy in T.grid(3, 3, 7):
            conv2d_nchw_1[yy] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[yy * 30 + ry_inner * 15 + threadIdx_x * 2 + rx_inner], p1_shared_1[threadIdx_z * 9 + ry_inner * 3 + rx_inner], conv2d_nchw_1[yy])
    for ax2_inner_inner_inner in range(7):
        T_relu_1[blockIdx_z * 784 + threadIdx_z * 49 + ax2_inner_inner_inner * 7 + threadIdx_x] = T.max(conv2d_nchw_1[ax2_inner_inner_inner] + p2_1[blockIdx_z * 16 + threadIdx_z], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((64,), data=p2)
    T_relu_1 = T.decl_buffer((802816,), data=T_relu)
    p1_1 = T.decl_buffer((9408,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((3136,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((150528,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((549,), data=pad_temp_shared, scope="shared")
    conv2d_nchw = T.handle("float32", "local")
    conv2d_nchw_1 = T.decl_buffer((128,), data=conv2d_nchw, scope="local", align=16)
    blockIdx_z = T.launch_thread("blockIdx.z", 1)
    conv2d_nchw = T.allocate([32], "float32", "local")
    pad_temp_shared = T.allocate([549], "float32", "shared")
    p1_shared = T.allocate([3136], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 56)
    blockIdx_x = T.launch_thread("blockIdx.x", 4)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 7)
    conv2d_nchw_1[0] = T.float32(0)
    conv2d_nchw_1[8] = T.float32(0)
    conv2d_nchw_1[16] = T.float32(0)
    conv2d_nchw_1[24] = T.float32(0)
    conv2d_nchw_1[4] = T.float32(0)
    conv2d_nchw_1[12] = T.float32(0)
    conv2d_nchw_1[20] = T.float32(0)
    conv2d_nchw_1[28] = T.float32(0)
    conv2d_nchw_1[1] = T.float32(0)
    conv2d_nchw_1[9] = T.float32(0)
    conv2d_nchw_1[17] = T.float32(0)
    conv2d_nchw_1[25] = T.float32(0)
    conv2d_nchw_1[5] = T.float32(0)
    conv2d_nchw_1[13] = T.float32(0)
    conv2d_nchw_1[21] = T.float32(0)
    conv2d_nchw_1[29] = T.float32(0)
    conv2d_nchw_1[2] = T.float32(0)
    conv2d_nchw_1[10] = T.float32(0)
    conv2d_nchw_1[18] = T.float32(0)
    conv2d_nchw_1[26] = T.float32(0)
    conv2d_nchw_1[6] = T.float32(0)
    conv2d_nchw_1[14] = T.float32(0)
    conv2d_nchw_1[22] = T.float32(0)
    conv2d_nchw_1[30] = T.float32(0)
    conv2d_nchw_1[3] = T.float32(0)
    conv2d_nchw_1[11] = T.float32(0)
    conv2d_nchw_1[19] = T.float32(0)
    conv2d_nchw_1[27] = T.float32(0)
    conv2d_nchw_1[7] = T.float32(0)
    conv2d_nchw_1[15] = T.float32(0)
    conv2d_nchw_1[23] = T.float32(0)
    conv2d_nchw_1[31] = T.float32(0)
    for rc_outer in range(3):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            T.tvm_storage_sync("shared")
            pad_temp_shared_1[threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5] = T.if_then_else(3 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) and blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) < 227 and 3 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) and blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) < 227, p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5, 61) - 675], T.float32(0))
            if threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 < 548:
                pad_temp_shared_1[threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1] = T.if_then_else(3 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) and blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) < 227 and 3 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) and blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) < 227, p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 1, 61) - 675], T.float32(0))
            if threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 < 547:
                pad_temp_shared_1[threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2] = T.if_then_else(3 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) and blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) < 227 and 3 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) and blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) < 227, p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 2, 61) - 675], T.float32(0))
            if threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 < 546:
                pad_temp_shared_1[threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3] = T.if_then_else(3 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) and blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) < 227 and 3 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) and blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) < 227, p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 3, 61) - 675], T.float32(0))
            if threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 < 545:
                if threadIdx_y_1 * 7 + threadIdx_x_1 < 13:
                    pad_temp_shared_1[threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4] = T.if_then_else(3 <= blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) and blockIdx_y * 4 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) < 227 and 3 <= blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) and blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) < 227, p0_1[rc_outer * 50176 + blockIdx_y * 896 + T.Div(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) * 224 + blockIdx_x * 56 + T.truncmod(threadIdx_z_1 * 69 + threadIdx_y_1 * 35 + threadIdx_x_1 * 5 + 4, 61) - 675], T.float32(0))
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 7)
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 1] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 1]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 2] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 2]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 3] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 3]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 4] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 4]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 5] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 5]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 6] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4, 7) * 7 + 6]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 7] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 8] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 1]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 9] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 2]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 10] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 3]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 11] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 4]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 12] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 5]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 13] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 1, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 1, 7) * 7 + 6]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 14] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 15] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 1]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 16] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 2]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 17] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 3]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 18] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 4]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 19] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 5]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 20] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 2, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 2, 7) * 7 + 6]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 21] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 22] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 1]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 23] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 2]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 24] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 3]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 25] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 4]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 26] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 5]
            p1_shared_1[threadIdx_z_1 * 392 + threadIdx_y_1 * 196 + threadIdx_x_1 * 28 + 27] = p1_1[threadIdx_z_1 * 1176 + threadIdx_y_1 * 588 + T.Div(threadIdx_x_1 * 4 + 3, 7) * 147 + rc_outer * 49 + T.truncmod(threadIdx_x_1 * 4 + 3, 7) * 7 + 6]
        T.tvm_storage_sync("shared")
        for ry_inner in range(7):
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 784], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1568], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2352], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 784], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1568], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2352], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 784], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1568], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2352], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 784], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1568], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2352], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 49], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 833], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1617], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2401], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 49], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 833], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1617], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 28], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2401], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 49], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 833], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1617], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2401], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 49], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 833], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1617], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2401], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 785], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1569], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2353], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 785], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1569], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2353], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 785], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1569], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2353], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 785], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1569], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2353], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 50], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 834], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1618], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 1], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2402], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 50], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 834], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1618], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 29], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2402], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 50], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 834], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1618], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2402], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 50], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 834], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1618], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2402], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 786], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1570], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2354], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 786], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1570], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2354], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 786], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1570], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2354], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 786], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1570], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2354], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 51], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 835], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1619], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 2], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2403], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 51], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 835], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1619], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 30], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2403], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 51], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 835], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1619], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2403], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 51], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 835], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1619], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2403], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 3], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 787], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1571], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2355], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 3], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 787], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1571], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2355], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 3], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 787], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1571], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2355], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 3], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 787], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1571], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2355], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 52], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 836], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1620], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 3], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2404], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 52], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 836], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1620], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 31], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2404], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 52], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 836], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1620], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2404], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 52], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 836], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1620], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2404], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 4], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 788], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1572], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2356], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 4], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 788], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1572], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2356], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 4], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 788], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1572], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2356], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 4], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 788], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1572], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2356], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 53], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 837], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1621], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 4], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2405], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 53], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 837], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1621], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 32], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2405], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 53], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 837], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1621], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2405], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 53], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 837], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1621], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2405], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 5], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 789], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1573], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2357], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 5], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 789], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1573], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2357], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 5], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 789], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1573], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2357], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 5], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 789], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1573], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2357], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 54], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 838], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1622], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 5], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2406], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 54], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 838], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1622], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 33], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2406], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 54], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 838], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1622], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 7], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2406], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 54], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 838], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1622], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 35], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2406], conv2d_nchw_1[31])
            conv2d_nchw_1[0] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 6], conv2d_nchw_1[0])
            conv2d_nchw_1[8] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 790], conv2d_nchw_1[8])
            conv2d_nchw_1[16] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1574], conv2d_nchw_1[16])
            conv2d_nchw_1[24] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2358], conv2d_nchw_1[24])
            conv2d_nchw_1[4] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 6], conv2d_nchw_1[4])
            conv2d_nchw_1[12] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 790], conv2d_nchw_1[12])
            conv2d_nchw_1[20] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1574], conv2d_nchw_1[20])
            conv2d_nchw_1[28] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2358], conv2d_nchw_1[28])
            conv2d_nchw_1[1] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 6], conv2d_nchw_1[1])
            conv2d_nchw_1[9] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 790], conv2d_nchw_1[9])
            conv2d_nchw_1[17] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1574], conv2d_nchw_1[17])
            conv2d_nchw_1[25] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2358], conv2d_nchw_1[25])
            conv2d_nchw_1[5] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 6], conv2d_nchw_1[5])
            conv2d_nchw_1[13] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 790], conv2d_nchw_1[13])
            conv2d_nchw_1[21] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1574], conv2d_nchw_1[21])
            conv2d_nchw_1[29] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2358], conv2d_nchw_1[29])
            conv2d_nchw_1[2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 55], conv2d_nchw_1[2])
            conv2d_nchw_1[10] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 839], conv2d_nchw_1[10])
            conv2d_nchw_1[18] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1623], conv2d_nchw_1[18])
            conv2d_nchw_1[26] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 6], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2407], conv2d_nchw_1[26])
            conv2d_nchw_1[6] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 55], conv2d_nchw_1[6])
            conv2d_nchw_1[14] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 839], conv2d_nchw_1[14])
            conv2d_nchw_1[22] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1623], conv2d_nchw_1[22])
            conv2d_nchw_1[30] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 34], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2407], conv2d_nchw_1[30])
            conv2d_nchw_1[3] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 55], conv2d_nchw_1[3])
            conv2d_nchw_1[11] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 839], conv2d_nchw_1[11])
            conv2d_nchw_1[19] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1623], conv2d_nchw_1[19])
            conv2d_nchw_1[27] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 8], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2407], conv2d_nchw_1[27])
            conv2d_nchw_1[7] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 55], conv2d_nchw_1[7])
            conv2d_nchw_1[15] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 839], conv2d_nchw_1[15])
            conv2d_nchw_1[23] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 1623], conv2d_nchw_1[23])
            conv2d_nchw_1[31] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[threadIdx_y * 122 + ry_inner * 61 + threadIdx_x * 4 + 36], p1_shared_1[threadIdx_z * 98 + ry_inner * 7 + 2407], conv2d_nchw_1[31])
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2] = T.max(conv2d_nchw_1[0] + p2_1[threadIdx_z * 2], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 200704] = T.max(conv2d_nchw_1[8] + p2_1[threadIdx_z * 2 + 16], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 401408] = T.max(conv2d_nchw_1[16] + p2_1[threadIdx_z * 2 + 32], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 602112] = T.max(conv2d_nchw_1[24] + p2_1[threadIdx_z * 2 + 48], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 14] = T.max(conv2d_nchw_1[4] + p2_1[threadIdx_z * 2], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 200718] = T.max(conv2d_nchw_1[12] + p2_1[threadIdx_z * 2 + 16], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 401422] = T.max(conv2d_nchw_1[20] + p2_1[threadIdx_z * 2 + 32], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 602126] = T.max(conv2d_nchw_1[28] + p2_1[threadIdx_z * 2 + 48], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 1] = T.max(conv2d_nchw_1[1] + p2_1[threadIdx_z * 2], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 200705] = T.max(conv2d_nchw_1[9] + p2_1[threadIdx_z * 2 + 16], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 401409] = T.max(conv2d_nchw_1[17] + p2_1[threadIdx_z * 2 + 32], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 602113] = T.max(conv2d_nchw_1[25] + p2_1[threadIdx_z * 2 + 48], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 15] = T.max(conv2d_nchw_1[5] + p2_1[threadIdx_z * 2], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 200719] = T.max(conv2d_nchw_1[13] + p2_1[threadIdx_z * 2 + 16], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 401423] = T.max(conv2d_nchw_1[21] + p2_1[threadIdx_z * 2 + 32], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 602127] = T.max(conv2d_nchw_1[29] + p2_1[threadIdx_z * 2 + 48], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 12544] = T.max(conv2d_nchw_1[2] + p2_1[threadIdx_z * 2 + 1], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 213248] = T.max(conv2d_nchw_1[10] + p2_1[threadIdx_z * 2 + 17], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 413952] = T.max(conv2d_nchw_1[18] + p2_1[threadIdx_z * 2 + 33], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 614656] = T.max(conv2d_nchw_1[26] + p2_1[threadIdx_z * 2 + 49], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 12558] = T.max(conv2d_nchw_1[6] + p2_1[threadIdx_z * 2 + 1], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 213262] = T.max(conv2d_nchw_1[14] + p2_1[threadIdx_z * 2 + 17], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 413966] = T.max(conv2d_nchw_1[22] + p2_1[threadIdx_z * 2 + 33], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 614670] = T.max(conv2d_nchw_1[30] + p2_1[threadIdx_z * 2 + 49], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 12545] = T.max(conv2d_nchw_1[3] + p2_1[threadIdx_z * 2 + 1], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 213249] = T.max(conv2d_nchw_1[11] + p2_1[threadIdx_z * 2 + 17], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 413953] = T.max(conv2d_nchw_1[19] + p2_1[threadIdx_z * 2 + 33], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 614657] = T.max(conv2d_nchw_1[27] + p2_1[threadIdx_z * 2 + 49], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 12559] = T.max(conv2d_nchw_1[7] + p2_1[threadIdx_z * 2 + 1], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 213263] = T.max(conv2d_nchw_1[15] + p2_1[threadIdx_z * 2 + 17], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 413967] = T.max(conv2d_nchw_1[23] + p2_1[threadIdx_z * 2 + 33], T.float32(0))
    T_relu_1[threadIdx_z * 25088 + blockIdx_y * 224 + threadIdx_y * 112 + blockIdx_x * 28 + threadIdx_x * 2 + 614671] = T.max(conv2d_nchw_1[31] + p2_1[threadIdx_z * 2 + 49], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_conv2d_kernel(conv2d_nchw: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.z", "blockIdx.y", "blockIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x", "threadIdx.z", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    conv2d_nchw_1 = T.decl_buffer((200704,), data=conv2d_nchw)
    p1_1 = T.decl_buffer((4096,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((256,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((200704,), data=p0)
    pad_temp_shared = T.handle("float32", "shared")
    pad_temp_shared_1 = T.decl_buffer((896,), data=pad_temp_shared, scope="shared")
    conv2d_nchw_local = T.handle("float32", "local")
    conv2d_nchw_local_1 = T.decl_buffer((28,), data=conv2d_nchw_local, scope="local")
    blockIdx_z = T.launch_thread("blockIdx.z", 2)
    conv2d_nchw_local = T.allocate([28], "float32", "local")
    pad_temp_shared = T.allocate([896], "float32", "shared")
    p1_shared = T.allocate([256], "float32", "shared")
    blockIdx_y = T.launch_thread("blockIdx.y", 28)
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_z = T.launch_thread("threadIdx.z", 8)
    threadIdx_y = T.launch_thread("threadIdx.y", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 8)
    for ff_c_init in T.unroll(4):
        for xx_c_init in T.unroll(7):
            conv2d_nchw_local_1[ff_c_init * 7 + xx_c_init] = T.float32(0)
    for rc_outer in range(8):
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            T.tvm_storage_sync("shared")
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in T.unroll(7):
                pad_temp_shared_1[threadIdx_z_1 * 112 + threadIdx_y_1 * 56 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p0_1[rc_outer * 25088 + threadIdx_z_1 * 3136 + blockIdx_y * 112 + threadIdx_y_1 * 56 + threadIdx_x_1 * 7 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        with T.launch_thread("threadIdx.z", 8) as threadIdx_z_1:
            threadIdx_y_1 = T.launch_thread("threadIdx.y", 2)
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 8)
            for ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner in T.unroll(2):
                p1_shared_1[threadIdx_z_1 * 32 + threadIdx_y_1 * 16 + threadIdx_x_1 * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner] = p1_1[blockIdx_z * 2048 + threadIdx_z_1 * 256 + threadIdx_y_1 * 128 + T.shift_right(threadIdx_x_1, 2) * 64 + rc_outer * 8 + T.bitwise_and(threadIdx_x_1, 3) * 2 + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner]
        T.tvm_storage_sync("shared")
        for rc_inner in T.unroll(8):
            for ff_c in T.unroll(4):
                for xx_c in T.unroll(7):
                    conv2d_nchw_local_1[ff_c * 7 + xx_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), pad_temp_shared_1[rc_inner * 112 + threadIdx_y * 56 + threadIdx_x * 7 + xx_c], p1_shared_1[threadIdx_z * 32 + ff_c * 8 + rc_inner], conv2d_nchw_local_1[ff_c * 7 + xx_c])
    for ff_inner_inner_inner in T.unroll(4):
        for xx_inner_inner_inner in T.unroll(7):
            conv2d_nchw_1[blockIdx_z * 100352 + threadIdx_z * 12544 + ff_inner_inner_inner * 3136 + blockIdx_y * 112 + threadIdx_y * 56 + threadIdx_x * 7 + xx_inner_inner_inner] = conv2d_nchw_local_1[ff_inner_inner_inner * 7 + xx_inner_inner_inner]
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_llvm.cc:1890: Warning: Unroll hint get ignore at CodeGenLLVM backend,  consider set unroll_explicit=True
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_dense_add_kernel(T_add: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32"), p2: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.y", "blockIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p2_1 = T.decl_buffer((1000,), data=p2)
    T_add_1 = T.decl_buffer((1000,), data=T_add)
    p1_shared_local = T.handle("float32", "local")
    p1_shared_local_1 = T.decl_buffer((4,), data=p1_shared_local, scope="local", align=8)
    p0_shared_local = T.handle("float32", "local")
    p0_shared_local_1 = T.decl_buffer((1,), data=p0_shared_local, scope="local", align=4)
    p1_shared_local_2 = T.handle("float32", "local")
    p1_shared_local_3 = T.decl_buffer((4,), data=p1_shared_local_2, scope="local", align=8)
    p0_shared_local_2 = T.handle("float32", "local")
    p0_shared_local_3 = T.decl_buffer((1,), data=p0_shared_local_2, scope="local", align=4)
    p1_1 = T.decl_buffer((512000,), data=p1)
    p1_shared = T.handle("float32", "shared")
    p1_shared_1 = T.decl_buffer((1024,), data=p1_shared, scope="shared")
    p0_1 = T.decl_buffer((512,), data=p0)
    p0_shared = T.handle("float32", "shared")
    p0_shared_1 = T.decl_buffer((16,), data=p0_shared, scope="shared", align=32)
    T_matmul_NT_local = T.handle("float32", "local")
    T_matmul_NT_local_1 = T.decl_buffer((4,), data=T_matmul_NT_local, scope="local", align=8)
    blockIdx_y = T.launch_thread("blockIdx.y", 16)
    T_matmul_NT_local = T.allocate([4], "float32", "local")
    p0_shared = T.allocate([16], "float32", "shared")
    p1_shared = T.allocate([1024], "float32", "shared")
    p0_shared_local_2 = T.allocate([1], "float32", "local")
    p1_shared_local_2 = T.allocate([4], "float32", "local")
    p0_shared_local = T.allocate([1], "float32", "local")
    p1_shared_local = T.allocate([4], "float32", "local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 16)
    threadIdx_x = T.launch_thread("threadIdx.x", 1)
    for j_c_init in range(2):
        T_matmul_NT_local_1[j_c_init] = T.float32(0)
        T_matmul_NT_local_1[j_c_init + 2] = T.float32(0)
    with T.launch_thread("threadIdx.y", 1) as threadIdx_y_1:
        for ax1_outer in range(2):
            threadIdx_x_1 = T.launch_thread("threadIdx.x", 1)
            for ax1_inner_inner in range(4):
                p0_shared_1[ax1_outer * 4 + ax1_inner_inner] = p0_1[ax1_outer * 4 + ax1_inner_inner]
    threadIdx_y_1 = T.env_thread("threadIdx.y")
    threadIdx_x_1 = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_y_1, 16):
        for ax0_inner in range(4):
            T.launch_thread(threadIdx_x_1, 16)
            for ax1_inner_inner in range(4):
                if threadIdx_x_1 < 2:
                    if blockIdx_y * 8 + T.shift_right(threadIdx_y_1, 1) < 125:
                        p1_shared_1[threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 32768 + threadIdx_y_1 * 2048 + ax0_inner * 512 + threadIdx_x_1 * 4 + ax1_inner_inner]
    threadIdx_y_2 = T.env_thread("threadIdx.y")
    threadIdx_x_2 = T.env_thread("threadIdx.x")
    for k_outer_outer in range(63):
        T.tvm_storage_sync("shared")
        with T.attr(p0_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_2, 1)
            for ax1_outer in range(2):
                T.launch_thread(threadIdx_x_2, 1)
                for ax1_inner_inner in range(4):
                    p0_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 8 + ax1_outer * 4 + ax1_inner_inner] = p0_1[k_outer_outer * 8 + ax1_outer * 4 + ax1_inner_inner + 8]
        with T.attr(p1_shared, "double_buffer_write", 1):
            T.launch_thread(threadIdx_y_1, 16)
            for ax0_inner in range(4):
                T.launch_thread(threadIdx_x_1, 16)
                for ax1_inner_inner in range(4):
                    if threadIdx_x_1 < 2:
                        if blockIdx_y * 8 + T.shift_right(threadIdx_y_1, 1) < 125:
                            p1_shared_1[T.bitwise_and(k_outer_outer + 1, 1) * 512 + threadIdx_y_1 * 32 + ax0_inner * 8 + threadIdx_x_1 * 4 + ax1_inner_inner] = p1_1[blockIdx_y * 32768 + threadIdx_y_1 * 2048 + ax0_inner * 512 + k_outer_outer * 8 + threadIdx_x_1 * 4 + ax1_inner_inner + 8]
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 256]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 1]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 1]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 257]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 2]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 2]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 258]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 3]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 3]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 259]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 4]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 4]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 260]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 5]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 5]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 261]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 6]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 6]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 262]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
        p0_shared_local_3[0] = p0_shared_1[T.bitwise_and(k_outer_outer, 1) * 8 + 7]
        for ax0 in range(2):
            p1_shared_local_3[ax0] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 7]
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                p1_shared_local_3[ax0 + 2] = p1_shared_1[T.bitwise_and(k_outer_outer, 1) * 512 + threadIdx_y * 16 + ax0 * 8 + 263]
        for j_c in range(2):
            T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c], T_matmul_NT_local_1[j_c])
            if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
                T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_3[0], p1_shared_local_3[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    T.tvm_storage_sync("shared")
    p0_shared_local_1[0] = p0_shared_1[8]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 512]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 768]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[9]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 513]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 769]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[10]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 514]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 770]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[11]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 515]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 771]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[12]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 516]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 772]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[13]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 517]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 773]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[14]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 518]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 774]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    p0_shared_local_1[0] = p0_shared_1[15]
    for ax0 in range(2):
        p1_shared_local_1[ax0] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 519]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            p1_shared_local_1[ax0 + 2] = p1_shared_1[threadIdx_y * 16 + ax0 * 8 + 775]
    for j_c in range(2):
        T_matmul_NT_local_1[j_c] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c], T_matmul_NT_local_1[j_c])
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_matmul_NT_local_1[j_c + 2] = T.call_llvm_pure_intrin("float32", "llvm.fmuladd", T.uint32(3), p0_shared_local_1[0], p1_shared_local_1[j_c + 2], T_matmul_NT_local_1[j_c + 2])
    for ax1_inner_inner_inner in range(2):
        T_add_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner] = T_matmul_NT_local_1[ax1_inner_inner_inner] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner]
        if blockIdx_y * 8 + T.shift_right(threadIdx_y, 2) < 121:
            T_add_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32] = T_matmul_NT_local_1[ax1_inner_inner_inner + 2] + p2_1[blockIdx_y * 64 + threadIdx_y * 2 + ax1_inner_inner_inner + 32]
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_global_avg_pool2d_kernel(adaptive_pool_sum: T.handle("float32", "global"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.y", "threadIdx.x"], "tir.noalias": T.bool(True)})
    adaptive_pool_sum_1 = T.decl_buffer((512,), data=adaptive_pool_sum)
    red_buf0 = T.handle("float32", "shared")
    red_buf0_1 = T.decl_buffer((1024,), data=red_buf0, scope="shared")
    p0_1 = T.decl_buffer((25088,), data=p0)
    adaptive_pool_sum_rf = T.handle("float32", "local")
    adaptive_pool_sum_rf_1 = T.decl_buffer((1,), data=adaptive_pool_sum_rf, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 16)
    adaptive_pool_sum_rf = T.allocate([1], "float32", "local")
    red_buf0 = T.allocate([1024], "float32", "shared")
    T.attr(red_buf0, "volatile_scope", 1)
    threadIdx_y = T.launch_thread("threadIdx.y", 32)
    threadIdx_x = T.launch_thread("threadIdx.x", 32)
    adaptive_pool_sum_rf_1[0] = T.float32(0)
    for rv0_rv1_fused_outer in range(2):
        if rv0_rv1_fused_outer * 32 + threadIdx_x < 49 and rv0_rv1_fused_outer * 32 + threadIdx_x < 49:
            adaptive_pool_sum_rf_1[0] = adaptive_pool_sum_rf_1[0] + p0_1[blockIdx_x * 1568 + threadIdx_y * 49 + rv0_rv1_fused_outer * 32 + threadIdx_x]
    with T.attr(T.comm_reducer(lambda x, y: x + y, [T.float32(0)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
        T.tvm_storage_sync("shared")
        red_buf0_1[threadIdx_y * 32 + threadIdx_x] = adaptive_pool_sum_rf_1[0]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 16:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 16]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 8:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 8]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 4:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 4]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 2:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 2]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 1:
            red_buf0_1[threadIdx_y * 32 + threadIdx_x] = red_buf0_1[threadIdx_y * 32 + threadIdx_x] + red_buf0_1[threadIdx_y * 32 + threadIdx_x + 1]
        T.tvm_storage_sync("shared")
    if threadIdx_x == 0:
        adaptive_pool_sum_1[blockIdx_x * 32 + threadIdx_y] = red_buf0_1[threadIdx_y * 32]
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_global_avg_pool2d_kernel_1(adaptive_pool_avg: T.handle("float32"), adaptive_pool_sum: T.handle("float32", "global")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    adaptive_pool_sum_1 = T.decl_buffer((512,), data=adaptive_pool_sum)
    adaptive_pool_avg_1 = T.decl_buffer((512,), data=adaptive_pool_avg)
    blockIdx_x = T.launch_thread("blockIdx.x", 2)
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    adaptive_pool_avg_1[blockIdx_x * 256 + threadIdx_x] = adaptive_pool_sum_1[blockIdx_x * 256 + threadIdx_x] * T.float32(0.020408163265306121)
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_max_pool2d_add_nn_relu_kernel(T_relu: T.handle("float32"), p0: T.handle("float32"), p1: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    p1_1 = T.decl_buffer((64,), data=p1)
    T_relu_1 = T.decl_buffer((200704,), data=T_relu)
    p0_1 = T.decl_buffer((802816,), data=p0)
    pool_max = T.handle("float32", "local")
    pool_max_1 = T.decl_buffer((1,), data=pool_max, scope="local", align=4)
    blockIdx_x = T.launch_thread("blockIdx.x", 784)
    pool_max = T.allocate([1], "float32", "local")
    threadIdx_x = T.launch_thread("threadIdx.x", 256)
    pool_max_1[0] = T.float32(-3.4028234663852886e+38)
    for rv0, rv1 in T.grid(3, 3):
        pool_max_1[0] = T.max(pool_max_1[0], T.if_then_else(1 <= T.Div(T.truncmod(blockIdx_x * 32 + T.shift_right(threadIdx_x, 3), 392), 7) * 2 + rv0 and 1 <= T.truncmod(blockIdx_x * 32 + threadIdx_x, 56) * 2 + rv1, p0_1[T.Div(blockIdx_x * 32 + T.shift_right(threadIdx_x, 3), 7) * 224 + rv0 * 112 + T.truncmod(blockIdx_x * 32 + threadIdx_x, 56) * 2 + rv1 - 113], T.float32(-3.4028234663852886e+38)))
    T_relu_1[blockIdx_x * 256 + threadIdx_x] = T.max(pool_max_1[0] + p1_1[T.Div(blockIdx_x * 4 + T.shift_right(threadIdx_x, 6), 49)], T.float32(0))
[23:08:15] /src/tvm/src/target/llvm/codegen_amdgpu.cc:92: Adding PrimFunc GPU:
# from tvm.script import tir as T

@T.prim_func
def tvmgen_default_fused_nn_softmax_kernel(T_softmax_norm: T.handle("float32"), p0: T.handle("float32")):
    T.func_attr({"calling_conv": 2, "target": T.target({"device": "amd_apu", "host": {"keys": ["cpu"], "kind": "llvm", "tag": ""}, "keys": ["amd_apu", "rocm", "gpu"], "kind": "rocm", "max_num_threads": 256, "max_shared_memory_per_block": 65536, "max_threads_per_block": 256, "mcpu": "gfx906", "model": "1080ti", "mtriple": "amdgcn-amd-amdhsa-hcc", "tag": "", "thread_warp_size": 64}), "tir.is_global_func": T.bool(True), "tir.kernel_launch_params": ["blockIdx.x", "threadIdx.x"], "tir.noalias": T.bool(True)})
    T_softmax_norm_1 = T.decl_buffer((1000,), data=T_softmax_norm)
    red_buf0 = T.handle("float32", "shared")
    red_buf0_1 = T.decl_buffer((64,), data=red_buf0, scope="shared")
    normal_reduce_temp0 = T.handle("float32", "local")
    normal_reduce_temp0_1 = T.decl_buffer((1,), data=normal_reduce_temp0, scope="local")
    T_softmax_exp = T.handle("float32", "local")
    T_softmax_exp_1 = T.decl_buffer((1000,), data=T_softmax_exp, scope="local")
    red_buf0_2 = T.handle("float32", "shared")
    red_buf0_3 = T.decl_buffer((64,), data=red_buf0_2, scope="shared")
    p0_1 = T.decl_buffer((1000,), data=p0)
    normal_reduce_temp0_2 = T.handle("float32", "local")
    normal_reduce_temp0_3 = T.decl_buffer((1,), data=normal_reduce_temp0_2, scope="local")
    blockIdx_x = T.launch_thread("blockIdx.x", 1)
    normal_reduce_temp0_2 = T.allocate([1], "float32", "local")
    red_buf0_2 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0_2, "volatile_scope", 1)
    T_softmax_exp = T.allocate([16], "float32", "local")
    normal_reduce_temp0 = T.allocate([1], "float32", "local")
    red_buf0 = T.allocate([64], "float32", "shared")
    T.attr(red_buf0, "volatile_scope", 1)
    threadIdx_x = T.env_thread("threadIdx.x")
    with T.launch_thread(threadIdx_x, 64):
        normal_reduce_temp0_3[0] = T.float32(-3.4028234663852886e+38)
        for k_inner in range(16):
            if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
                normal_reduce_temp0_3[0] = T.max(normal_reduce_temp0_3[0], p0_1[threadIdx_x * 16 + k_inner])
        with T.attr(T.comm_reducer(lambda x, y: T.max(x, y), [T.float32(-3.4028234663852886e+38)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
            T.tvm_storage_sync("shared")
            red_buf0_3[threadIdx_x] = normal_reduce_temp0_3[0]
            T.tvm_storage_sync("shared")
            if threadIdx_x < 32:
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 32])) as w_32_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_32_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 16])) as w_16_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_16_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 8])) as w_8_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_8_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 4])) as w_4_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_4_0
                    T.tvm_storage_sync("warp")
                with T.LetStmt(T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 2])) as w_2_0:
                    T.tvm_storage_sync("warp")
                    red_buf0_3[threadIdx_x] = w_2_0
                    T.tvm_storage_sync("warp")
                w_1_0: T.float32 = T.max(red_buf0_3[threadIdx_x], red_buf0_3[threadIdx_x + 1])
                T.tvm_storage_sync("warp")
                red_buf0_3[threadIdx_x] = w_1_0
                T.tvm_storage_sync("warp")
            T.tvm_storage_sync("shared")
        for i1_inner_outer in range(4):
            if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
                T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] = T.call_pure_extern("float32x4", "__ocml_exp_f32", p0_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] - T.Broadcast(red_buf0_3[0], 4))
    T.launch_thread(threadIdx_x, 64)
    normal_reduce_temp0_1[0] = T.float32(0)
    T.tvm_storage_sync("warp")
    for k_inner in range(16):
        if threadIdx_x * 2 + T.shift_right(k_inner, 3) < 125:
            normal_reduce_temp0_1[0] = normal_reduce_temp0_1[0] + T_softmax_exp_1[k_inner]
    with T.attr(T.comm_reducer(lambda x, y: x + y, [T.float32(0)]), "reduce_scope", T.reinterpret("handle", T.uint64(0))):
        T.tvm_storage_sync("shared")
        red_buf0_1[threadIdx_x] = normal_reduce_temp0_1[0]
        T.tvm_storage_sync("shared")
        if threadIdx_x < 32:
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 32]) as w_32_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_32_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 16]) as w_16_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_16_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 8]) as w_8_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_8_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 4]) as w_4_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_4_0
                T.tvm_storage_sync("warp")
            with T.LetStmt(red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 2]) as w_2_0:
                T.tvm_storage_sync("warp")
                red_buf0_1[threadIdx_x] = w_2_0
                T.tvm_storage_sync("warp")
            w_1_0: T.float32 = red_buf0_1[threadIdx_x] + red_buf0_1[threadIdx_x + 1]
            T.tvm_storage_sync("warp")
            red_buf0_1[threadIdx_x] = w_1_0
            T.tvm_storage_sync("warp")
        T.tvm_storage_sync("shared")
    for i1_inner_outer in range(4):
        if threadIdx_x * 2 + T.shift_right(i1_inner_outer, 1) < 125:
            T_softmax_norm_1[threadIdx_x * 16 + i1_inner_outer * 4:threadIdx_x * 16 + i1_inner_outer * 4 + 4] = T_softmax_exp_1[i1_inner_outer * 4:i1_inner_outer * 4 + 4] / T.Broadcast(red_buf0_1[0], 4)
--------------------------------------------------
Network Name         Mean Inference Time (std dev)
--------------------------------------------------
Traceback (most recent call last):
  File "/src/tvm/apps/benchmark/gpu_imagenet_bench.py", line 113, in <module>
    benchmark(network, target)
  File "/src/tvm/apps/benchmark/gpu_imagenet_bench.py", line 37, in benchmark
    lib = relay.build(net, target=target, params=params)
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/relay/build_module.py", line 364, in build
    graph_json, runtime_mod, params = bld_mod.build(
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/relay/build_module.py", line 161, in build
    self._build(
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/usr/local/lib/python3.10/dist-packages/tvm-0.7.0.dev6030+g4de435be7-py3.10-linux-x86_64.egg/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm._ffi.base.TVMError: Traceback (most recent call last):
  8: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::relay::backend::RelayBuildModule::GetFunction(tvm::runtime::String const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  7: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
  6: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  5: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::codegen::BuildAMDGPU(tvm::IRModule, tvm::Target)
  1: tvm::codegen::CodeGenLLVM::Finish()
  0: tvm::codegen::CodeGenLLVM::Verify() const
  File "/src/tvm/src/target/llvm/codegen_llvm.cc", line 355
TVMError: LLVM module verification failed with the following errors: 
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %83 = icmp slt i32 %29, 2
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %90 = mul nsw i32 %29, 4
Instruction does not dominate all uses!
  %29 = call i32 @llvm.amdgcn.workitem.id.x()
  %103 = mul nsw i32 %29, 4

